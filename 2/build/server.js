var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/react/cjs/react.production.min.js
var require_react_production_min = __commonJS({
  "node_modules/react/cjs/react.production.min.js"(exports) {
    "use strict";
    var l = Symbol.for("react.element");
    var n = Symbol.for("react.portal");
    var p = Symbol.for("react.fragment");
    var q = Symbol.for("react.strict_mode");
    var r = Symbol.for("react.profiler");
    var t = Symbol.for("react.provider");
    var u = Symbol.for("react.context");
    var v = Symbol.for("react.server_context");
    var w = Symbol.for("react.forward_ref");
    var x = Symbol.for("react.suspense");
    var y = Symbol.for("react.suspense_list");
    var z = Symbol.for("react.memo");
    var A = Symbol.for("react.lazy");
    var aa = Symbol.for("react.debug_trace_mode");
    var ba = Symbol.for("react.offscreen");
    var ca = Symbol.for("react.cache");
    var B = Symbol.for("react.default_value");
    var C = Symbol.iterator;
    function da(a) {
      if (null === a || "object" !== typeof a)
        return null;
      a = C && a[C] || a["@@iterator"];
      return "function" === typeof a ? a : null;
    }
    var D = { isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } };
    var E = Object.assign;
    var F = {};
    function G(a, b, c) {
      this.props = a;
      this.context = b;
      this.refs = F;
      this.updater = c || D;
    }
    G.prototype.isReactComponent = {};
    G.prototype.setState = function(a, b) {
      if ("object" !== typeof a && "function" !== typeof a && null != a)
        throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
      this.updater.enqueueSetState(this, a, b, "setState");
    };
    G.prototype.forceUpdate = function(a) {
      this.updater.enqueueForceUpdate(this, a, "forceUpdate");
    };
    function H() {
    }
    H.prototype = G.prototype;
    function I(a, b, c) {
      this.props = a;
      this.context = b;
      this.refs = F;
      this.updater = c || D;
    }
    var J = I.prototype = new H();
    J.constructor = I;
    E(J, G.prototype);
    J.isPureReactComponent = true;
    var K = Array.isArray;
    var L = Object.prototype.hasOwnProperty;
    var M = { current: null };
    var N = { key: true, ref: true, __self: true, __source: true };
    function O(a, b, c) {
      var d, e = {}, f = null, g = null;
      if (null != b)
        for (d in void 0 !== b.ref && (g = b.ref), void 0 !== b.key && (f = "" + b.key), b)
          L.call(b, d) && !N.hasOwnProperty(d) && (e[d] = b[d]);
      var h = arguments.length - 2;
      if (1 === h)
        e.children = c;
      else if (1 < h) {
        for (var k = Array(h), m = 0; m < h; m++)
          k[m] = arguments[m + 2];
        e.children = k;
      }
      if (a && a.defaultProps)
        for (d in h = a.defaultProps, h)
          void 0 === e[d] && (e[d] = h[d]);
      return { $$typeof: l, type: a, key: f, ref: g, props: e, _owner: M.current };
    }
    function ea(a, b) {
      return { $$typeof: l, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
    }
    function P(a) {
      return "object" === typeof a && null !== a && a.$$typeof === l;
    }
    function escape(a) {
      var b = { "=": "=0", ":": "=2" };
      return "$" + a.replace(/[=:]/g, function(c) {
        return b[c];
      });
    }
    var Q = /\/+/g;
    function R(a, b) {
      return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
    }
    function S(a, b, c, d, e) {
      var f = typeof a;
      if ("undefined" === f || "boolean" === f)
        a = null;
      var g = false;
      if (null === a)
        g = true;
      else
        switch (f) {
          case "string":
          case "number":
            g = true;
            break;
          case "object":
            switch (a.$$typeof) {
              case l:
              case n:
                g = true;
            }
        }
      if (g)
        return g = a, e = e(g), a = "" === d ? "." + R(g, 0) : d, K(e) ? (c = "", null != a && (c = a.replace(Q, "$&/") + "/"), S(e, b, c, "", function(m) {
          return m;
        })) : null != e && (P(e) && (e = ea(e, c + (!e.key || g && g.key === e.key ? "" : ("" + e.key).replace(Q, "$&/") + "/") + a)), b.push(e)), 1;
      g = 0;
      d = "" === d ? "." : d + ":";
      if (K(a))
        for (var h = 0; h < a.length; h++) {
          f = a[h];
          var k = d + R(f, h);
          g += S(f, b, c, k, e);
        }
      else if (k = da(a), "function" === typeof k)
        for (a = k.call(a), h = 0; !(f = a.next()).done; )
          f = f.value, k = d + R(f, h++), g += S(f, b, c, k, e);
      else if ("object" === f)
        throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
      return g;
    }
    function T(a, b, c) {
      if (null == a)
        return a;
      var d = [], e = 0;
      S(a, d, "", "", function(f) {
        return b.call(c, f, e++);
      });
      return d;
    }
    function fa(a) {
      if (-1 === a._status) {
        var b = a._result;
        b = b();
        b.then(function(c) {
          if (0 === a._status || -1 === a._status)
            a._status = 1, a._result = c;
        }, function(c) {
          if (0 === a._status || -1 === a._status)
            a._status = 2, a._result = c;
        });
        -1 === a._status && (a._status = 0, a._result = b);
      }
      if (1 === a._status)
        return a._result.default;
      throw a._result;
    }
    var U = { current: null };
    function ha() {
      return /* @__PURE__ */ new WeakMap();
    }
    function V() {
      return { s: 0, v: void 0, o: null, p: null };
    }
    var W = { current: null };
    var X = { transition: null };
    var Y = { ReactCurrentDispatcher: W, ReactCurrentCache: U, ReactCurrentBatchConfig: X, ReactCurrentOwner: M, ContextRegistry: {} };
    var Z = Y.ContextRegistry;
    exports.Children = { map: T, forEach: function(a, b, c) {
      T(a, function() {
        b.apply(this, arguments);
      }, c);
    }, count: function(a) {
      var b = 0;
      T(a, function() {
        b++;
      });
      return b;
    }, toArray: function(a) {
      return T(a, function(b) {
        return b;
      }) || [];
    }, only: function(a) {
      if (!P(a))
        throw Error("React.Children.only expected to receive a single React element child.");
      return a;
    } };
    exports.Component = G;
    exports.Fragment = p;
    exports.Profiler = r;
    exports.PureComponent = I;
    exports.StrictMode = q;
    exports.Suspense = x;
    exports.SuspenseList = y;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Y;
    exports.cache = function(a) {
      return function() {
        var b = U.current;
        if (!b)
          return a.apply(null, arguments);
        var c = b.getCacheForType(ha);
        b = c.get(a);
        void 0 === b && (b = V(), c.set(a, b));
        c = 0;
        for (var d = arguments.length; c < d; c++) {
          var e = arguments[c];
          if ("function" === typeof e || "object" === typeof e && null !== e) {
            var f = b.o;
            null === f && (b.o = f = /* @__PURE__ */ new WeakMap());
            b = f.get(e);
            void 0 === b && (b = V(), f.set(e, b));
          } else
            f = b.p, null === f && (b.p = f = /* @__PURE__ */ new Map()), b = f.get(e), void 0 === b && (b = V(), f.set(e, b));
        }
        if (1 === b.s)
          return b.v;
        if (2 === b.s)
          throw b.v;
        try {
          var g = a.apply(
            null,
            arguments
          );
          c = b;
          c.s = 1;
          return c.v = g;
        } catch (h) {
          throw g = b, g.s = 2, g.v = h, h;
        }
      };
    };
    exports.cloneElement = function(a, b, c) {
      if (null === a || void 0 === a)
        throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
      var d = E({}, a.props), e = a.key, f = a.ref, g = a._owner;
      if (null != b) {
        void 0 !== b.ref && (f = b.ref, g = M.current);
        void 0 !== b.key && (e = "" + b.key);
        if (a.type && a.type.defaultProps)
          var h = a.type.defaultProps;
        for (k in b)
          L.call(b, k) && !N.hasOwnProperty(k) && (d[k] = void 0 === b[k] && void 0 !== h ? h[k] : b[k]);
      }
      var k = arguments.length - 2;
      if (1 === k)
        d.children = c;
      else if (1 < k) {
        h = Array(k);
        for (var m = 0; m < k; m++)
          h[m] = arguments[m + 2];
        d.children = h;
      }
      return { $$typeof: l, type: a.type, key: e, ref: f, props: d, _owner: g };
    };
    exports.createContext = function(a) {
      a = { $$typeof: u, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
      a.Provider = { $$typeof: t, _context: a };
      return a.Consumer = a;
    };
    exports.createElement = O;
    exports.createFactory = function(a) {
      var b = O.bind(null, a);
      b.type = a;
      return b;
    };
    exports.createRef = function() {
      return { current: null };
    };
    exports.createServerContext = function(a, b) {
      var c = true;
      if (!Z[a]) {
        c = false;
        var d = { $$typeof: v, _currentValue: b, _currentValue2: b, _defaultValue: b, _threadCount: 0, Provider: null, Consumer: null, _globalName: a };
        d.Provider = { $$typeof: t, _context: d };
        Z[a] = d;
      }
      d = Z[a];
      if (d._defaultValue === B)
        d._defaultValue = b, d._currentValue === B && (d._currentValue = b), d._currentValue2 === B && (d._currentValue2 = b);
      else if (c)
        throw Error("ServerContext: " + a + " already defined");
      return d;
    };
    exports.experimental_useEffectEvent = function(a) {
      return W.current.useEffectEvent(a);
    };
    exports.experimental_useOptimistic = function(a, b) {
      return W.current.useOptimistic(a, b);
    };
    exports.forwardRef = function(a) {
      return { $$typeof: w, render: a };
    };
    exports.isValidElement = P;
    exports.lazy = function(a) {
      return { $$typeof: A, _payload: { _status: -1, _result: a }, _init: fa };
    };
    exports.memo = function(a, b) {
      return { $$typeof: z, type: a, compare: void 0 === b ? null : b };
    };
    exports.startTransition = function(a) {
      var b = X.transition;
      X.transition = {};
      try {
        a();
      } finally {
        X.transition = b;
      }
    };
    exports.unstable_Cache = ca;
    exports.unstable_DebugTracingMode = aa;
    exports.unstable_Offscreen = ba;
    exports.unstable_act = function() {
      throw Error("act(...) is not supported in production builds of React.");
    };
    exports.unstable_getCacheForType = function(a) {
      var b = U.current;
      return b ? b.getCacheForType(a) : a();
    };
    exports.unstable_getCacheSignal = function() {
      var a = U.current;
      return a ? a.getCacheSignal() : (a = new AbortController(), a.abort(Error("This CacheSignal was requested outside React which means that it is immediately aborted.")), a.signal);
    };
    exports.unstable_useCacheRefresh = function() {
      return W.current.useCacheRefresh();
    };
    exports.unstable_useMemoCache = function(a) {
      return W.current.useMemoCache(a);
    };
    exports.use = function(a) {
      return W.current.use(a);
    };
    exports.useCallback = function(a, b) {
      return W.current.useCallback(a, b);
    };
    exports.useContext = function(a) {
      return W.current.useContext(a);
    };
    exports.useDebugValue = function() {
    };
    exports.useDeferredValue = function(a) {
      return W.current.useDeferredValue(a);
    };
    exports.useEffect = function(a, b) {
      return W.current.useEffect(a, b);
    };
    exports.useId = function() {
      return W.current.useId();
    };
    exports.useImperativeHandle = function(a, b, c) {
      return W.current.useImperativeHandle(a, b, c);
    };
    exports.useInsertionEffect = function(a, b) {
      return W.current.useInsertionEffect(a, b);
    };
    exports.useLayoutEffect = function(a, b) {
      return W.current.useLayoutEffect(a, b);
    };
    exports.useMemo = function(a, b) {
      return W.current.useMemo(a, b);
    };
    exports.useReducer = function(a, b, c) {
      return W.current.useReducer(a, b, c);
    };
    exports.useRef = function(a) {
      return W.current.useRef(a);
    };
    exports.useState = function(a) {
      return W.current.useState(a);
    };
    exports.useSyncExternalStore = function(a, b, c) {
      return W.current.useSyncExternalStore(a, b, c);
    };
    exports.useTransition = function() {
      return W.current.useTransition();
    };
    exports.version = "18.3.0-experimental-a1c62b8a7-20230627";
  }
});

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.3.0-experimental-a1c62b8a7-20230627";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher$1 = {
          current: null
        };
        var ReactCurrentCache = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          // Used to reproduce behavior of `batchedUpdates` in legacy mode.
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false,
          // Tracks whether something called `use` during the current batch of work.
          // Determines whether we should yield to microtasks to unwrap already resolved
          // promises without suspending.
          didUsePromise: false
        };
        var ReactCurrentOwner = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactDebugCurrentFrame$1 = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame$1.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame$1.getCurrentStack = null;
          ReactDebugCurrentFrame$1.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame$1.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ContextRegistry$1 = {};
        var ReactSharedInternals = {
          ReactCurrentDispatcher: ReactCurrentDispatcher$1,
          ReactCurrentCache,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame$1;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        {
          ReactSharedInternals.ContextRegistry = ContextRegistry$1;
        }
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function(publicInstance) {
            return false;
          },
          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_CACHE_TYPE: {
              return "Cache";
            }
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
              case REACT_SERVER_CONTEXT_TYPE: {
                var context2 = type;
                return (context2.displayName || context2._globalName) + ".Provider";
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        function ReactElement(type, key, ref, self, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        }
        function createElement$1(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement$1(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + // $FlowFixMe[incompatible-type] Flow incorrectly thinks React.Portal doesn't have a key
                  (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey(
                    // $FlowFixMe[unsafe-addition]
                    "" + mappedChild.key
                    // eslint-disable-line react-internal/safe-string-coercion
                  ) + "/" : "") + childKey
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(
            children,
            // $FlowFixMe[missing-this-annot]
            function() {
              forEachFunc.apply(this, arguments);
            },
            forEachContext
          );
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                // $FlowFixMe[missing-local-annot]
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                // $FlowFixMe[missing-local-annot]
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render.name && !render.displayName) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_CLIENT_REFERENCE$1 = Symbol.for("react.client.reference");
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || type === REACT_CACHE_TYPE || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var UNTERMINATED = 0;
        var TERMINATED = 1;
        var ERRORED = 2;
        function createCacheRoot() {
          return /* @__PURE__ */ new WeakMap();
        }
        function createCacheNode() {
          return {
            s: UNTERMINATED,
            // status, represents whether the cached computation returned a value or threw an error
            v: void 0,
            // value, either the cached result or an error, depending on s
            o: null,
            // object cache, a WeakMap where non-primitive arguments are stored
            p: null
            // primitive cache, a regular Map where primitive arguments are stored.
          };
        }
        function cache(fn) {
          return function() {
            var dispatcher = ReactCurrentCache.current;
            if (!dispatcher) {
              return fn.apply(null, arguments);
            }
            var fnMap = dispatcher.getCacheForType(createCacheRoot);
            var fnNode = fnMap.get(fn);
            var cacheNode;
            if (fnNode === void 0) {
              cacheNode = createCacheNode();
              fnMap.set(fn, cacheNode);
            } else {
              cacheNode = fnNode;
            }
            for (var i = 0, l = arguments.length; i < l; i++) {
              var arg = arguments[i];
              if (typeof arg === "function" || typeof arg === "object" && arg !== null) {
                var objectCache = cacheNode.o;
                if (objectCache === null) {
                  cacheNode.o = objectCache = /* @__PURE__ */ new WeakMap();
                }
                var objectNode = objectCache.get(arg);
                if (objectNode === void 0) {
                  cacheNode = createCacheNode();
                  objectCache.set(arg, cacheNode);
                } else {
                  cacheNode = objectNode;
                }
              } else {
                var primitiveCache = cacheNode.p;
                if (primitiveCache === null) {
                  cacheNode.p = primitiveCache = /* @__PURE__ */ new Map();
                }
                var primitiveNode = primitiveCache.get(arg);
                if (primitiveNode === void 0) {
                  cacheNode = createCacheNode();
                  primitiveCache.set(arg, cacheNode);
                } else {
                  cacheNode = primitiveNode;
                }
              }
            }
            if (cacheNode.s === TERMINATED) {
              return cacheNode.v;
            }
            if (cacheNode.s === ERRORED) {
              throw cacheNode.v;
            }
            try {
              var result = fn.apply(null, arguments);
              var terminatedNode = cacheNode;
              terminatedNode.s = TERMINATED;
              terminatedNode.v = result;
              return result;
            } catch (error2) {
              var erroredNode = cacheNode;
              erroredNode.s = ERRORED;
              erroredNode.v = error2;
              throw error2;
            }
          };
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher$1.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function getCacheSignal() {
          var dispatcher = ReactCurrentCache.current;
          if (!dispatcher) {
            var controller = new AbortController();
            var reason = new Error("This CacheSignal was requested outside React which means that it is immediately aborted.");
            controller.abort(reason);
            return controller.signal;
          }
          return dispatcher.getCacheSignal();
        }
        function getCacheForType(resourceType) {
          var dispatcher = ReactCurrentCache.current;
          if (!dispatcher) {
            return resourceType();
          }
          return dispatcher.getCacheForType(resourceType);
        }
        function useContext(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState2(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useInsertionEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        function useCacheRefresh() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCacheRefresh();
        }
        function use2(usable) {
          var dispatcher = resolveDispatcher();
          return dispatcher.use(usable);
        }
        function useMemoCache(size) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemoCache(size);
        }
        function useEffectEvent(callback) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffectEvent(callback);
        }
        function useOptimistic(passthrough, reducer) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useOptimistic(passthrough, reducer);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement$1(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement$1(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement$1(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement$1(null);
                }
              }
            }
          }
        }
        var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object" || !node) {
            return;
          }
          if (node.$$typeof === REACT_CLIENT_REFERENCE)
            ;
          else if (isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            if (type.$$typeof === REACT_CLIENT_REFERENCE) {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement$1.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement$1.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        var ContextRegistry = ReactSharedInternals.ContextRegistry;
        function createServerContext(globalName, defaultValue) {
          var wasDefined = true;
          if (!ContextRegistry[globalName]) {
            wasDefined = false;
            var _context = {
              $$typeof: REACT_SERVER_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _defaultValue: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              _globalName: globalName
            };
            _context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context
            };
            {
              var hasWarnedAboutUsingConsumer;
              _context._currentRenderer = null;
              _context._currentRenderer2 = null;
              Object.defineProperties(_context, {
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumer) {
                      error("Consumer pattern is not supported by ReactServerContext");
                      hasWarnedAboutUsingConsumer = true;
                    }
                    return null;
                  }
                }
              });
            }
            ContextRegistry[globalName] = _context;
          }
          var context = ContextRegistry[globalName];
          if (context._defaultValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
            context._defaultValue = defaultValue;
            if (context._currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
              context._currentValue = defaultValue;
            }
            if (context._currentValue2 === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
              context._currentValue2 = defaultValue;
            }
          } else if (wasDefined) {
            throw new Error("ServerContext: " + globalName + " already defined");
          }
          return context;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                currentTransition._updatedFibers.clear();
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module2 && module2[requireString];
              enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var prevActQueue = ReactCurrentActQueue.current;
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            var queue = ReactCurrentActQueue.current = prevActQueue !== null ? prevActQueue : [];
            ReactCurrentActQueue.isBatchingLegacy = true;
            var result;
            var didAwaitActCall = false;
            try {
              ReactCurrentActQueue.didScheduleLegacyUpdate = false;
              result = callback();
              var didScheduleLegacyUpdate = ReactCurrentActQueue.didScheduleLegacyUpdate;
              if (!prevIsBatchingLegacy && didScheduleLegacyUpdate) {
                flushActQueue(queue);
              }
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            } catch (error2) {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              popActScope(prevActQueue, prevActScopeDepth);
              throw error2;
            }
            if (result !== null && typeof result === "object" && // $FlowFixMe[method-unbinding]
            typeof result.then === "function") {
              var thenable = result;
              queueSeveralMicrotasks(function() {
                if (!didAwaitActCall && !didWarnNoAwaitAct) {
                  didWarnNoAwaitAct = true;
                  error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                }
              });
              return {
                then: function(resolve, reject) {
                  didAwaitActCall = true;
                  thenable.then(function(returnValue2) {
                    popActScope(prevActQueue, prevActScopeDepth);
                    if (prevActScopeDepth === 0) {
                      try {
                        flushActQueue(queue);
                        enqueueTask(function() {
                          return (
                            // Recursively flush tasks scheduled by a microtask.
                            recursivelyFlushAsyncActWork(returnValue2, resolve, reject)
                          );
                        });
                      } catch (error2) {
                        reject(error2);
                      }
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActQueue, prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
            } else {
              var returnValue = result;
              popActScope(prevActQueue, prevActScopeDepth);
              if (prevActScopeDepth === 0) {
                flushActQueue(queue);
                if (queue.length !== 0) {
                  queueSeveralMicrotasks(function() {
                    if (!didAwaitActCall && !didWarnNoAwaitAct) {
                      didWarnNoAwaitAct = true;
                      error("A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)");
                    }
                  });
                }
                ReactCurrentActQueue.current = null;
              }
              return {
                then: function(resolve, reject) {
                  didAwaitActCall = true;
                  if (prevActScopeDepth === 0) {
                    ReactCurrentActQueue.current = queue;
                    enqueueTask(function() {
                      return (
                        // Recursively flush tasks scheduled by a microtask.
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject)
                      );
                    });
                  } else {
                    resolve(returnValue);
                  }
                }
              };
            }
          }
        }
        function popActScope(prevActQueue, prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              if (queue.length !== 0) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                ReactCurrentActQueue.current = null;
                resolve(returnValue);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i = 0;
              try {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    ReactCurrentActQueue.didUsePromise = false;
                    var continuation = callback(false);
                    if (continuation !== null) {
                      if (ReactCurrentActQueue.didUsePromise) {
                        queue[i] = callback;
                        queue.splice(0, i);
                        return;
                      }
                      callback = continuation;
                    } else {
                      break;
                    }
                  } while (true);
                }
                queue.length = 0;
              } catch (error2) {
                queue.splice(0, i + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var queueSeveralMicrotasks = typeof queueMicrotask === "function" ? function(callback) {
          queueMicrotask(function() {
            return queueMicrotask(callback);
          });
        } : enqueueTask;
        var createElement = createElementWithValidation;
        var cloneElement = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children;
        exports.Component = Component;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cache = cache;
        exports.cloneElement = cloneElement;
        exports.createContext = createContext;
        exports.createElement = createElement;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.createServerContext = createServerContext;
        exports.experimental_useEffectEvent = useEffectEvent;
        exports.experimental_useOptimistic = useOptimistic;
        exports.forwardRef = forwardRef;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy;
        exports.memo = memo;
        exports.startTransition = startTransition;
        exports.unstable_Cache = REACT_CACHE_TYPE;
        exports.unstable_DebugTracingMode = REACT_DEBUG_TRACING_MODE_TYPE;
        exports.unstable_Offscreen = REACT_OFFSCREEN_TYPE;
        exports.unstable_act = act;
        exports.unstable_getCacheForType = getCacheForType;
        exports.unstable_getCacheSignal = getCacheSignal;
        exports.unstable_useCacheRefresh = useCacheRefresh;
        exports.unstable_useMemoCache = useMemoCache;
        exports.use = use2;
        exports.useCallback = useCallback;
        exports.useContext = useContext;
        exports.useDebugValue = useDebugValue;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect;
        exports.useId = useId;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useInsertionEffect = useInsertionEffect;
        exports.useLayoutEffect = useLayoutEffect;
        exports.useMemo = useMemo;
        exports.useReducer = useReducer;
        exports.useRef = useRef;
        exports.useState = useState2;
        exports.useSyncExternalStore = useSyncExternalStore;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_production_min();
    } else {
      module2.exports = require_react_development();
    }
  }
});

// node_modules/scheduler/cjs/scheduler.production.min.js
var require_scheduler_production_min = __commonJS({
  "node_modules/scheduler/cjs/scheduler.production.min.js"(exports) {
    "use strict";
    function f(a, b) {
      var c = a.length;
      a.push(b);
      a:
        for (; 0 < c; ) {
          var d = c - 1 >>> 1, e = a[d];
          if (0 < g(e, b))
            a[d] = b, a[c] = e, c = d;
          else
            break a;
        }
    }
    function h(a) {
      return 0 === a.length ? null : a[0];
    }
    function k(a) {
      if (0 === a.length)
        return null;
      var b = a[0], c = a.pop();
      if (c !== b) {
        a[0] = c;
        a:
          for (var d = 0, e = a.length, q = e >>> 1; d < q; ) {
            var m = 2 * (d + 1) - 1, D = a[m], n = m + 1, x = a[n];
            if (0 > g(D, c))
              n < e && 0 > g(x, D) ? (a[d] = x, a[n] = c, d = n) : (a[d] = D, a[m] = c, d = m);
            else if (n < e && 0 > g(x, c))
              a[d] = x, a[n] = c, d = n;
            else
              break a;
          }
      }
      return b;
    }
    function g(a, b) {
      var c = a.sortIndex - b.sortIndex;
      return 0 !== c ? c : a.id - b.id;
    }
    exports.unstable_now = void 0;
    if ("object" === typeof performance && "function" === typeof performance.now) {
      l = performance;
      exports.unstable_now = function() {
        return l.now();
      };
    } else {
      p = Date, r = p.now();
      exports.unstable_now = function() {
        return p.now() - r;
      };
    }
    var l;
    var p;
    var r;
    var t = [];
    var u = [];
    var v = 1;
    var w = null;
    var y = 3;
    var z = false;
    var A = false;
    var B = false;
    var C = "function" === typeof setTimeout ? setTimeout : null;
    var E = "function" === typeof clearTimeout ? clearTimeout : null;
    var F = "undefined" !== typeof setImmediate ? setImmediate : null;
    "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
    function G(a) {
      for (var b = h(u); null !== b; ) {
        if (null === b.callback)
          k(u);
        else if (b.startTime <= a)
          k(u), b.sortIndex = b.expirationTime, f(t, b);
        else
          break;
        b = h(u);
      }
    }
    function H(a) {
      B = false;
      G(a);
      if (!A)
        if (null !== h(t))
          A = true, I(J);
        else {
          var b = h(u);
          null !== b && K(H, b.startTime - a);
        }
    }
    function J(a, b) {
      A = false;
      B && (B = false, E(L), L = -1);
      z = true;
      var c = y;
      try {
        a: {
          G(b);
          for (w = h(t); null !== w && (!(w.expirationTime > b) || a && !M()); ) {
            var d = w.callback;
            if ("function" === typeof d) {
              w.callback = null;
              y = w.priorityLevel;
              var e = d(w.expirationTime <= b);
              b = exports.unstable_now();
              if ("function" === typeof e) {
                w.callback = e;
                G(b);
                var q = true;
                break a;
              } else
                w === h(t) && k(t), G(b);
            } else
              k(t);
            w = h(t);
          }
          if (null !== w)
            q = true;
          else {
            var m = h(u);
            null !== m && K(H, m.startTime - b);
            q = false;
          }
        }
        return q;
      } finally {
        w = null, y = c, z = false;
      }
    }
    var N = false;
    var O = null;
    var L = -1;
    var P = 5;
    var Q = -1;
    function M() {
      return exports.unstable_now() - Q < P ? false : true;
    }
    function R() {
      if (null !== O) {
        var a = exports.unstable_now();
        Q = a;
        var b = true;
        try {
          b = O(true, a);
        } finally {
          b ? S() : (N = false, O = null);
        }
      } else
        N = false;
    }
    var S;
    if ("function" === typeof F)
      S = function() {
        F(R);
      };
    else if ("undefined" !== typeof MessageChannel) {
      T = new MessageChannel(), U = T.port2;
      T.port1.onmessage = R;
      S = function() {
        U.postMessage(null);
      };
    } else
      S = function() {
        C(R, 0);
      };
    var T;
    var U;
    function I(a) {
      O = a;
      N || (N = true, S());
    }
    function K(a, b) {
      L = C(function() {
        a(exports.unstable_now());
      }, b);
    }
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function(a) {
      a.callback = null;
    };
    exports.unstable_continueExecution = function() {
      A || z || (A = true, I(J));
    };
    exports.unstable_forceFrameRate = function(a) {
      0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P = 0 < a ? Math.floor(1e3 / a) : 5;
    };
    exports.unstable_getCurrentPriorityLevel = function() {
      return y;
    };
    exports.unstable_getFirstCallbackNode = function() {
      return h(t);
    };
    exports.unstable_next = function(a) {
      switch (y) {
        case 1:
        case 2:
        case 3:
          var b = 3;
          break;
        default:
          b = y;
      }
      var c = y;
      y = b;
      try {
        return a();
      } finally {
        y = c;
      }
    };
    exports.unstable_pauseExecution = function() {
    };
    exports.unstable_requestPaint = function() {
    };
    exports.unstable_runWithPriority = function(a, b) {
      switch (a) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a = 3;
      }
      var c = y;
      y = a;
      try {
        return b();
      } finally {
        y = c;
      }
    };
    exports.unstable_scheduleCallback = function(a, b, c) {
      var d = exports.unstable_now();
      "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
      switch (a) {
        case 1:
          var e = -1;
          break;
        case 2:
          e = 250;
          break;
        case 5:
          e = 1073741823;
          break;
        case 4:
          e = 1e4;
          break;
        default:
          e = 5e3;
      }
      e = c + e;
      a = { id: v++, callback: b, priorityLevel: a, startTime: c, expirationTime: e, sortIndex: -1 };
      c > d ? (a.sortIndex = c, f(u, a), null === h(t) && a === h(u) && (B ? (E(L), L = -1) : B = true, K(H, c - d))) : (a.sortIndex = e, f(t, a), A || z || (A = true, I(J)));
      return a;
    };
    exports.unstable_shouldYield = M;
    exports.unstable_wrapCallback = function(a) {
      var b = y;
      return function() {
        var c = y;
        y = b;
        try {
          return a.apply(this, arguments);
        } finally {
          y = c;
        }
      };
    };
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first = heap[0];
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        }
        function siftUp(heap, node, i) {
          var index = i;
          while (index > 0) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i) {
          var index = i;
          var length = heap.length;
          var halfLength = length >>> 1;
          while (index < halfLength) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (compare(left, node) < 0) {
              if (rightIndex < length && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (rightIndex < length && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        exports.unstable_now = void 0;
        var hasPerformanceNow = (
          // $FlowFixMe[method-unbinding]
          typeof performance === "object" && typeof performance.now === "function"
        );
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        typeof navigator !== "undefined" && // $FlowFixMe[prop-missing]
        navigator.scheduling !== void 0 && // $FlowFixMe[incompatible-type]
        navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            var currentTime;
            if (enableProfiling)
              ;
            else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
                advanceTimers(currentTime);
                return true;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
                advanceTimers(currentTime);
              }
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_forceFrameRate = forceFrameRate;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_scheduler_production_min();
    } else {
      module2.exports = require_scheduler_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom.production.min.js
var require_react_dom_production_min = __commonJS({
  "node_modules/react-dom/cjs/react-dom.production.min.js"(exports) {
    "use strict";
    var aa = require_react();
    var ba = require_scheduler();
    var ca = { usingClientEntryPoint: false, Events: null, Dispatcher: { current: null } };
    function u(a) {
      for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)
        b += "&args[]=" + encodeURIComponent(arguments[c]);
      return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var C = Object.assign;
    var da = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var fa = da.ReactCurrentDispatcher;
    var ha = { pending: false, data: null, method: null, action: null };
    var ia = [];
    var ja = -1;
    function ka(a) {
      return { current: a };
    }
    function D(a) {
      0 > ja || (a.current = ia[ja], ia[ja] = null, ja--);
    }
    function E(a, b) {
      ja++;
      ia[ja] = a.current;
      a.current = b;
    }
    var la = Symbol.for("react.element");
    var ma = Symbol.for("react.portal");
    var na = Symbol.for("react.fragment");
    var oa = Symbol.for("react.strict_mode");
    var pa = Symbol.for("react.profiler");
    var qa = Symbol.for("react.provider");
    var ra = Symbol.for("react.context");
    var sa = Symbol.for("react.server_context");
    var ta = Symbol.for("react.forward_ref");
    var ua = Symbol.for("react.suspense");
    var va = Symbol.for("react.suspense_list");
    var wa = Symbol.for("react.memo");
    var xa = Symbol.for("react.lazy");
    var ya = Symbol.for("react.scope");
    Symbol.for("react.debug_trace_mode");
    var za = Symbol.for("react.offscreen");
    var Aa = Symbol.for("react.legacy_hidden");
    var Ba = Symbol.for("react.cache");
    Symbol.for("react.tracing_marker");
    var Ca = Symbol.for("react.default_value");
    var Da = Symbol.for("react.memo_cache_sentinel");
    var Ea = Symbol.iterator;
    function Fa(a) {
      if (null === a || "object" !== typeof a)
        return null;
      a = Ea && a[Ea] || a["@@iterator"];
      return "function" === typeof a ? a : null;
    }
    var Ga = ka(null);
    var Ha = ka(null);
    var Ia = ka(null);
    var Ja = ka(null);
    var Ka = { $$typeof: ra, _currentValue: null, _currentValue2: null, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
    function La(a, b) {
      E(Ia, b);
      E(Ha, a);
      E(Ga, null);
      a = b.nodeType;
      switch (a) {
        case 9:
        case 11:
          b = (b = b.documentElement) ? (b = b.namespaceURI) ? Ma(b) : 0 : 0;
          break;
        default:
          if (a = 8 === a ? b.parentNode : b, b = a.tagName, a = a.namespaceURI)
            a = Ma(a), b = Na(a, b);
          else
            switch (b) {
              case "svg":
                b = 1;
                break;
              case "math":
                b = 2;
                break;
              default:
                b = 0;
            }
      }
      D(Ga);
      E(Ga, b);
    }
    function Oa() {
      D(Ga);
      D(Ha);
      D(Ia);
    }
    function Pa(a) {
      null !== a.memoizedState && E(Ja, a);
      var b = Ga.current;
      var c = Na(b, a.type);
      b !== c && (E(Ha, a), E(Ga, c));
    }
    function Qa(a) {
      Ha.current === a && (D(Ga), D(Ha));
      Ja.current === a && (D(Ja), Ka._currentValue = null);
    }
    var Ra = ba.unstable_scheduleCallback;
    var Sa = ba.unstable_cancelCallback;
    var Ta = ba.unstable_shouldYield;
    var Ua = ba.unstable_requestPaint;
    var Va = ba.unstable_now;
    var Wa = ba.unstable_getCurrentPriorityLevel;
    var Xa = ba.unstable_ImmediatePriority;
    var Ya = ba.unstable_UserBlockingPriority;
    var Za = ba.unstable_NormalPriority;
    var $a = ba.unstable_LowPriority;
    var ab = ba.unstable_IdlePriority;
    var bb = null;
    var cb = null;
    function db(a) {
      if (cb && "function" === typeof cb.onCommitFiberRoot)
        try {
          cb.onCommitFiberRoot(bb, a, void 0, 128 === (a.current.flags & 128));
        } catch (b) {
        }
    }
    var fb = Math.clz32 ? Math.clz32 : eb;
    var gb = Math.log;
    var hb = Math.LN2;
    function eb(a) {
      a >>>= 0;
      return 0 === a ? 32 : 31 - (gb(a) / hb | 0) | 0;
    }
    var ib = 128;
    var jb = 8388608;
    function kb(a) {
      var b = a & 42;
      if (0 !== b)
        return b;
      switch (a & -a) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
          return 64;
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
        case 4194304:
          return a & 8388480;
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return a & 125829120;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 1073741824;
        default:
          return a;
      }
    }
    function lb(a, b) {
      var c = a.pendingLanes;
      if (0 === c)
        return 0;
      var d = 0, e = a.suspendedLanes, f = a.pingedLanes, g = c & 268435455;
      if (0 !== g) {
        var h = g & ~e;
        0 !== h ? d = kb(h) : (f &= g, 0 !== f && (d = kb(f)));
      } else
        g = c & ~e, 0 !== g ? d = kb(g) : 0 !== f && (d = kb(f));
      if (0 === d)
        return 0;
      if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f = b & -b, e >= f || 32 === e && 0 !== (f & 8388480)))
        return b;
      0 !== (d & 8) && (d |= c & 32);
      b = a.entangledLanes;
      if (0 !== b)
        for (a = a.entanglements, b &= d; 0 < b; )
          c = 31 - fb(b), e = 1 << c, d |= a[c], b &= ~e;
      return d;
    }
    function mb(a, b) {
      switch (a) {
        case 1:
        case 2:
        case 4:
        case 8:
          return b + 250;
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
        case 4194304:
          return b + 5e3;
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return -1;
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return -1;
      }
    }
    function nb(a, b) {
      if (a.errorRecoveryDisabledLanes & b)
        return 0;
      a = a.pendingLanes & -1073741825;
      return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
    }
    function ob() {
      var a = ib;
      ib <<= 1;
      0 === (ib & 8388480) && (ib = 128);
      return a;
    }
    function pb() {
      var a = jb;
      jb <<= 1;
      0 === (jb & 125829120) && (jb = 8388608);
      return a;
    }
    function qb(a) {
      for (var b = [], c = 0; 31 > c; c++)
        b.push(a);
      return b;
    }
    function rb(a, b) {
      var c = a.pendingLanes & ~b;
      a.pendingLanes = b;
      a.suspendedLanes = 0;
      a.pingedLanes = 0;
      a.expiredLanes &= b;
      a.entangledLanes &= b;
      a.errorRecoveryDisabledLanes &= b;
      b = a.entanglements;
      var d = a.expirationTimes;
      for (a = a.hiddenUpdates; 0 < c; ) {
        var e = 31 - fb(c), f = 1 << e;
        b[e] = 0;
        d[e] = -1;
        var g = a[e];
        if (null !== g)
          for (a[e] = null, e = 0; e < g.length; e++) {
            var h = g[e];
            null !== h && (h.lane &= -1073741825);
          }
        c &= ~f;
      }
    }
    function sb(a, b) {
      var c = a.entangledLanes |= b;
      for (a = a.entanglements; c; ) {
        var d = 31 - fb(c), e = 1 << d;
        e & b | a[d] & b && (a[d] |= b);
        c &= ~e;
      }
    }
    var F = 0;
    function tb(a, b) {
      var c = F;
      try {
        return F = a, b();
      } finally {
        F = c;
      }
    }
    function ub(a) {
      a &= -a;
      return 2 < a ? 8 < a ? 0 !== (a & 268435455) ? 32 : 536870912 : 8 : 2;
    }
    var vb = Object.prototype.hasOwnProperty;
    var wb = Math.random().toString(36).slice(2);
    var xb = "__reactFiber$" + wb;
    var yb = "__reactProps$" + wb;
    var zb = "__reactContainer$" + wb;
    var Ab = "__reactEvents$" + wb;
    var Bb = "__reactListeners$" + wb;
    var Cb = "__reactHandles$" + wb;
    var Eb = "__reactResources$" + wb;
    var Fb = "__reactMarker$" + wb;
    function Gb(a) {
      delete a[xb];
      delete a[yb];
      delete a[Ab];
      delete a[Bb];
      delete a[Cb];
    }
    function Hb(a) {
      var b = a[xb];
      if (b)
        return b;
      for (var c = a.parentNode; c; ) {
        if (b = c[zb] || c[xb]) {
          c = b.alternate;
          if (null !== b.child || null !== c && null !== c.child)
            for (a = Ib(a); null !== a; ) {
              if (c = a[xb])
                return c;
              a = Ib(a);
            }
          return b;
        }
        a = c;
        c = a.parentNode;
      }
      return null;
    }
    function Jb(a) {
      if (a = a[xb] || a[zb]) {
        var b = a.tag;
        if (5 === b || 6 === b || 13 === b || 26 === b || 27 === b || 3 === b)
          return a;
      }
      return null;
    }
    function Kb(a) {
      var b = a.tag;
      if (5 === b || 26 === b || 27 === b || 6 === b)
        return a.stateNode;
      throw Error(u(33));
    }
    function Lb(a) {
      return a[yb] || null;
    }
    function Mb(a) {
      var b = a[Eb];
      b || (b = a[Eb] = { hoistableStyles: /* @__PURE__ */ new Map(), hoistableScripts: /* @__PURE__ */ new Map() });
      return b;
    }
    function Nb(a) {
      a[Fb] = true;
    }
    var Ob = /* @__PURE__ */ new Set();
    var Pb = {};
    function Qb(a, b) {
      Rb(a, b);
      Rb(a + "Capture", b);
    }
    function Rb(a, b) {
      Pb[a] = b;
      for (a = 0; a < b.length; a++)
        Ob.add(b[a]);
    }
    var Sb = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement);
    var Tb = RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$");
    var Ub = {};
    var Vb = {};
    function Wb(a) {
      if (vb.call(Vb, a))
        return true;
      if (vb.call(Ub, a))
        return false;
      if (Tb.test(a))
        return Vb[a] = true;
      Ub[a] = true;
      return false;
    }
    function Xb(a, b, c) {
      if (Wb(b))
        if (null === c)
          a.removeAttribute(b);
        else {
          switch (typeof c) {
            case "undefined":
            case "function":
            case "symbol":
              a.removeAttribute(b);
              return;
            case "boolean":
              var d = b.toLowerCase().slice(0, 5);
              if ("data-" !== d && "aria-" !== d) {
                a.removeAttribute(b);
                return;
              }
          }
          a.setAttribute(b, "" + c);
        }
    }
    function Yb(a, b, c) {
      if (null === c)
        a.removeAttribute(b);
      else {
        switch (typeof c) {
          case "undefined":
          case "function":
          case "symbol":
          case "boolean":
            a.removeAttribute(b);
            return;
        }
        a.setAttribute(b, "" + c);
      }
    }
    function Zb(a, b, c, d) {
      if (null === d)
        a.removeAttribute(c);
      else {
        switch (typeof d) {
          case "undefined":
          case "function":
          case "symbol":
          case "boolean":
            a.removeAttribute(c);
            return;
        }
        a.setAttributeNS(b, c, "" + d);
      }
    }
    var $b;
    function ac(a) {
      if (void 0 === $b)
        try {
          throw Error();
        } catch (c) {
          var b = c.stack.trim().match(/\n( *(at )?)/);
          $b = b && b[1] || "";
        }
      return "\n" + $b + a;
    }
    var bc = false;
    function cc(a, b) {
      if (!a || bc)
        return "";
      bc = true;
      var c = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        if (b)
          if (b = function() {
            throw Error();
          }, Object.defineProperty(b.prototype, "props", { set: function() {
            throw Error();
          } }), "object" === typeof Reflect && Reflect.construct) {
            try {
              Reflect.construct(b, []);
            } catch (p) {
              var d = p;
            }
            Reflect.construct(a, [], b);
          } else {
            try {
              b.call();
            } catch (p) {
              d = p;
            }
            a.call(b.prototype);
          }
        else {
          try {
            throw Error();
          } catch (p) {
            d = p;
          }
          a();
        }
      } catch (p) {
        if (p && d && "string" === typeof p.stack) {
          for (var e = p.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h]; )
            h--;
          for (; 1 <= g && 0 <= h; g--, h--)
            if (e[g] !== f[h]) {
              if (1 !== g || 1 !== h) {
                do
                  if (g--, h--, 0 > h || e[g] !== f[h]) {
                    var k = "\n" + e[g].replace(" at new ", " at ");
                    a.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a.displayName));
                    return k;
                  }
                while (1 <= g && 0 <= h);
              }
              break;
            }
        }
      } finally {
        bc = false, Error.prepareStackTrace = c;
      }
      return (a = a ? a.displayName || a.name : "") ? ac(a) : "";
    }
    function dc(a) {
      switch (a.tag) {
        case 26:
        case 27:
        case 5:
          return ac(a.type);
        case 16:
          return ac("Lazy");
        case 13:
          return ac("Suspense");
        case 19:
          return ac("SuspenseList");
        case 0:
        case 2:
        case 15:
          return a = cc(a.type, false), a;
        case 11:
          return a = cc(a.type.render, false), a;
        case 1:
          return a = cc(a.type, true), a;
        default:
          return "";
      }
    }
    function ec(a) {
      if (null == a)
        return null;
      if ("function" === typeof a)
        return a.displayName || a.name || null;
      if ("string" === typeof a)
        return a;
      switch (a) {
        case na:
          return "Fragment";
        case ma:
          return "Portal";
        case pa:
          return "Profiler";
        case oa:
          return "StrictMode";
        case ua:
          return "Suspense";
        case va:
          return "SuspenseList";
        case Ba:
          return "Cache";
      }
      if ("object" === typeof a)
        switch (a.$$typeof) {
          case ra:
            return (a.displayName || "Context") + ".Consumer";
          case qa:
            return (a._context.displayName || "Context") + ".Provider";
          case ta:
            var b = a.render;
            a = a.displayName;
            a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
            return a;
          case wa:
            return b = a.displayName || null, null !== b ? b : ec(a.type) || "Memo";
          case xa:
            b = a._payload;
            a = a._init;
            try {
              return ec(a(b));
            } catch (c) {
              break;
            }
          case sa:
            return (a.displayName || a._globalName) + ".Provider";
        }
      return null;
    }
    function fc(a) {
      var b = a.type;
      switch (a.tag) {
        case 24:
          return "Cache";
        case 9:
          return (b.displayName || "Context") + ".Consumer";
        case 10:
          return (b._context.displayName || "Context") + ".Provider";
        case 18:
          return "DehydratedFragment";
        case 11:
          return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
        case 7:
          return "Fragment";
        case 26:
        case 27:
        case 5:
          return b;
        case 4:
          return "Portal";
        case 3:
          return "Root";
        case 6:
          return "Text";
        case 16:
          return ec(b);
        case 8:
          return b === oa ? "StrictMode" : "Mode";
        case 22:
          return "Offscreen";
        case 12:
          return "Profiler";
        case 21:
          return "Scope";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 25:
          return "TracingMarker";
        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
          if ("function" === typeof b)
            return b.displayName || b.name || null;
          if ("string" === typeof b)
            return b;
      }
      return null;
    }
    function gc(a) {
      switch (typeof a) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return a;
        case "object":
          return a;
        default:
          return "";
      }
    }
    function hc(a) {
      var b = a.type;
      return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
    }
    function ic(a) {
      var b = hc(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d = "" + a[b];
      if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
        var e = c.get, f = c.set;
        Object.defineProperty(a, b, { configurable: true, get: function() {
          return e.call(this);
        }, set: function(g) {
          d = "" + g;
          f.call(this, g);
        } });
        Object.defineProperty(a, b, { enumerable: c.enumerable });
        return { getValue: function() {
          return d;
        }, setValue: function(g) {
          d = "" + g;
        }, stopTracking: function() {
          a._valueTracker = null;
          delete a[b];
        } };
      }
    }
    function jc(a) {
      a._valueTracker || (a._valueTracker = ic(a));
    }
    function kc(a) {
      if (!a)
        return false;
      var b = a._valueTracker;
      if (!b)
        return true;
      var c = b.getValue();
      var d = "";
      a && (d = hc(a) ? a.checked ? "true" : "false" : a.value);
      a = d;
      return a !== c ? (b.setValue(a), true) : false;
    }
    function lc(a) {
      a = a || ("undefined" !== typeof document ? document : void 0);
      if ("undefined" === typeof a)
        return null;
      try {
        return a.activeElement || a.body;
      } catch (b) {
        return a.body;
      }
    }
    var mc = /[\n"\\]/g;
    function nc(a) {
      return a.replace(mc, function(b) {
        return "\\" + b.charCodeAt(0).toString(16) + " ";
      });
    }
    function oc(a, b, c, d, e, f, g, h) {
      a.name = "";
      null != g && "function" !== typeof g && "symbol" !== typeof g && "boolean" !== typeof g ? a.type = g : a.removeAttribute("type");
      if (null != b)
        if ("number" === g) {
          if (0 === b && "" === a.value || a.value != b)
            a.value = "" + gc(b);
        } else
          a.value !== "" + gc(b) && (a.value = "" + gc(b));
      else
        "submit" !== g && "reset" !== g || a.removeAttribute("value");
      null != b ? pc(a, g, gc(b)) : null != c ? pc(a, g, gc(c)) : null != d && a.removeAttribute("value");
      null == e && null != f && (a.defaultChecked = !!f);
      null != e && a.checked !== !!e && (a.checked = e);
      null != h && "function" !== typeof h && "symbol" !== typeof h && "boolean" !== typeof h ? a.name = "" + gc(h) : a.removeAttribute("name");
    }
    function qc(a, b, c, d, e, f, g, h) {
      null != f && "function" !== typeof f && "symbol" !== typeof f && "boolean" !== typeof f && (a.type = f);
      if (null != b || null != c) {
        if (!("submit" !== f && "reset" !== f || void 0 !== b && null !== b))
          return;
        c = null != c ? "" + gc(c) : "";
        b = null != b ? "" + gc(b) : c;
        h || b === a.value || (a.value = b);
        a.defaultValue = b;
      }
      d = null != d ? d : e;
      d = "function" !== typeof d && "symbol" !== typeof d && !!d;
      h || (a.checked = !!d);
      a.defaultChecked = !!d;
      null != g && "function" !== typeof g && "symbol" !== typeof g && "boolean" !== typeof g && (a.name = g);
    }
    function pc(a, b, c) {
      "number" === b && lc(a.ownerDocument) === a || a.defaultValue === "" + c || (a.defaultValue = "" + c);
    }
    var rc = Array.isArray;
    function sc(a, b, c, d) {
      a = a.options;
      if (b) {
        b = {};
        for (var e = 0; e < c.length; e++)
          b["$" + c[e]] = true;
        for (c = 0; c < a.length; c++)
          e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = true);
      } else {
        c = "" + gc(c);
        b = null;
        for (e = 0; e < a.length; e++) {
          if (a[e].value === c) {
            a[e].selected = true;
            d && (a[e].defaultSelected = true);
            return;
          }
          null !== b || a[e].disabled || (b = a[e]);
        }
        null !== b && (b.selected = true);
      }
    }
    function tc(a, b, c) {
      if (null != b && (b = "" + gc(b), b !== a.value && (a.value = b), null == c)) {
        a.defaultValue !== b && (a.defaultValue = b);
        return;
      }
      a.defaultValue = null != c ? "" + gc(c) : "";
    }
    function uc(a, b, c, d) {
      if (null == b) {
        if (null != d) {
          if (null != c)
            throw Error(u(92));
          if (rc(d)) {
            if (1 < d.length)
              throw Error(u(93));
            d = d[0];
          }
          c = d;
        }
        null == c && (c = "");
        b = c;
      }
      c = gc(b);
      a.defaultValue = c;
      d = a.textContent;
      d === c && "" !== d && null !== d && (a.value = d);
    }
    function vc(a, b) {
      if (b) {
        var c = a.firstChild;
        if (c && c === a.lastChild && 3 === c.nodeType) {
          c.nodeValue = b;
          return;
        }
      }
      a.textContent = b;
    }
    var wc = new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));
    function xc(a, b, c) {
      var d = 0 === b.indexOf("--");
      null == c || "boolean" === typeof c || "" === c ? d ? a.setProperty(b, "") : "float" === b ? a.cssFloat = "" : a[b] = "" : d ? a.setProperty(b, c) : "number" !== typeof c || 0 === c || wc.has(b) ? "float" === b ? a.cssFloat = c : a[b] = ("" + c).trim() : a[b] = c + "px";
    }
    function yc(a, b, c) {
      if (null != b && "object" !== typeof b)
        throw Error(u(62));
      a = a.style;
      if (null != c) {
        for (var d in c)
          !c.hasOwnProperty(d) || null != b && b.hasOwnProperty(d) || (0 === d.indexOf("--") ? a.setProperty(d, "") : "float" === d ? a.cssFloat = "" : a[d] = "");
        for (var e in b)
          d = b[e], b.hasOwnProperty(e) && c[e] !== d && xc(a, e, d);
      } else
        for (var f in b)
          b.hasOwnProperty(f) && xc(a, f, b[f]);
    }
    function zc(a) {
      if (-1 === a.indexOf("-"))
        return false;
      switch (a) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var Ac = /* @__PURE__ */ new Map([
      ["acceptCharset", "accept-charset"],
      ["htmlFor", "for"],
      ["httpEquiv", "http-equiv"],
      ["crossOrigin", "crossorigin"],
      ["accentHeight", "accent-height"],
      ["alignmentBaseline", "alignment-baseline"],
      ["arabicForm", "arabic-form"],
      ["baselineShift", "baseline-shift"],
      ["capHeight", "cap-height"],
      ["clipPath", "clip-path"],
      ["clipRule", "clip-rule"],
      ["colorInterpolation", "color-interpolation"],
      ["colorInterpolationFilters", "color-interpolation-filters"],
      ["colorProfile", "color-profile"],
      ["colorRendering", "color-rendering"],
      ["dominantBaseline", "dominant-baseline"],
      ["enableBackground", "enable-background"],
      ["fillOpacity", "fill-opacity"],
      ["fillRule", "fill-rule"],
      ["floodColor", "flood-color"],
      ["floodOpacity", "flood-opacity"],
      ["fontFamily", "font-family"],
      ["fontSize", "font-size"],
      ["fontSizeAdjust", "font-size-adjust"],
      ["fontStretch", "font-stretch"],
      ["fontStyle", "font-style"],
      ["fontVariant", "font-variant"],
      ["fontWeight", "font-weight"],
      ["glyphName", "glyph-name"],
      ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
      [
        "glyphOrientationVertical",
        "glyph-orientation-vertical"
      ],
      ["horizAdvX", "horiz-adv-x"],
      ["horizOriginX", "horiz-origin-x"],
      ["imageRendering", "image-rendering"],
      ["letterSpacing", "letter-spacing"],
      ["lightingColor", "lighting-color"],
      ["markerEnd", "marker-end"],
      ["markerMid", "marker-mid"],
      ["markerStart", "marker-start"],
      ["overlinePosition", "overline-position"],
      ["overlineThickness", "overline-thickness"],
      ["paintOrder", "paint-order"],
      ["panose-1", "panose-1"],
      ["pointerEvents", "pointer-events"],
      ["renderingIntent", "rendering-intent"],
      [
        "shapeRendering",
        "shape-rendering"
      ],
      ["stopColor", "stop-color"],
      ["stopOpacity", "stop-opacity"],
      ["strikethroughPosition", "strikethrough-position"],
      ["strikethroughThickness", "strikethrough-thickness"],
      ["strokeDasharray", "stroke-dasharray"],
      ["strokeDashoffset", "stroke-dashoffset"],
      ["strokeLinecap", "stroke-linecap"],
      ["strokeLinejoin", "stroke-linejoin"],
      ["strokeMiterlimit", "stroke-miterlimit"],
      ["strokeOpacity", "stroke-opacity"],
      ["strokeWidth", "stroke-width"],
      ["textAnchor", "text-anchor"],
      ["textDecoration", "text-decoration"],
      ["textRendering", "text-rendering"],
      ["transformOrigin", "transform-origin"],
      ["underlinePosition", "underline-position"],
      ["underlineThickness", "underline-thickness"],
      ["unicodeBidi", "unicode-bidi"],
      ["unicodeRange", "unicode-range"],
      ["unitsPerEm", "units-per-em"],
      ["vAlphabetic", "v-alphabetic"],
      ["vHanging", "v-hanging"],
      ["vIdeographic", "v-ideographic"],
      ["vMathematical", "v-mathematical"],
      ["vectorEffect", "vector-effect"],
      ["vertAdvY", "vert-adv-y"],
      ["vertOriginX", "vert-origin-x"],
      ["vertOriginY", "vert-origin-y"],
      ["wordSpacing", "word-spacing"],
      ["writingMode", "writing-mode"],
      ["xmlnsXlink", "xmlns:xlink"],
      ["xHeight", "x-height"]
    ]);
    var Bc = null;
    function Cc(a) {
      a = a.target || a.srcElement || window;
      a.correspondingUseElement && (a = a.correspondingUseElement);
      return 3 === a.nodeType ? a.parentNode : a;
    }
    var Dc = null;
    var Ec = null;
    function Fc(a) {
      var b = Jb(a);
      if (b && (a = b.stateNode)) {
        var c = Lb(a);
        a:
          switch (a = b.stateNode, b.type) {
            case "input":
              oc(a, c.value, c.defaultValue, c.defaultValue, c.checked, c.defaultChecked, c.type, c.name);
              b = c.name;
              if ("radio" === c.type && null != b) {
                for (c = a; c.parentNode; )
                  c = c.parentNode;
                c = c.querySelectorAll('input[name="' + nc("" + b) + '"][type="radio"]');
                for (b = 0; b < c.length; b++) {
                  var d = c[b];
                  if (d !== a && d.form === a.form) {
                    var e = Lb(d);
                    if (!e)
                      throw Error(u(90));
                    kc(d);
                    oc(
                      d,
                      e.value,
                      e.defaultValue,
                      e.defaultValue,
                      e.checked,
                      e.defaultChecked,
                      e.type,
                      e.name
                    );
                  }
                }
              }
              break a;
            case "textarea":
              tc(a, c.value, c.defaultValue);
              break a;
            case "select":
              b = c.value, null != b && sc(a, !!c.multiple, b, false);
          }
      }
    }
    function Gc(a) {
      Dc ? Ec ? Ec.push(a) : Ec = [a] : Dc = a;
    }
    function Hc() {
      if (Dc) {
        var a = Dc, b = Ec;
        Ec = Dc = null;
        Fc(a);
        if (b)
          for (a = 0; a < b.length; a++)
            Fc(b[a]);
      }
    }
    function Ic(a) {
      var b = a, c = a;
      if (a.alternate)
        for (; b.return; )
          b = b.return;
      else {
        a = b;
        do
          b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return;
        while (a);
      }
      return 3 === b.tag ? c : null;
    }
    function Jc(a) {
      if (13 === a.tag) {
        var b = a.memoizedState;
        null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
        if (null !== b)
          return b.dehydrated;
      }
      return null;
    }
    function Kc(a) {
      if (Ic(a) !== a)
        throw Error(u(188));
    }
    function Lc(a) {
      var b = a.alternate;
      if (!b) {
        b = Ic(a);
        if (null === b)
          throw Error(u(188));
        return b !== a ? null : a;
      }
      for (var c = a, d = b; ; ) {
        var e = c.return;
        if (null === e)
          break;
        var f = e.alternate;
        if (null === f) {
          d = e.return;
          if (null !== d) {
            c = d;
            continue;
          }
          break;
        }
        if (e.child === f.child) {
          for (f = e.child; f; ) {
            if (f === c)
              return Kc(e), a;
            if (f === d)
              return Kc(e), b;
            f = f.sibling;
          }
          throw Error(u(188));
        }
        if (c.return !== d.return)
          c = e, d = f;
        else {
          for (var g = false, h = e.child; h; ) {
            if (h === c) {
              g = true;
              c = e;
              d = f;
              break;
            }
            if (h === d) {
              g = true;
              d = e;
              c = f;
              break;
            }
            h = h.sibling;
          }
          if (!g) {
            for (h = f.child; h; ) {
              if (h === c) {
                g = true;
                c = f;
                d = e;
                break;
              }
              if (h === d) {
                g = true;
                d = f;
                c = e;
                break;
              }
              h = h.sibling;
            }
            if (!g)
              throw Error(u(189));
          }
        }
        if (c.alternate !== d)
          throw Error(u(190));
      }
      if (3 !== c.tag)
        throw Error(u(188));
      return c.stateNode.current === c ? a : b;
    }
    function Mc(a) {
      a = Lc(a);
      return null !== a ? Nc(a) : null;
    }
    function Nc(a) {
      var b = a.tag;
      if (5 === b || 26 === b || 27 === b || 6 === b)
        return a;
      for (a = a.child; null !== a; ) {
        b = Nc(a);
        if (null !== b)
          return b;
        a = a.sibling;
      }
      return null;
    }
    var Oc = {};
    var Pc = ka(Oc);
    var Qc = ka(false);
    var Rc = Oc;
    function Sc(a, b) {
      var c = a.type.contextTypes;
      if (!c)
        return Oc;
      var d = a.stateNode;
      if (d && d.__reactInternalMemoizedUnmaskedChildContext === b)
        return d.__reactInternalMemoizedMaskedChildContext;
      var e = {}, f;
      for (f in c)
        e[f] = b[f];
      d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
      return e;
    }
    function Tc(a) {
      a = a.childContextTypes;
      return null !== a && void 0 !== a;
    }
    function Uc() {
      D(Qc);
      D(Pc);
    }
    function Vc(a, b, c) {
      if (Pc.current !== Oc)
        throw Error(u(168));
      E(Pc, b);
      E(Qc, c);
    }
    function Wc(a, b, c) {
      var d = a.stateNode;
      b = b.childContextTypes;
      if ("function" !== typeof d.getChildContext)
        return c;
      d = d.getChildContext();
      for (var e in d)
        if (!(e in b))
          throw Error(u(108, fc(a) || "Unknown", e));
      return C({}, c, d);
    }
    function Xc(a) {
      a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Oc;
      Rc = Pc.current;
      E(Pc, a);
      E(Qc, Qc.current);
      return true;
    }
    function Yc(a, b, c) {
      var d = a.stateNode;
      if (!d)
        throw Error(u(169));
      c ? (a = Wc(a, b, Rc), d.__reactInternalMemoizedMergedChildContext = a, D(Qc), D(Pc), E(Pc, a)) : D(Qc);
      E(Qc, c);
    }
    function Zc(a, b) {
      return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
    }
    var $c = "function" === typeof Object.is ? Object.is : Zc;
    var ad = [];
    var bd = 0;
    var cd = null;
    var dd = 0;
    var ed = [];
    var fd = 0;
    var gd = null;
    var hd = 1;
    var id = "";
    function jd(a, b) {
      ad[bd++] = dd;
      ad[bd++] = cd;
      cd = a;
      dd = b;
    }
    function kd(a, b, c) {
      ed[fd++] = hd;
      ed[fd++] = id;
      ed[fd++] = gd;
      gd = a;
      var d = hd;
      a = id;
      var e = 32 - fb(d) - 1;
      d &= ~(1 << e);
      c += 1;
      var f = 32 - fb(b) + e;
      if (30 < f) {
        var g = e - e % 5;
        f = (d & (1 << g) - 1).toString(32);
        d >>= g;
        e -= g;
        hd = 1 << 32 - fb(b) + e | c << e | d;
        id = f + a;
      } else
        hd = 1 << f | c << e | d, id = a;
    }
    function ld(a) {
      null !== a.return && (jd(a, 1), kd(a, 1, 0));
    }
    function md(a) {
      for (; a === cd; )
        cd = ad[--bd], ad[bd] = null, dd = ad[--bd], ad[bd] = null;
      for (; a === gd; )
        gd = ed[--fd], ed[fd] = null, id = ed[--fd], ed[fd] = null, hd = ed[--fd], ed[fd] = null;
    }
    var I = null;
    var J = null;
    var K = false;
    var nd = null;
    var od = false;
    function pd(a, b) {
      var c = qd(5, null, null, 0);
      c.elementType = "DELETED";
      c.stateNode = b;
      c.return = a;
      b = a.deletions;
      null === b ? (a.deletions = [c], a.flags |= 16) : b.push(c);
    }
    function rd(a, b) {
      b.flags = b.flags & -4097 | 2;
    }
    function sd(a, b) {
      b = td(b, a.type, a.pendingProps, od);
      return null !== b ? (a.stateNode = b, I = a, J = ud(b.firstChild), od = false, true) : false;
    }
    function vd(a, b) {
      b = wd(b, a.pendingProps, od);
      return null !== b ? (a.stateNode = b, I = a, J = null, true) : false;
    }
    function xd(a, b) {
      a: {
        var c = b;
        for (b = od; 8 !== c.nodeType; ) {
          if (!b) {
            b = null;
            break a;
          }
          c = ud(c.nextSibling);
          if (null === c) {
            b = null;
            break a;
          }
        }
        b = c;
      }
      return null !== b ? (c = null !== gd ? { id: hd, overflow: id } : null, a.memoizedState = { dehydrated: b, treeContext: c, retryLane: 1073741824 }, c = qd(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, I = a, J = null, true) : false;
    }
    function yd(a) {
      return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
    }
    function zd() {
      throw Error(u(418));
    }
    function Ad(a) {
      var b = a.stateNode, c = a.type, d = a.memoizedProps;
      b[xb] = a;
      b[yb] = d;
      a = 0 !== (a.mode & 1);
      switch (c) {
        case "dialog":
          L("cancel", b);
          L("close", b);
          break;
        case "iframe":
        case "object":
        case "embed":
          L("load", b);
          break;
        case "video":
        case "audio":
          for (var e = 0; e < Bd.length; e++)
            L(Bd[e], b);
          break;
        case "source":
          L("error", b);
          break;
        case "img":
        case "image":
        case "link":
          L("error", b);
          L("load", b);
          break;
        case "details":
          L("toggle", b);
          break;
        case "input":
          L("invalid", b);
          qc(
            b,
            d.value,
            d.defaultValue,
            d.checked,
            d.defaultChecked,
            d.type,
            d.name,
            true
          );
          jc(b);
          break;
        case "select":
          L("invalid", b);
          break;
        case "textarea":
          L("invalid", b), uc(b, d.value, d.defaultValue, d.children), jc(b);
      }
      e = d.children;
      "string" !== typeof e && "number" !== typeof e || b.textContent === "" + e || (true !== d.suppressHydrationWarning && Cd(b.textContent, e, a), a || "body" === c || (b.textContent = e));
      null != d.onScroll && L("scroll", b);
      null != d.onClick && (b.onclick = Dd);
      return false;
    }
    function Ed(a) {
      for (I = a.return; I; )
        switch (I.tag) {
          case 3:
          case 27:
            od = true;
            return;
          case 5:
          case 13:
            od = false;
            return;
          default:
            I = I.return;
        }
    }
    function Fd(a) {
      if (a !== I)
        return false;
      if (!K)
        return Ed(a), K = true, false;
      var b = false, c;
      if (c = 3 !== a.tag && 27 !== a.tag) {
        if (c = 5 === a.tag)
          c = a.type, c = !("form" !== c && "button" !== c) || Gd(a.type, a.memoizedProps);
        c = !c;
      }
      c && (b = true);
      if (b && (b = J))
        if (yd(a))
          Hd(), zd();
        else
          for (; b; )
            pd(a, b), b = ud(b.nextSibling);
      Ed(a);
      if (13 === a.tag) {
        a = a.memoizedState;
        a = null !== a ? a.dehydrated : null;
        if (!a)
          throw Error(u(317));
        a: {
          a = a.nextSibling;
          for (b = 0; a; ) {
            if (8 === a.nodeType)
              if (c = a.data, "/$" === c) {
                if (0 === b) {
                  J = ud(a.nextSibling);
                  break a;
                }
                b--;
              } else
                "$" !== c && "$!" !== c && "$?" !== c || b++;
            a = a.nextSibling;
          }
          J = null;
        }
      } else
        J = I ? ud(a.stateNode.nextSibling) : null;
      return true;
    }
    function Hd() {
      for (var a = J; a; )
        a = ud(a.nextSibling);
    }
    function Id() {
      J = I = null;
      K = false;
    }
    function Jd(a) {
      null === nd ? nd = [a] : nd.push(a);
    }
    var Kd = [];
    var Ld = 0;
    var Md = 0;
    function Nd() {
      for (var a = Ld, b = Md = Ld = 0; b < a; ) {
        var c = Kd[b];
        Kd[b++] = null;
        var d = Kd[b];
        Kd[b++] = null;
        var e = Kd[b];
        Kd[b++] = null;
        var f = Kd[b];
        Kd[b++] = null;
        if (null !== d && null !== e) {
          var g = d.pending;
          null === g ? e.next = e : (e.next = g.next, g.next = e);
          d.pending = e;
        }
        0 !== f && Od(c, e, f);
      }
    }
    function Pd(a, b, c, d) {
      Kd[Ld++] = a;
      Kd[Ld++] = b;
      Kd[Ld++] = c;
      Kd[Ld++] = d;
      Md |= d;
      a.lanes |= d;
      a = a.alternate;
      null !== a && (a.lanes |= d);
    }
    function Qd(a, b, c, d) {
      Pd(a, b, c, d);
      return Rd(a);
    }
    function Sd(a, b) {
      Pd(a, null, null, b);
      return Rd(a);
    }
    function Od(a, b, c) {
      a.lanes |= c;
      var d = a.alternate;
      null !== d && (d.lanes |= c);
      for (var e = false, f = a.return; null !== f; )
        f.childLanes |= c, d = f.alternate, null !== d && (d.childLanes |= c), 22 === f.tag && (a = f.stateNode, null === a || a._visibility & 1 || (e = true)), a = f, f = f.return;
      e && null !== b && 3 === a.tag && (f = a.stateNode, e = 31 - fb(c), f = f.hiddenUpdates, a = f[e], null === a ? f[e] = [b] : a.push(b), b.lane = c | 1073741824);
    }
    function Rd(a) {
      Td();
      for (var b = a.return; null !== b; )
        a = b, b = a.return;
      return 3 === a.tag ? a.stateNode : null;
    }
    var Ud = false;
    function Vd(a) {
      a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, lanes: 0, hiddenCallbacks: null }, callbacks: null };
    }
    function Wd(a, b) {
      a = a.updateQueue;
      b.updateQueue === a && (b.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, callbacks: null });
    }
    function Xd(a) {
      return { lane: a, tag: 0, payload: null, callback: null, next: null };
    }
    function Yd(a, b, c) {
      var d = a.updateQueue;
      if (null === d)
        return null;
      d = d.shared;
      if (0 !== (M & 2)) {
        var e = d.pending;
        null === e ? b.next = b : (b.next = e.next, e.next = b);
        d.pending = b;
        b = Rd(a);
        Od(a, null, c);
        return b;
      }
      Pd(a, d, b, c);
      return Rd(a);
    }
    function Zd(a, b, c) {
      b = b.updateQueue;
      if (null !== b && (b = b.shared, 0 !== (c & 8388480))) {
        var d = b.lanes;
        d &= a.pendingLanes;
        c |= d;
        b.lanes = c;
        sb(a, c);
      }
    }
    function $d(a, b) {
      var c = a.updateQueue, d = a.alternate;
      if (null !== d && (d = d.updateQueue, c === d)) {
        var e = null, f = null;
        c = c.firstBaseUpdate;
        if (null !== c) {
          do {
            var g = { lane: c.lane, tag: c.tag, payload: c.payload, callback: null, next: null };
            null === f ? e = f = g : f = f.next = g;
            c = c.next;
          } while (null !== c);
          null === f ? e = f = b : f = f.next = b;
        } else
          e = f = b;
        c = { baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f, shared: d.shared, callbacks: d.callbacks };
        a.updateQueue = c;
        return;
      }
      a = c.lastBaseUpdate;
      null === a ? c.firstBaseUpdate = b : a.next = b;
      c.lastBaseUpdate = b;
    }
    function ae(a, b, c, d) {
      var e = a.updateQueue;
      Ud = false;
      var f = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
      if (null !== h) {
        e.shared.pending = null;
        var k = h, p = k.next;
        k.next = null;
        null === g ? f = p : g.next = p;
        g = k;
        var r = a.alternate;
        null !== r && (r = r.updateQueue, h = r.lastBaseUpdate, h !== g && (null === h ? r.firstBaseUpdate = p : h.next = p, r.lastBaseUpdate = k));
      }
      if (null !== f) {
        var w = e.baseState;
        g = 0;
        r = p = k = null;
        h = f;
        do {
          var q = h.lane & -1073741825, t = q !== h.lane;
          if (t ? (N & q) === q : (d & q) === q) {
            null !== r && (r = r.next = {
              lane: 0,
              tag: h.tag,
              payload: h.payload,
              callback: null,
              next: null
            });
            a: {
              var y = a, B = h;
              q = b;
              var O = c;
              switch (B.tag) {
                case 1:
                  y = B.payload;
                  if ("function" === typeof y) {
                    w = y.call(O, w, q);
                    break a;
                  }
                  w = y;
                  break a;
                case 3:
                  y.flags = y.flags & -65537 | 128;
                case 0:
                  y = B.payload;
                  q = "function" === typeof y ? y.call(O, w, q) : y;
                  if (null === q || void 0 === q)
                    break a;
                  w = C({}, w, q);
                  break a;
                case 2:
                  Ud = true;
              }
            }
            q = h.callback;
            null !== q && (a.flags |= 64, t && (a.flags |= 8192), t = e.callbacks, null === t ? e.callbacks = [q] : t.push(q));
          } else
            t = { lane: q, tag: h.tag, payload: h.payload, callback: h.callback, next: null }, null === r ? (p = r = t, k = w) : r = r.next = t, g |= q;
          h = h.next;
          if (null === h)
            if (h = e.shared.pending, null === h)
              break;
            else
              t = h, h = t.next, t.next = null, e.lastBaseUpdate = t, e.shared.pending = null;
        } while (1);
        null === r && (k = w);
        e.baseState = k;
        e.firstBaseUpdate = p;
        e.lastBaseUpdate = r;
        null === f && (e.shared.lanes = 0);
        be |= g;
        a.lanes = g;
        a.memoizedState = w;
      }
    }
    function ce(a, b) {
      if ("function" !== typeof a)
        throw Error(u(191, a));
      a.call(b);
    }
    function de(a, b) {
      var c = a.callbacks;
      if (null !== c)
        for (a.callbacks = null, a = 0; a < c.length; a++)
          ce(c[a], b);
    }
    function ee(a, b) {
      if ($c(a, b))
        return true;
      if ("object" !== typeof a || null === a || "object" !== typeof b || null === b)
        return false;
      var c = Object.keys(a), d = Object.keys(b);
      if (c.length !== d.length)
        return false;
      for (d = 0; d < c.length; d++) {
        var e = c[d];
        if (!vb.call(b, e) || !$c(a[e], b[e]))
          return false;
      }
      return true;
    }
    var fe = Error(u(460));
    var ge = Error(u(474));
    var he = { then: function() {
    } };
    function ie(a) {
      a = a.status;
      return "fulfilled" === a || "rejected" === a;
    }
    function je() {
    }
    function ke(a, b, c) {
      c = a[c];
      void 0 === c ? a.push(b) : c !== b && (b.then(je, je), b = c);
      switch (b.status) {
        case "fulfilled":
          return b.value;
        case "rejected":
          throw b.reason;
        default:
          "string" === typeof b.status ? b.then(je, je) : (a = b, a.status = "pending", a.then(function(d) {
            if ("pending" === b.status) {
              var e = b;
              e.status = "fulfilled";
              e.value = d;
            }
          }, function(d) {
            if ("pending" === b.status) {
              var e = b;
              e.status = "rejected";
              e.reason = d;
            }
          }));
          switch (b.status) {
            case "fulfilled":
              return b.value;
            case "rejected":
              throw b.reason;
          }
          le = b;
          throw fe;
      }
    }
    var le = null;
    function me() {
      if (null === le)
        throw Error(u(459));
      var a = le;
      le = null;
      return a;
    }
    var ne = null;
    var oe = 0;
    function pe(a) {
      var b = oe;
      oe += 1;
      null === ne && (ne = []);
      return ke(ne, a, b);
    }
    function qe(a, b, c) {
      a = c.ref;
      if (null !== a && "function" !== typeof a && "object" !== typeof a) {
        if (c._owner) {
          c = c._owner;
          if (c) {
            if (1 !== c.tag)
              throw Error(u(309));
            var d = c.stateNode;
          }
          if (!d)
            throw Error(u(147, a));
          var e = d, f = "" + a;
          if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f)
            return b.ref;
          b = function(g) {
            var h = e.refs;
            null === g ? delete h[f] : h[f] = g;
          };
          b._stringRef = f;
          return b;
        }
        if ("string" !== typeof a)
          throw Error(u(284));
        if (!c._owner)
          throw Error(u(290, a));
      }
      return a;
    }
    function re(a, b) {
      a = Object.prototype.toString.call(b);
      throw Error(u(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
    }
    function se(a) {
      var b = a._init;
      return b(a._payload);
    }
    function te(a) {
      function b(m, l) {
        if (a) {
          var n = m.deletions;
          null === n ? (m.deletions = [l], m.flags |= 16) : n.push(l);
        }
      }
      function c(m, l) {
        if (!a)
          return null;
        for (; null !== l; )
          b(m, l), l = l.sibling;
        return null;
      }
      function d(m, l) {
        for (m = /* @__PURE__ */ new Map(); null !== l; )
          null !== l.key ? m.set(l.key, l) : m.set(l.index, l), l = l.sibling;
        return m;
      }
      function e(m, l) {
        m = ue(m, l);
        m.index = 0;
        m.sibling = null;
        return m;
      }
      function f(m, l, n) {
        m.index = n;
        if (!a)
          return m.flags |= 1048576, l;
        n = m.alternate;
        if (null !== n)
          return n = n.index, n < l ? (m.flags |= 33554434, l) : n;
        m.flags |= 33554434;
        return l;
      }
      function g(m) {
        a && null === m.alternate && (m.flags |= 33554434);
        return m;
      }
      function h(m, l, n, v) {
        if (null === l || 6 !== l.tag)
          return l = ve(n, m.mode, v), l.return = m, l;
        l = e(l, n);
        l.return = m;
        return l;
      }
      function k(m, l, n, v) {
        var x = n.type;
        if (x === na)
          return r(m, l, n.props.children, v, n.key);
        if (null !== l && (l.elementType === x || "object" === typeof x && null !== x && x.$$typeof === xa && se(x) === l.type))
          return v = e(l, n.props), v.ref = qe(m, l, n), v.return = m, v;
        v = we(n.type, n.key, n.props, null, m.mode, v);
        v.ref = qe(m, l, n);
        v.return = m;
        return v;
      }
      function p(m, l, n, v) {
        if (null === l || 4 !== l.tag || l.stateNode.containerInfo !== n.containerInfo || l.stateNode.implementation !== n.implementation)
          return l = xe(n, m.mode, v), l.return = m, l;
        l = e(l, n.children || []);
        l.return = m;
        return l;
      }
      function r(m, l, n, v, x) {
        if (null === l || 7 !== l.tag)
          return l = ye(n, m.mode, v, x), l.return = m, l;
        l = e(l, n);
        l.return = m;
        return l;
      }
      function w(m, l, n) {
        if ("string" === typeof l && "" !== l || "number" === typeof l)
          return l = ve("" + l, m.mode, n), l.return = m, l;
        if ("object" === typeof l && null !== l) {
          switch (l.$$typeof) {
            case la:
              return n = we(
                l.type,
                l.key,
                l.props,
                null,
                m.mode,
                n
              ), n.ref = qe(m, null, l), n.return = m, n;
            case ma:
              return l = xe(l, m.mode, n), l.return = m, l;
            case xa:
              var v = l._init;
              return w(m, v(l._payload), n);
          }
          if (rc(l) || Fa(l))
            return l = ye(l, m.mode, n, null), l.return = m, l;
          if ("function" === typeof l.then)
            return w(m, pe(l), n);
          if (l.$$typeof === ra || l.$$typeof === sa)
            return w(m, ze(m, l, n), n);
          re(m, l);
        }
        return null;
      }
      function q(m, l, n, v) {
        var x = null !== l ? l.key : null;
        if ("string" === typeof n && "" !== n || "number" === typeof n)
          return null !== x ? null : h(m, l, "" + n, v);
        if ("object" === typeof n && null !== n) {
          switch (n.$$typeof) {
            case la:
              return n.key === x ? k(m, l, n, v) : null;
            case ma:
              return n.key === x ? p(m, l, n, v) : null;
            case xa:
              return x = n._init, q(m, l, x(n._payload), v);
          }
          if (rc(n) || Fa(n))
            return null !== x ? null : r(m, l, n, v, null);
          if ("function" === typeof n.then)
            return q(m, l, pe(n), v);
          if (n.$$typeof === ra || n.$$typeof === sa)
            return q(m, l, ze(m, n, v), v);
          re(m, n);
        }
        return null;
      }
      function t(m, l, n, v, x) {
        if ("string" === typeof v && "" !== v || "number" === typeof v)
          return m = m.get(n) || null, h(l, m, "" + v, x);
        if ("object" === typeof v && null !== v) {
          switch (v.$$typeof) {
            case la:
              return m = m.get(null === v.key ? n : v.key) || null, k(l, m, v, x);
            case ma:
              return m = m.get(null === v.key ? n : v.key) || null, p(l, m, v, x);
            case xa:
              var A = v._init;
              return t(m, l, n, A(v._payload), x);
          }
          if (rc(v) || Fa(v))
            return m = m.get(n) || null, r(l, m, v, x, null);
          if ("function" === typeof v.then)
            return t(m, l, n, pe(v), x);
          if (v.$$typeof === ra || v.$$typeof === sa)
            return t(m, l, n, ze(l, v, x), x);
          re(l, v);
        }
        return null;
      }
      function y(m, l, n, v) {
        for (var x = null, A = null, z = l, G = l = 0, ea = null; null !== z && G < n.length; G++) {
          z.index > G ? (ea = z, z = null) : ea = z.sibling;
          var H = q(m, z, n[G], v);
          if (null === H) {
            null === z && (z = ea);
            break;
          }
          a && z && null === H.alternate && b(m, z);
          l = f(H, l, G);
          null === A ? x = H : A.sibling = H;
          A = H;
          z = ea;
        }
        if (G === n.length)
          return c(m, z), K && jd(m, G), x;
        if (null === z) {
          for (; G < n.length; G++)
            z = w(m, n[G], v), null !== z && (l = f(z, l, G), null === A ? x = z : A.sibling = z, A = z);
          K && jd(m, G);
          return x;
        }
        for (z = d(m, z); G < n.length; G++)
          ea = t(z, m, G, n[G], v), null !== ea && (a && null !== ea.alternate && z.delete(null === ea.key ? G : ea.key), l = f(ea, l, G), null === A ? x = ea : A.sibling = ea, A = ea);
        a && z.forEach(function(Db) {
          return b(m, Db);
        });
        K && jd(m, G);
        return x;
      }
      function B(m, l, n, v) {
        var x = Fa(n);
        if ("function" !== typeof x)
          throw Error(u(150));
        n = x.call(n);
        if (null == n)
          throw Error(u(151));
        for (var A = x = null, z = l, G = l = 0, ea = null, H = n.next(); null !== z && !H.done; G++, H = n.next()) {
          z.index > G ? (ea = z, z = null) : ea = z.sibling;
          var Db = q(m, z, H.value, v);
          if (null === Db) {
            null === z && (z = ea);
            break;
          }
          a && z && null === Db.alternate && b(m, z);
          l = f(Db, l, G);
          null === A ? x = Db : A.sibling = Db;
          A = Db;
          z = ea;
        }
        if (H.done)
          return c(m, z), K && jd(m, G), x;
        if (null === z) {
          for (; !H.done; G++, H = n.next())
            H = w(m, H.value, v), null !== H && (l = f(H, l, G), null === A ? x = H : A.sibling = H, A = H);
          K && jd(m, G);
          return x;
        }
        for (z = d(m, z); !H.done; G++, H = n.next())
          H = t(z, m, G, H.value, v), null !== H && (a && null !== H.alternate && z.delete(null === H.key ? G : H.key), l = f(H, l, G), null === A ? x = H : A.sibling = H, A = H);
        a && z.forEach(function(Cm) {
          return b(m, Cm);
        });
        K && jd(m, G);
        return x;
      }
      function O(m, l, n, v) {
        "object" === typeof n && null !== n && n.type === na && null === n.key && (n = n.props.children);
        if ("object" === typeof n && null !== n) {
          switch (n.$$typeof) {
            case la:
              a: {
                for (var x = n.key, A = l; null !== A; ) {
                  if (A.key === x) {
                    x = n.type;
                    if (x === na) {
                      if (7 === A.tag) {
                        c(m, A.sibling);
                        l = e(A, n.props.children);
                        l.return = m;
                        m = l;
                        break a;
                      }
                    } else if (A.elementType === x || "object" === typeof x && null !== x && x.$$typeof === xa && se(x) === A.type) {
                      c(m, A.sibling);
                      l = e(A, n.props);
                      l.ref = qe(m, A, n);
                      l.return = m;
                      m = l;
                      break a;
                    }
                    c(m, A);
                    break;
                  } else
                    b(m, A);
                  A = A.sibling;
                }
                n.type === na ? (l = ye(n.props.children, m.mode, v, n.key), l.return = m, m = l) : (v = we(n.type, n.key, n.props, null, m.mode, v), v.ref = qe(m, l, n), v.return = m, m = v);
              }
              return g(m);
            case ma:
              a: {
                for (A = n.key; null !== l; ) {
                  if (l.key === A)
                    if (4 === l.tag && l.stateNode.containerInfo === n.containerInfo && l.stateNode.implementation === n.implementation) {
                      c(m, l.sibling);
                      l = e(l, n.children || []);
                      l.return = m;
                      m = l;
                      break a;
                    } else {
                      c(m, l);
                      break;
                    }
                  else
                    b(m, l);
                  l = l.sibling;
                }
                l = xe(n, m.mode, v);
                l.return = m;
                m = l;
              }
              return g(m);
            case xa:
              return A = n._init, P(m, l, A(n._payload), v);
          }
          if (rc(n))
            return y(m, l, n, v);
          if (Fa(n))
            return B(m, l, n, v);
          if ("function" === typeof n.then)
            return O(m, l, pe(n), v);
          if (n.$$typeof === ra || n.$$typeof === sa)
            return O(m, l, ze(m, n, v), v);
          re(m, n);
        }
        return "string" === typeof n && "" !== n || "number" === typeof n ? (n = "" + n, null !== l && 6 === l.tag ? (c(m, l.sibling), l = e(l, n), l.return = m, m = l) : (c(m, l), l = ve(n, m.mode, v), l.return = m, m = l), g(m)) : c(m, l);
      }
      function P(m, l, n, v) {
        oe = 0;
        m = O(m, l, n, v);
        ne = null;
        return m;
      }
      return P;
    }
    var Ae = te(true);
    var Be = te(false);
    var Ce = ka(null);
    var De = ka(0);
    function Ee(a, b) {
      a = Fe;
      E(De, a);
      E(Ce, b);
      Fe = a | b.baseLanes;
    }
    function Ge() {
      E(De, Fe);
      E(Ce, Ce.current);
    }
    function He() {
      Fe = De.current;
      D(Ce);
      D(De);
    }
    var Ie = ka(null);
    var Je = null;
    function Ke(a) {
      var b = a.alternate;
      E(Le, Le.current & 1);
      E(Ie, a);
      null === Je && (null === b || null !== Ce.current ? Je = a : null !== b.memoizedState && (Je = a));
    }
    function Me(a) {
      if (22 === a.tag) {
        if (E(Le, Le.current), E(Ie, a), null === Je) {
          var b = a.alternate;
          null !== b && null !== b.memoizedState && (Je = a);
        }
      } else
        Ne(a);
    }
    function Ne() {
      E(Le, Le.current);
      E(Ie, Ie.current);
    }
    function Oe(a) {
      D(Ie);
      Je === a && (Je = null);
      D(Le);
    }
    var Le = ka(0);
    function Pe(a) {
      for (var b = a; null !== b; ) {
        if (13 === b.tag) {
          var c = b.memoizedState;
          if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data))
            return b;
        } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
          if (0 !== (b.flags & 128))
            return b;
        } else if (null !== b.child) {
          b.child.return = b;
          b = b.child;
          continue;
        }
        if (b === a)
          break;
        for (; null === b.sibling; ) {
          if (null === b.return || b.return === a)
            return null;
          b = b.return;
        }
        b.sibling.return = b.return;
        b = b.sibling;
      }
      return null;
    }
    var Qe = null;
    var Re = null;
    var Se = false;
    var Te = false;
    var Ue = false;
    var Ve = 0;
    function We(a) {
      a !== Re && null === a.next && (null === Re ? Qe = Re = a : Re = Re.next = a);
      Te = true;
      Se || (Se = true, Xe(Ye));
    }
    function Ze(a) {
      if (!Ue && Te) {
        var b = Q, c = N, d = 0, e = null;
        Ue = true;
        do {
          var f = false;
          if (60 < ++d) {
            for (a = Qe; null !== a; )
              b = a.next, a.next = null, a = b;
            Qe = Re = null;
            a = Error(u(185));
            null === e ? e = [a] : e.push(a);
            break;
          }
          for (var g = Qe; null !== g; ) {
            if ((!a || 0 === g.tag) && 0 !== (lb(g, g === b ? c : 0) & 3))
              try {
                f = true;
                var h = g;
                if (0 !== (M & 6))
                  throw Error(u(327));
                $e();
                var k = lb(h, 0);
                if (0 !== (k & 3)) {
                  var p = af(h, k);
                  if (0 !== h.tag && 2 === p) {
                    var r = k, w = nb(h, r);
                    0 !== w && (k = w, p = bf(h, r, w));
                  }
                  if (1 === p)
                    throw r = cf, df(h, 0), ef(h, k), We(h), r;
                  6 === p ? ef(h, k) : (h.finishedWork = h.current.alternate, h.finishedLanes = k, ff(h, gf, hf, jf));
                }
                We(h);
              } catch (q) {
                null === e ? e = [q] : e.push(q);
              }
            g = g.next;
          }
        } while (f);
        Ue = false;
        if (null !== e) {
          if (1 < e.length) {
            if ("function" === typeof AggregateError)
              throw new AggregateError(e);
            for (a = 1; a < e.length; a++)
              Xe(kf.bind(null, e[a]));
          }
          throw e[0];
        }
      }
    }
    function kf(a) {
      throw a;
    }
    function Ye() {
      Te = Se = false;
      for (var a = Va(), b = null, c = Qe; null !== c; ) {
        var d = c.next;
        0 !== Ve && window.event && "popstate" === window.event.type && sb(c, Ve | 2);
        var e = lf(c, a);
        0 === e ? (c.next = null, null === b ? Qe = d : b.next = d, null === d && (Re = b)) : (b = c, 0 !== (e & 3) && (Te = true));
        c = d;
      }
      Ve = 0;
      Ze(false);
    }
    function lf(a, b) {
      for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes & -125829121; 0 < f; ) {
        var g = 31 - fb(f), h = 1 << g, k = e[g];
        if (-1 === k) {
          if (0 === (h & c) || 0 !== (h & d))
            e[g] = mb(h, b);
        } else
          k <= b && (a.expiredLanes |= h);
        f &= ~h;
      }
      b = Q;
      c = N;
      c = lb(a, a === b ? c : 0);
      d = a.callbackNode;
      if (0 === c || a === b && 2 === R || null !== a.cancelPendingCommit)
        return null !== d && null !== d && Sa(d), a.callbackNode = null, a.callbackPriority = 0;
      if (0 !== (c & 3))
        return null !== d && null !== d && Sa(d), a.callbackPriority = 2, a.callbackNode = null, 2;
      b = c & -c;
      if (b === a.callbackPriority)
        return b;
      null !== d && Sa(d);
      switch (ub(c)) {
        case 2:
          c = Xa;
          break;
        case 8:
          c = Ya;
          break;
        case 32:
          c = Za;
          break;
        case 536870912:
          c = ab;
          break;
        default:
          c = Za;
      }
      d = mf.bind(null, a);
      c = Ra(c, d);
      a.callbackPriority = b;
      a.callbackNode = c;
      return b;
    }
    function Xe(a) {
      nf(function() {
        0 !== (M & 6) ? Ra(Xa, a) : a();
      });
    }
    function of() {
      0 === Ve && (Ve = ob());
      return Ve;
    }
    var pf = null;
    var qf = 0;
    var rf = 0;
    function sf(a, b) {
      if (null !== a && "object" === typeof a && "function" === typeof a.then) {
        if (null === pf) {
          var c = pf = [];
          qf = 0;
          rf = of();
        } else
          c = pf;
        qf++;
        var d = "pending", e;
        a.then(function() {
          d = "fulfilled";
          tf();
        }, function(h) {
          d = "rejected";
          e = h;
          tf();
        });
        var f = uf(c);
        c.push(function() {
          switch (d) {
            case "fulfilled":
              f.status = "fulfilled";
              f.value = b;
              break;
            case "rejected":
              f.status = "rejected";
              f.reason = e;
              break;
            default:
              throw Error(u(478));
          }
        });
        return f;
      }
      if (null === pf)
        return b;
      a = pf;
      var g = uf(a);
      a.push(function() {
        g.status = "fulfilled";
        g.value = b;
      });
      return g;
    }
    function tf() {
      if (null !== pf && 0 === --qf) {
        var a = pf;
        pf = null;
        for (var b = rf = 0; b < a.length; b++)
          (0, a[b])();
      }
    }
    function uf(a) {
      return { status: "pending", value: null, reason: null, then: function(b) {
        a.push(b);
      } };
    }
    var vf = da.ReactCurrentDispatcher;
    var wf = da.ReactCurrentBatchConfig;
    var xf = 0;
    var S = null;
    var T = null;
    var U = null;
    var yf = false;
    var zf = false;
    var Af = false;
    var Bf = 0;
    var Cf = 0;
    var Df = null;
    var Ef = 0;
    function V() {
      throw Error(u(321));
    }
    function Ff(a, b) {
      if (null === b)
        return false;
      for (var c = 0; c < b.length && c < a.length; c++)
        if (!$c(a[c], b[c]))
          return false;
      return true;
    }
    function Gf(a, b, c, d, e, f) {
      xf = f;
      S = b;
      b.memoizedState = null;
      b.updateQueue = null;
      b.lanes = 0;
      vf.current = null === a || null === a.memoizedState ? Hf : If;
      Af = false;
      a = c(d, e);
      Af = false;
      zf && (a = Jf(b, c, d, e));
      Kf();
      return a;
    }
    function Kf() {
      vf.current = Lf;
      var a = null !== T && null !== T.next;
      xf = 0;
      U = T = S = null;
      yf = false;
      Cf = 0;
      Df = null;
      if (a)
        throw Error(u(300));
    }
    function Jf(a, b, c, d) {
      S = a;
      var e = 0;
      do {
        zf && (Df = null);
        Cf = 0;
        zf = false;
        if (25 <= e)
          throw Error(u(301));
        e += 1;
        U = T = null;
        a.updateQueue = null;
        vf.current = Mf;
        var f = b(c, d);
      } while (zf);
      return f;
    }
    function Nf() {
      var a = vf.current.useState()[0];
      return "function" === typeof a.then ? Of(a) : a;
    }
    function Pf() {
      var a = 0 !== Bf;
      Bf = 0;
      return a;
    }
    function Qf(a, b, c) {
      b.updateQueue = a.updateQueue;
      b.flags &= -2053;
      a.lanes &= ~c;
    }
    function Rf(a) {
      if (yf) {
        for (a = a.memoizedState; null !== a; ) {
          var b = a.queue;
          null !== b && (b.pending = null);
          a = a.next;
        }
        yf = false;
      }
      xf = 0;
      U = T = S = null;
      zf = false;
      Cf = Bf = 0;
      Df = null;
    }
    function Sf() {
      var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
      null === U ? S.memoizedState = U = a : U = U.next = a;
      return U;
    }
    function Tf() {
      if (null === T) {
        var a = S.alternate;
        a = null !== a ? a.memoizedState : null;
      } else
        a = T.next;
      var b = null === U ? S.memoizedState : U.next;
      if (null !== b)
        U = b, T = a;
      else {
        if (null === a) {
          if (null === S.alternate)
            throw Error(u(467));
          throw Error(u(310));
        }
        T = a;
        a = { memoizedState: T.memoizedState, baseState: T.baseState, baseQueue: T.baseQueue, queue: T.queue, next: null };
        null === U ? S.memoizedState = U = a : U = U.next = a;
      }
      return U;
    }
    var Uf;
    Uf = function() {
      return { lastEffect: null, events: null, stores: null, memoCache: null };
    };
    function Of(a) {
      var b = Cf;
      Cf += 1;
      null === Df && (Df = []);
      a = ke(Df, a, b);
      null === S.alternate && (null === U ? null === S.memoizedState : null === U.next) && (vf.current = Hf);
      return a;
    }
    function Vf(a) {
      if (null !== a && "object" === typeof a) {
        if ("function" === typeof a.then)
          return Of(a);
        if (a.$$typeof === ra || a.$$typeof === sa)
          return Wf(a);
      }
      throw Error(u(438, String(a)));
    }
    function Xf(a) {
      var b = null, c = S.updateQueue;
      null !== c && (b = c.memoCache);
      if (null == b) {
        var d = S.alternate;
        null !== d && (d = d.updateQueue, null !== d && (d = d.memoCache, null != d && (b = { data: d.data.map(function(e) {
          return e.slice();
        }), index: 0 })));
      }
      null == b && (b = { data: [], index: 0 });
      null === c && (c = Uf(), S.updateQueue = c);
      c.memoCache = b;
      c = b.data[b.index];
      if (void 0 === c)
        for (c = b.data[b.index] = Array(a), d = 0; d < a; d++)
          c[d] = Da;
      b.index++;
      return c;
    }
    function Yf(a, b) {
      return "function" === typeof b ? b(a) : b;
    }
    function Zf(a) {
      var b = Tf();
      return $f(b, T, a);
    }
    function $f(a, b, c) {
      var d = a.queue;
      if (null === d)
        throw Error(u(311));
      d.lastRenderedReducer = c;
      var e = a.baseQueue, f = d.pending;
      if (null !== f) {
        if (null !== e) {
          var g = e.next;
          e.next = f.next;
          f.next = g;
        }
        b.baseQueue = e = f;
        d.pending = null;
      }
      if (null !== e) {
        b = e.next;
        f = a.baseState;
        var h = g = null, k = null, p = b;
        do {
          var r = p.lane & -1073741825;
          if (r !== p.lane ? (N & r) === r : (xf & r) === r) {
            r = p.revertLane;
            if (0 === r)
              null !== k && (k = k.next = { lane: 0, revertLane: 0, action: p.action, hasEagerState: p.hasEagerState, eagerState: p.eagerState, next: null });
            else if ((xf & r) === r) {
              p = p.next;
              continue;
            } else {
              var w = { lane: 0, revertLane: p.revertLane, action: p.action, hasEagerState: p.hasEagerState, eagerState: p.eagerState, next: null };
              null === k ? (h = k = w, g = f) : k = k.next = w;
              S.lanes |= r;
              be |= r;
            }
            r = p.action;
            Af && c(f, r);
            f = p.hasEagerState ? p.eagerState : c(f, r);
          } else
            w = { lane: r, revertLane: p.revertLane, action: p.action, hasEagerState: p.hasEagerState, eagerState: p.eagerState, next: null }, null === k ? (h = k = w, g = f) : k = k.next = w, S.lanes |= r, be |= r;
          p = p.next;
        } while (null !== p && p !== b);
        null === k ? g = f : k.next = h;
        $c(f, a.memoizedState) || (ag = true);
        a.memoizedState = f;
        a.baseState = g;
        a.baseQueue = k;
        d.lastRenderedState = f;
      }
      null === e && (d.lanes = 0);
      return [a.memoizedState, d.dispatch];
    }
    function bg(a) {
      var b = Tf(), c = b.queue;
      if (null === c)
        throw Error(u(311));
      c.lastRenderedReducer = a;
      var d = c.dispatch, e = c.pending, f = b.memoizedState;
      if (null !== e) {
        c.pending = null;
        var g = e = e.next;
        do
          f = a(f, g.action), g = g.next;
        while (g !== e);
        $c(f, b.memoizedState) || (ag = true);
        b.memoizedState = f;
        null === b.baseQueue && (b.baseState = f);
        c.lastRenderedState = f;
      }
      return [f, d];
    }
    function cg(a, b, c) {
      var d = S, e = Tf(), f = K;
      if (f) {
        if (void 0 === c)
          throw Error(u(407));
        c = c();
      } else
        c = b();
      var g = !$c((T || e).memoizedState, c);
      g && (e.memoizedState = c, ag = true);
      e = e.queue;
      dg(eg.bind(null, d, e, a), [a]);
      if (e.getSnapshot !== b || g || null !== U && U.memoizedState.tag & 1) {
        d.flags |= 2048;
        fg(9, gg.bind(null, d, e, c, b), { destroy: void 0 }, null);
        if (null === Q)
          throw Error(u(349));
        f || 0 !== (xf & 60) || hg(d, b, c);
      }
      return c;
    }
    function hg(a, b, c) {
      a.flags |= 16384;
      a = { getSnapshot: b, value: c };
      b = S.updateQueue;
      null === b ? (b = Uf(), S.updateQueue = b, b.stores = [a]) : (c = b.stores, null === c ? b.stores = [a] : c.push(a));
    }
    function gg(a, b, c, d) {
      b.value = c;
      b.getSnapshot = d;
      ig(b) && jg(a);
    }
    function eg(a, b, c) {
      return c(function() {
        ig(b) && jg(a);
      });
    }
    function ig(a) {
      var b = a.getSnapshot;
      a = a.value;
      try {
        var c = b();
        return !$c(a, c);
      } catch (d) {
        return true;
      }
    }
    function jg(a) {
      var b = Sd(a, 2);
      null !== b && kg(b, a, 2);
    }
    function lg(a) {
      var b = Sf();
      "function" === typeof a && (a = a());
      b.memoizedState = b.baseState = a;
      b.queue = { pending: null, lanes: 0, dispatch: null, lastRenderedReducer: Yf, lastRenderedState: a };
      return b;
    }
    function mg(a, b) {
      var c = Tf();
      c.baseState = c.memoizedState = a;
      return $f(c, T, "function" === typeof b ? b : Yf);
    }
    function fg(a, b, c, d) {
      a = { tag: a, create: b, inst: c, deps: d, next: null };
      b = S.updateQueue;
      null === b ? (b = Uf(), S.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
      return a;
    }
    function ng() {
      return Tf().memoizedState;
    }
    function og(a, b, c, d) {
      var e = Sf();
      S.flags |= a;
      e.memoizedState = fg(1 | b, c, { destroy: void 0 }, void 0 === d ? null : d);
    }
    function pg(a, b, c, d) {
      var e = Tf();
      d = void 0 === d ? null : d;
      var f = e.memoizedState.inst;
      null !== T && null !== d && Ff(d, T.memoizedState.deps) ? e.memoizedState = fg(b, c, f, d) : (S.flags |= a, e.memoizedState = fg(1 | b, c, f, d));
    }
    function qg(a, b) {
      og(8390656, 8, a, b);
    }
    function dg(a, b) {
      pg(2048, 8, a, b);
    }
    function rg(a) {
      S.flags |= 4;
      var b = S.updateQueue;
      if (null === b)
        b = Uf(), S.updateQueue = b, b.events = [a];
      else {
        var c = b.events;
        null === c ? b.events = [a] : c.push(a);
      }
    }
    function sg(a) {
      var b = Tf().memoizedState;
      rg({ ref: b, nextImpl: a });
      return function() {
        if (0 !== (M & 2))
          throw Error(u(440));
        return b.impl.apply(void 0, arguments);
      };
    }
    function tg(a, b) {
      return pg(4, 2, a, b);
    }
    function ug(a, b) {
      return pg(4, 4, a, b);
    }
    function vg(a, b) {
      if ("function" === typeof b)
        return a = a(), b(a), function() {
          b(null);
        };
      if (null !== b && void 0 !== b)
        return a = a(), b.current = a, function() {
          b.current = null;
        };
    }
    function wg(a, b, c) {
      c = null !== c && void 0 !== c ? c.concat([a]) : null;
      pg(4, 4, vg.bind(null, b, a), c);
    }
    function xg() {
    }
    function yg(a, b) {
      var c = Tf();
      b = void 0 === b ? null : b;
      var d = c.memoizedState;
      if (null !== b && Ff(b, d[1]))
        return d[0];
      c.memoizedState = [a, b];
      return a;
    }
    function zg(a, b) {
      var c = Tf();
      b = void 0 === b ? null : b;
      var d = c.memoizedState;
      if (null !== b && Ff(b, d[1]))
        return d[0];
      Af && a();
      a = a();
      c.memoizedState = [a, b];
      return a;
    }
    function Ag(a, b, c) {
      if (0 === (xf & 42))
        return a.baseState && (a.baseState = false, ag = true), a.memoizedState = c;
      $c(c, b) || (c = ob(), S.lanes |= c, be |= c, a.baseState = true);
      return b;
    }
    function Bg(a, b, c, d, e) {
      var f = F;
      F = 0 !== f && 8 > f ? f : 8;
      var g = wf.transition;
      Cg(a, false, b, c);
      wf.transition = {};
      try {
        var h = e(), k = sf(h, d);
        Dg(a, b, k);
      } catch (p) {
        Dg(a, b, { then: function() {
        }, status: "rejected", reason: p });
      } finally {
        F = f, wf.transition = g;
      }
    }
    function Eg(a, b, c, d) {
      if (5 !== a.tag)
        throw Error(u(476));
      if (null === a.memoizedState) {
        var e = { pending: null, lanes: 0, dispatch: null, lastRenderedReducer: Yf, lastRenderedState: ha };
        var f = e;
        e = { memoizedState: ha, baseState: ha, baseQueue: null, queue: e, next: null };
        a.memoizedState = e;
        var g = a.alternate;
        null !== g && (g.memoizedState = e);
      } else
        f = a.memoizedState.queue;
      Bg(a, f, b, ha, function() {
        return c(d);
      });
    }
    function Fg() {
      var a = Wf(Ka);
      return null !== a ? a : ha;
    }
    function Gg() {
      return Tf().memoizedState;
    }
    function Hg() {
      return Tf().memoizedState;
    }
    function Ig(a, b, c) {
      for (var d = a.return; null !== d; ) {
        switch (d.tag) {
          case 24:
          case 3:
            var e = Jg(d);
            a = Xd(e);
            var f = Yd(d, a, e);
            null !== f && (kg(f, d, e), Zd(f, d, e));
            d = Kg();
            null !== b && void 0 !== b && null !== f && d.data.set(b, c);
            a.payload = { cache: d };
            return;
        }
        d = d.return;
      }
    }
    function Lg(a, b, c) {
      var d = Jg(a);
      c = { lane: d, revertLane: 0, action: c, hasEagerState: false, eagerState: null, next: null };
      Mg(a) ? Ng(b, c) : (c = Qd(a, b, c, d), null !== c && (kg(c, a, d), Og(c, b, d)));
    }
    function Dg(a, b, c) {
      var d = Jg(a), e = { lane: d, revertLane: 0, action: c, hasEagerState: false, eagerState: null, next: null };
      if (Mg(a))
        Ng(b, e);
      else {
        var f = a.alternate;
        if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b.lastRenderedReducer, null !== f))
          try {
            var g = b.lastRenderedState, h = f(g, c);
            e.hasEagerState = true;
            e.eagerState = h;
            if ($c(h, g)) {
              Pd(a, b, e, 0);
              null === Q && Nd();
              return;
            }
          } catch (k) {
          } finally {
          }
        c = Qd(a, b, e, d);
        null !== c && (kg(c, a, d), Og(c, b, d));
      }
    }
    function Cg(a, b, c, d) {
      d = { lane: 2, revertLane: of(), action: d, hasEagerState: false, eagerState: null, next: null };
      if (Mg(a)) {
        if (b)
          throw Error(u(479));
      } else
        b = Qd(a, c, d, 2), null !== b && kg(b, a, 2);
    }
    function Mg(a) {
      var b = a.alternate;
      return a === S || null !== b && b === S;
    }
    function Ng(a, b) {
      zf = yf = true;
      var c = a.pending;
      null === c ? b.next = b : (b.next = c.next, c.next = b);
      a.pending = b;
    }
    function Og(a, b, c) {
      if (0 !== (c & 8388480)) {
        var d = b.lanes;
        d &= a.pendingLanes;
        c |= d;
        b.lanes = c;
        sb(a, c);
      }
    }
    var Lf = { readContext: Wf, use: Vf, useCallback: V, useContext: V, useEffect: V, useImperativeHandle: V, useInsertionEffect: V, useLayoutEffect: V, useMemo: V, useReducer: V, useRef: V, useState: V, useDebugValue: V, useDeferredValue: V, useTransition: V, useSyncExternalStore: V, useId: V };
    Lf.useCacheRefresh = V;
    Lf.useMemoCache = V;
    Lf.useEffectEvent = V;
    Lf.useHostTransitionStatus = V;
    Lf.useOptimistic = V;
    var Hf = { readContext: Wf, use: Vf, useCallback: function(a, b) {
      Sf().memoizedState = [a, void 0 === b ? null : b];
      return a;
    }, useContext: Wf, useEffect: qg, useImperativeHandle: function(a, b, c) {
      c = null !== c && void 0 !== c ? c.concat([a]) : null;
      og(4194308, 4, vg.bind(null, b, a), c);
    }, useLayoutEffect: function(a, b) {
      return og(4194308, 4, a, b);
    }, useInsertionEffect: function(a, b) {
      og(4, 2, a, b);
    }, useMemo: function(a, b) {
      var c = Sf();
      b = void 0 === b ? null : b;
      Af && a();
      a = a();
      c.memoizedState = [a, b];
      return a;
    }, useReducer: function(a, b, c) {
      var d = Sf();
      b = void 0 !== c ? c(b) : b;
      d.memoizedState = d.baseState = b;
      a = { pending: null, lanes: 0, dispatch: null, lastRenderedReducer: a, lastRenderedState: b };
      d.queue = a;
      a = a.dispatch = Lg.bind(null, S, a);
      return [d.memoizedState, a];
    }, useRef: function(a) {
      var b = Sf();
      a = { current: a };
      return b.memoizedState = a;
    }, useState: function(a) {
      a = lg(a);
      var b = a.queue, c = Dg.bind(null, S, b);
      b.dispatch = c;
      return [a.memoizedState, c];
    }, useDebugValue: xg, useDeferredValue: function(a) {
      return Sf().memoizedState = a;
    }, useTransition: function() {
      var a = lg(false);
      a = Bg.bind(null, S, a.queue, true, false);
      Sf().memoizedState = a;
      return [false, a];
    }, useSyncExternalStore: function(a, b, c) {
      var d = S, e = Sf();
      if (K) {
        if (void 0 === c)
          throw Error(u(407));
        c = c();
      } else {
        c = b();
        if (null === Q)
          throw Error(u(349));
        0 !== (xf & 60) || hg(d, b, c);
      }
      e.memoizedState = c;
      var f = { value: c, getSnapshot: b };
      e.queue = f;
      qg(eg.bind(null, d, f, a), [a]);
      d.flags |= 2048;
      fg(9, gg.bind(null, d, f, c, b), { destroy: void 0 }, null);
      return c;
    }, useId: function() {
      var a = Sf(), b = Q.identifierPrefix;
      if (K) {
        var c = id;
        var d = hd;
        c = (d & ~(1 << 32 - fb(d) - 1)).toString(32) + c;
        b = ":" + b + "R" + c;
        c = Bf++;
        0 < c && (b += "H" + c.toString(32));
        b += ":";
      } else
        c = Ef++, b = ":" + b + "r" + c.toString(32) + ":";
      return a.memoizedState = b;
    }, useCacheRefresh: function() {
      return Sf().memoizedState = Ig.bind(null, S);
    } };
    Hf.useMemoCache = Xf;
    Hf.useEffectEvent = function(a) {
      var b = Sf(), c = { impl: a };
      b.memoizedState = c;
      return function() {
        if (0 !== (M & 2))
          throw Error(u(440));
        return c.impl.apply(void 0, arguments);
      };
    };
    Hf.useHostTransitionStatus = Fg;
    Hf.useOptimistic = function(a) {
      var b = Sf();
      b.memoizedState = b.baseState = a;
      var c = { pending: null, lanes: 0, dispatch: null, lastRenderedReducer: null, lastRenderedState: null };
      b.queue = c;
      b = Cg.bind(null, S, true, c);
      c.dispatch = b;
      return [a, b];
    };
    var If = { readContext: Wf, use: Vf, useCallback: yg, useContext: Wf, useEffect: dg, useImperativeHandle: wg, useInsertionEffect: tg, useLayoutEffect: ug, useMemo: zg, useReducer: Zf, useRef: ng, useState: function() {
      return Zf(Yf);
    }, useDebugValue: xg, useDeferredValue: function(a) {
      var b = Tf();
      return Ag(b, T.memoizedState, a);
    }, useTransition: function() {
      var a = Zf(Yf)[0], b = Tf().memoizedState;
      return ["boolean" === typeof a ? a : Of(a), b];
    }, useSyncExternalStore: cg, useId: Gg };
    If.useCacheRefresh = Hg;
    If.useMemoCache = Xf;
    If.useEffectEvent = sg;
    If.useHostTransitionStatus = Fg;
    If.useOptimistic = mg;
    var Mf = { readContext: Wf, use: Vf, useCallback: yg, useContext: Wf, useEffect: dg, useImperativeHandle: wg, useInsertionEffect: tg, useLayoutEffect: ug, useMemo: zg, useReducer: bg, useRef: ng, useState: function() {
      return bg(Yf);
    }, useDebugValue: xg, useDeferredValue: function(a) {
      var b = Tf();
      return null === T ? b.memoizedState = a : Ag(b, T.memoizedState, a);
    }, useTransition: function() {
      var a = bg(Yf)[0], b = Tf().memoizedState;
      return ["boolean" === typeof a ? a : Of(a), b];
    }, useSyncExternalStore: cg, useId: Gg };
    Mf.useCacheRefresh = Hg;
    Mf.useMemoCache = Xf;
    Mf.useEffectEvent = sg;
    Mf.useHostTransitionStatus = Fg;
    Mf.useOptimistic = function(a, b) {
      if (null !== T)
        return mg(a, b);
      b = Tf();
      b.baseState = b.memoizedState = a;
      return [a, b.queue.dispatch];
    };
    function Pg(a, b) {
      if (a && a.defaultProps) {
        b = C({}, b);
        a = a.defaultProps;
        for (var c in a)
          void 0 === b[c] && (b[c] = a[c]);
        return b;
      }
      return b;
    }
    function Qg(a, b, c, d) {
      b = a.memoizedState;
      c = c(d, b);
      c = null === c || void 0 === c ? b : C({}, b, c);
      a.memoizedState = c;
      0 === a.lanes && (a.updateQueue.baseState = c);
    }
    var Rg = { isMounted: function(a) {
      return (a = a._reactInternals) ? Ic(a) === a : false;
    }, enqueueSetState: function(a, b, c) {
      a = a._reactInternals;
      var d = Jg(a), e = Xd(d);
      e.payload = b;
      void 0 !== c && null !== c && (e.callback = c);
      b = Yd(a, e, d);
      null !== b && (kg(b, a, d), Zd(b, a, d));
    }, enqueueReplaceState: function(a, b, c) {
      a = a._reactInternals;
      var d = Jg(a), e = Xd(d);
      e.tag = 1;
      e.payload = b;
      void 0 !== c && null !== c && (e.callback = c);
      b = Yd(a, e, d);
      null !== b && (kg(b, a, d), Zd(b, a, d));
    }, enqueueForceUpdate: function(a, b) {
      a = a._reactInternals;
      var c = Jg(a), d = Xd(c);
      d.tag = 2;
      void 0 !== b && null !== b && (d.callback = b);
      b = Yd(a, d, c);
      null !== b && (kg(b, a, c), Zd(b, a, c));
    } };
    function Sg(a, b, c, d, e, f, g) {
      a = a.stateNode;
      return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !ee(c, d) || !ee(e, f) : true;
    }
    function Tg(a, b, c) {
      var d = false, e = Oc;
      var f = b.contextType;
      "object" === typeof f && null !== f ? f = Wf(f) : (e = Tc(b) ? Rc : Pc.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Sc(a, e) : Oc);
      b = new b(c, f);
      a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
      b.updater = Rg;
      a.stateNode = b;
      b._reactInternals = a;
      d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
      return b;
    }
    function Ug(a, b, c, d) {
      a = b.state;
      "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
      "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
      b.state !== a && Rg.enqueueReplaceState(b, b.state, null);
    }
    function Vg(a, b, c, d) {
      var e = a.stateNode;
      e.props = c;
      e.state = a.memoizedState;
      e.refs = {};
      Vd(a);
      var f = b.contextType;
      "object" === typeof f && null !== f ? e.context = Wf(f) : (f = Tc(b) ? Rc : Pc.current, e.context = Sc(a, f));
      e.state = a.memoizedState;
      f = b.getDerivedStateFromProps;
      "function" === typeof f && (Qg(a, b, f, c), e.state = a.memoizedState);
      "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Rg.enqueueReplaceState(e, e.state, null), ae(a, c, e, d), e.state = a.memoizedState);
      "function" === typeof e.componentDidMount && (a.flags |= 4194308);
    }
    function Wg(a, b) {
      try {
        var c = "", d = b;
        do
          c += dc(d), d = d.return;
        while (d);
        var e = c;
      } catch (f) {
        e = "\nError generating stack: " + f.message + "\n" + f.stack;
      }
      return { value: a, source: b, stack: e, digest: null };
    }
    function Xg(a, b, c) {
      return { value: a, source: null, stack: null != c ? c : null, digest: null != b ? b : null };
    }
    function Yg(a, b) {
      try {
        console.error(b.value);
      } catch (c) {
        setTimeout(function() {
          throw c;
        });
      }
    }
    function Zg(a, b, c) {
      c = Xd(c);
      c.tag = 3;
      c.payload = { element: null };
      var d = b.value;
      c.callback = function() {
        $g || ($g = true, ah = d);
        Yg(a, b);
      };
      return c;
    }
    function bh(a, b, c) {
      c = Xd(c);
      c.tag = 3;
      var d = a.type.getDerivedStateFromError;
      if ("function" === typeof d) {
        var e = b.value;
        c.payload = function() {
          return d(e);
        };
        c.callback = function() {
          Yg(a, b);
        };
      }
      var f = a.stateNode;
      null !== f && "function" === typeof f.componentDidCatch && (c.callback = function() {
        Yg(a, b);
        "function" !== typeof d && (null === ch ? ch = /* @__PURE__ */ new Set([this]) : ch.add(this));
        var g = b.stack;
        this.componentDidCatch(b.value, { componentStack: null !== g ? g : "" });
      });
      return c;
    }
    function dh(a, b, c, d, e) {
      if (0 === (a.mode & 1))
        return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = Xd(2), b.tag = 2, Yd(c, b, 2))), c.lanes |= 2), a;
      a.flags |= 65536;
      a.lanes = e;
      return a;
    }
    var eh = da.ReactCurrentOwner;
    var fh = Error(u(461));
    var ag = false;
    function gh(a, b, c, d) {
      b.child = null === a ? Be(b, null, c, d) : Ae(b, a.child, c, d);
    }
    function hh(a, b, c, d, e) {
      c = c.render;
      var f = b.ref;
      ih(b, e);
      d = Gf(a, b, c, d, f, e);
      c = Pf();
      if (null !== a && !ag)
        return Qf(a, b, e), jh(a, b, e);
      K && c && ld(b);
      b.flags |= 1;
      gh(a, b, d, e);
      return b.child;
    }
    function kh(a, b, c, d, e) {
      if (null === a) {
        var f = c.type;
        if ("function" === typeof f && !lh(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps)
          return b.tag = 15, b.type = f, mh(a, b, f, d, e);
        a = we(c.type, null, d, b, b.mode, e);
        a.ref = b.ref;
        a.return = b;
        return b.child = a;
      }
      f = a.child;
      if (0 === (a.lanes & e)) {
        var g = f.memoizedProps;
        c = c.compare;
        c = null !== c ? c : ee;
        if (c(g, d) && a.ref === b.ref)
          return jh(a, b, e);
      }
      b.flags |= 1;
      a = ue(f, d);
      a.ref = b.ref;
      a.return = b;
      return b.child = a;
    }
    function mh(a, b, c, d, e) {
      if (null !== a) {
        var f = a.memoizedProps;
        if (ee(f, d) && a.ref === b.ref)
          if (ag = false, b.pendingProps = d = f, 0 !== (a.lanes & e))
            0 !== (a.flags & 131072) && (ag = true);
          else
            return b.lanes = a.lanes, jh(a, b, e);
      }
      return nh(a, b, c, d, e);
    }
    function oh(a, b, c) {
      var d = b.pendingProps, e = d.children, f = 0 !== (b.stateNode._pendingVisibility & 2), g = null !== a ? a.memoizedState : null;
      ph(a, b);
      if ("hidden" === d.mode || f) {
        if (0 !== (b.flags & 128)) {
          c = null !== g ? g.baseLanes | c : c;
          if (null !== a) {
            d = b.child = a.child;
            for (e = 0; null !== d; )
              e = e | d.lanes | d.childLanes, d = d.sibling;
            b.childLanes = e & ~c;
          } else
            b.childLanes = 0, b.child = null;
          return qh(a, b, c);
        }
        if (0 === (b.mode & 1))
          b.memoizedState = { baseLanes: 0, cachePool: null }, null !== a && rh(b, null), Ge(), Me(b);
        else if (0 !== (c & 1073741824))
          b.memoizedState = {
            baseLanes: 0,
            cachePool: null
          }, null !== a && rh(b, null !== g ? g.cachePool : null), null !== g ? Ee(b, g) : Ge(), Me(b);
        else
          return b.lanes = b.childLanes = 1073741824, qh(a, b, null !== g ? g.baseLanes | c : c);
      } else
        null !== g ? (rh(b, g.cachePool), Ee(b, g), Ne(b), b.memoizedState = null) : (null !== a && rh(b, null), Ge(), Ne(b));
      gh(a, b, e, c);
      return b.child;
    }
    function qh(a, b, c) {
      var d = sh();
      d = null === d ? null : { parent: th._currentValue, pool: d };
      b.memoizedState = { baseLanes: c, cachePool: d };
      null !== a && rh(b, null);
      Ge();
      Me(b);
      return null;
    }
    function ph(a, b) {
      var c = b.ref;
      if (null === a && null !== c || null !== a && a.ref !== c)
        b.flags |= 512, b.flags |= 2097152;
    }
    function nh(a, b, c, d, e) {
      var f = Tc(c) ? Rc : Pc.current;
      f = Sc(b, f);
      ih(b, e);
      c = Gf(a, b, c, d, f, e);
      d = Pf();
      if (null !== a && !ag)
        return Qf(a, b, e), jh(a, b, e);
      K && d && ld(b);
      b.flags |= 1;
      gh(a, b, c, e);
      return b.child;
    }
    function uh(a, b, c, d, e, f) {
      ih(b, f);
      c = Jf(b, d, c, e);
      Kf();
      d = Pf();
      if (null !== a && !ag)
        return Qf(a, b, f), jh(a, b, f);
      K && d && ld(b);
      b.flags |= 1;
      gh(a, b, c, f);
      return b.child;
    }
    function vh(a, b, c, d, e) {
      if (Tc(c)) {
        var f = true;
        Xc(b);
      } else
        f = false;
      ih(b, e);
      if (null === b.stateNode)
        wh(a, b), Tg(b, c, d), Vg(b, c, d, e), d = true;
      else if (null === a) {
        var g = b.stateNode, h = b.memoizedProps;
        g.props = h;
        var k = g.context, p = c.contextType;
        "object" === typeof p && null !== p ? p = Wf(p) : (p = Tc(c) ? Rc : Pc.current, p = Sc(b, p));
        var r = c.getDerivedStateFromProps, w = "function" === typeof r || "function" === typeof g.getSnapshotBeforeUpdate;
        w || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== p) && Ug(b, g, d, p);
        Ud = false;
        var q = b.memoizedState;
        g.state = q;
        ae(b, d, g, e);
        k = b.memoizedState;
        h !== d || q !== k || Qc.current || Ud ? ("function" === typeof r && (Qg(b, c, r, d), k = b.memoizedState), (h = Ud || Sg(b, c, h, d, q, k, p)) ? (w || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = p, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = false);
      } else {
        g = b.stateNode;
        Wd(a, b);
        h = b.memoizedProps;
        p = b.type === b.elementType ? h : Pg(b.type, h);
        g.props = p;
        w = b.pendingProps;
        q = g.context;
        k = c.contextType;
        "object" === typeof k && null !== k ? k = Wf(k) : (k = Tc(c) ? Rc : Pc.current, k = Sc(b, k));
        var t = c.getDerivedStateFromProps;
        (r = "function" === typeof t || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== w || q !== k) && Ug(b, g, d, k);
        Ud = false;
        q = b.memoizedState;
        g.state = q;
        ae(b, d, g, e);
        var y = b.memoizedState;
        h !== w || q !== y || Qc.current || Ud ? ("function" === typeof t && (Qg(b, c, t, d), y = b.memoizedState), (p = Ud || Sg(b, c, p, d, q, y, k) || false) ? (r || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, y, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, y, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && q === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && q === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = y), g.props = d, g.state = y, g.context = k, d = p) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && q === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && q === a.memoizedState || (b.flags |= 1024), d = false);
      }
      return xh(a, b, c, d, f, e);
    }
    function xh(a, b, c, d, e, f) {
      ph(a, b);
      var g = 0 !== (b.flags & 128);
      if (!d && !g)
        return e && Yc(b, c, false), jh(a, b, f);
      d = b.stateNode;
      eh.current = b;
      var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
      b.flags |= 1;
      null !== a && g ? (b.child = Ae(b, a.child, null, f), b.child = Ae(b, null, h, f)) : gh(a, b, h, f);
      b.memoizedState = d.state;
      e && Yc(b, c, true);
      return b.child;
    }
    function yh(a) {
      var b = a.stateNode;
      b.pendingContext ? Vc(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Vc(a, b.context, false);
      La(a, b.containerInfo);
    }
    function zh(a, b, c, d, e) {
      Id();
      Jd(e);
      b.flags |= 256;
      gh(a, b, c, d);
      return b.child;
    }
    var Ah = { dehydrated: null, treeContext: null, retryLane: 0 };
    function Bh(a) {
      return { baseLanes: a, cachePool: Ch() };
    }
    function Dh(a, b, c) {
      var d = b.pendingProps, e = false, f = 0 !== (b.flags & 128), g;
      (g = f) || (g = null !== a && null === a.memoizedState ? false : 0 !== (Le.current & 2));
      g && (e = true, b.flags &= -129);
      if (null === a) {
        if (K) {
          e ? Ke(b) : Ne(b);
          K && ((f = a = J, f) ? xd(b, f) || (yd(b) && zd(), J = ud(f.nextSibling), g = I, J && xd(b, J) ? pd(g, f) : (rd(I, b), K = false, I = b, J = a)) : (yd(b) && zd(), rd(I, b), K = false, I = b, J = a));
          a = b.memoizedState;
          if (null !== a && (a = a.dehydrated, null !== a))
            return 0 === (b.mode & 1) ? b.lanes = 2 : "$!" === a.data ? b.lanes = 16 : b.lanes = 1073741824, null;
          Oe(b);
        }
        a = d.children;
        f = d.fallback;
        if (e)
          return Ne(b), a = Eh(b, a, f, c), b.child.memoizedState = Bh(c), b.memoizedState = Ah, a;
        if ("number" === typeof d.unstable_expectedLoadTime)
          return Ne(b), a = Eh(b, a, f, c), b.child.memoizedState = Bh(c), b.memoizedState = Ah, b.lanes = 8388608, a;
        Ke(b);
        return Fh(b, a);
      }
      g = a.memoizedState;
      if (null !== g) {
        var h = g.dehydrated;
        if (null !== h)
          return Gh(a, b, f, d, h, g, c);
      }
      if (e) {
        Ne(b);
        e = d.fallback;
        f = b.mode;
        g = a.child;
        h = g.sibling;
        var k = { mode: "hidden", children: d.children };
        0 === (f & 1) && b.child !== g ? (d = b.child, d.childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = ue(
          g,
          k
        ), d.subtreeFlags = g.subtreeFlags & 31457280);
        null !== h ? e = ue(h, e) : (e = ye(e, f, c, null), e.flags |= 2);
        e.return = b;
        d.return = b;
        d.sibling = e;
        b.child = d;
        d = e;
        e = b.child;
        f = a.child.memoizedState;
        null === f ? f = Bh(c) : (g = f.cachePool, null !== g ? (h = th._currentValue, g = g.parent !== h ? { parent: h, pool: h } : g) : g = Ch(), f = { baseLanes: f.baseLanes | c, cachePool: g });
        e.memoizedState = f;
        e.childLanes = a.childLanes & ~c;
        b.memoizedState = Ah;
        return d;
      }
      Ke(b);
      e = a.child;
      a = e.sibling;
      d = ue(e, { mode: "visible", children: d.children });
      0 === (b.mode & 1) && (d.lanes = c);
      d.return = b;
      d.sibling = null;
      null !== a && (c = b.deletions, null === c ? (b.deletions = [a], b.flags |= 16) : c.push(a));
      b.child = d;
      b.memoizedState = null;
      return d;
    }
    function Fh(a, b) {
      b = Hh({ mode: "visible", children: b }, a.mode, 0, null);
      b.return = a;
      return a.child = b;
    }
    function Eh(a, b, c, d) {
      var e = a.mode, f = a.child;
      b = { mode: "hidden", children: b };
      0 === (e & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = b) : f = Hh(b, e, 0, null);
      c = ye(c, e, d, null);
      f.return = a;
      c.return = a;
      f.sibling = c;
      a.child = f;
      return c;
    }
    function Ih(a, b, c, d) {
      null !== d && Jd(d);
      Ae(b, a.child, null, c);
      a = Fh(b, b.pendingProps.children);
      a.flags |= 2;
      b.memoizedState = null;
      return a;
    }
    function Gh(a, b, c, d, e, f, g) {
      if (c) {
        if (b.flags & 256)
          return Ke(b), b.flags &= -257, f = Xg(Error(u(422))), Ih(a, b, g, f);
        if (null !== b.memoizedState)
          return Ne(b), b.child = a.child, b.flags |= 128, null;
        Ne(b);
        f = d.fallback;
        e = b.mode;
        d = Hh({ mode: "visible", children: d.children }, e, 0, null);
        f = ye(f, e, g, null);
        f.flags |= 2;
        d.return = b;
        f.return = b;
        d.sibling = f;
        b.child = d;
        0 !== (b.mode & 1) && Ae(b, a.child, null, g);
        b.child.memoizedState = Bh(g);
        b.memoizedState = Ah;
        return f;
      }
      Ke(b);
      if (0 === (b.mode & 1))
        return Ih(a, b, g, null);
      if ("$!" === e.data) {
        f = e.nextSibling && e.nextSibling.dataset;
        if (f)
          var h = f.dgst;
        f = h;
        d = Error(u(419));
        d.digest = f;
        f = Xg(d, f, void 0);
        return Ih(a, b, g, f);
      }
      h = 0 !== (g & a.childLanes);
      if (ag || h) {
        d = Q;
        if (null !== d) {
          e = g & -g;
          if (0 !== (e & 42))
            e = 1;
          else
            switch (e) {
              case 2:
                e = 1;
                break;
              case 8:
                e = 4;
                break;
              case 32:
                e = 16;
                break;
              case 128:
              case 256:
              case 512:
              case 1024:
              case 2048:
              case 4096:
              case 8192:
              case 16384:
              case 32768:
              case 65536:
              case 131072:
              case 262144:
              case 524288:
              case 1048576:
              case 2097152:
              case 4194304:
              case 8388608:
              case 16777216:
              case 33554432:
              case 67108864:
                e = 64;
                break;
              case 536870912:
                e = 268435456;
                break;
              default:
                e = 0;
            }
          e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
          if (0 !== e && e !== f.retryLane)
            throw f.retryLane = e, Sd(a, e), kg(d, a, e), fh;
        }
        Jh();
        return Ih(a, b, g, null);
      }
      if ("$?" === e.data)
        return b.flags |= 128, b.child = a.child, b = Kh.bind(null, a), e._reactRetry = b, null;
      a = f.treeContext;
      J = ud(e.nextSibling);
      I = b;
      K = true;
      nd = null;
      od = false;
      null !== a && (ed[fd++] = hd, ed[fd++] = id, ed[fd++] = gd, hd = a.id, id = a.overflow, gd = b);
      b = Fh(b, d.children);
      b.flags |= 4096;
      return b;
    }
    function Lh(a, b, c) {
      a.lanes |= b;
      var d = a.alternate;
      null !== d && (d.lanes |= b);
      Mh(a.return, b, c);
    }
    function Nh(a, b, c, d, e) {
      var f = a.memoizedState;
      null === f ? a.memoizedState = { isBackwards: b, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: e } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
    }
    function Oh(a, b, c) {
      var d = b.pendingProps, e = d.revealOrder, f = d.tail;
      gh(a, b, d.children, c);
      d = Le.current;
      if (0 !== (d & 2))
        d = d & 1 | 2, b.flags |= 128;
      else {
        if (null !== a && 0 !== (a.flags & 128))
          a:
            for (a = b.child; null !== a; ) {
              if (13 === a.tag)
                null !== a.memoizedState && Lh(a, c, b);
              else if (19 === a.tag)
                Lh(a, c, b);
              else if (null !== a.child) {
                a.child.return = a;
                a = a.child;
                continue;
              }
              if (a === b)
                break a;
              for (; null === a.sibling; ) {
                if (null === a.return || a.return === b)
                  break a;
                a = a.return;
              }
              a.sibling.return = a.return;
              a = a.sibling;
            }
        d &= 1;
      }
      E(Le, d);
      if (0 === (b.mode & 1))
        b.memoizedState = null;
      else
        switch (e) {
          case "forwards":
            c = b.child;
            for (e = null; null !== c; )
              a = c.alternate, null !== a && null === Pe(a) && (e = c), c = c.sibling;
            c = e;
            null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
            Nh(b, false, e, c, f);
            break;
          case "backwards":
            c = null;
            e = b.child;
            for (b.child = null; null !== e; ) {
              a = e.alternate;
              if (null !== a && null === Pe(a)) {
                b.child = e;
                break;
              }
              a = e.sibling;
              e.sibling = c;
              c = e;
              e = a;
            }
            Nh(b, true, c, null, f);
            break;
          case "together":
            Nh(b, false, null, null, void 0);
            break;
          default:
            b.memoizedState = null;
        }
      return b.child;
    }
    function wh(a, b) {
      0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
    }
    function jh(a, b, c) {
      null !== a && (b.dependencies = a.dependencies);
      be |= b.lanes;
      if (0 === (c & b.childLanes))
        return null;
      if (null !== a && b.child !== a.child)
        throw Error(u(153));
      if (null !== b.child) {
        a = b.child;
        c = ue(a, a.pendingProps);
        b.child = c;
        for (c.return = b; null !== a.sibling; )
          a = a.sibling, c = c.sibling = ue(a, a.pendingProps), c.return = b;
        c.sibling = null;
      }
      return b.child;
    }
    function Ph(a, b, c) {
      switch (b.tag) {
        case 3:
          yh(b);
          Qh(b, th, a.memoizedState.cache);
          Id();
          break;
        case 27:
        case 5:
          Pa(b);
          break;
        case 1:
          Tc(b.type) && Xc(b);
          break;
        case 4:
          La(b, b.stateNode.containerInfo);
          break;
        case 10:
          Qh(b, b.type._context, b.memoizedProps.value);
          break;
        case 13:
          var d = b.memoizedState;
          if (null !== d) {
            if (null !== d.dehydrated)
              return Ke(b), b.flags |= 128, null;
            if (0 !== (c & b.child.childLanes))
              return Dh(a, b, c);
            Ke(b);
            a = jh(a, b, c);
            return null !== a ? a.sibling : null;
          }
          Ke(b);
          break;
        case 19:
          d = 0 !== (c & b.childLanes);
          if (0 !== (a.flags & 128)) {
            if (d)
              return Oh(a, b, c);
            b.flags |= 128;
          }
          var e = b.memoizedState;
          null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
          E(Le, Le.current);
          if (d)
            break;
          else
            return null;
        case 22:
        case 23:
          return b.lanes = 0, oh(a, b, c);
        case 24:
          Qh(b, th, a.memoizedState.cache);
      }
      return jh(a, b, c);
    }
    var Rh = ka(null);
    var Sh = null;
    var Th = null;
    var Uh = null;
    function Vh() {
      Uh = Th = Sh = null;
    }
    function Qh(a, b, c) {
      E(Rh, b._currentValue);
      b._currentValue = c;
    }
    function Wh(a) {
      var b = Rh.current;
      a._currentValue = b === Ca ? a._defaultValue : b;
      D(Rh);
    }
    function Mh(a, b, c) {
      for (; null !== a; ) {
        var d = a.alternate;
        (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
        if (a === c)
          break;
        a = a.return;
      }
    }
    function Xh(a, b, c) {
      var d = a.child;
      null !== d && (d.return = a);
      for (; null !== d; ) {
        var e = d.dependencies;
        if (null !== e) {
          var f = d.child;
          for (var g = e.firstContext; null !== g; ) {
            if (g.context === b) {
              if (1 === d.tag) {
                g = Xd(c & -c);
                g.tag = 2;
                var h = d.updateQueue;
                if (null !== h) {
                  h = h.shared;
                  var k = h.pending;
                  null === k ? g.next = g : (g.next = k.next, k.next = g);
                  h.pending = g;
                }
              }
              d.lanes |= c;
              g = d.alternate;
              null !== g && (g.lanes |= c);
              Mh(d.return, c, a);
              e.lanes |= c;
              break;
            }
            g = g.next;
          }
        } else if (10 === d.tag)
          f = d.type === a.type ? null : d.child;
        else if (18 === d.tag) {
          f = d.return;
          if (null === f)
            throw Error(u(341));
          f.lanes |= c;
          e = f.alternate;
          null !== e && (e.lanes |= c);
          Mh(f, c, a);
          f = d.sibling;
        } else
          f = d.child;
        if (null !== f)
          f.return = d;
        else
          for (f = d; null !== f; ) {
            if (f === a) {
              f = null;
              break;
            }
            d = f.sibling;
            if (null !== d) {
              d.return = f.return;
              f = d;
              break;
            }
            f = f.return;
          }
        d = f;
      }
    }
    function ih(a, b) {
      Sh = a;
      Uh = Th = null;
      a = a.dependencies;
      null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (ag = true), a.firstContext = null);
    }
    function Wf(a) {
      return Yh(Sh, a);
    }
    function ze(a, b, c) {
      null === Sh && ih(a, c);
      return Yh(a, b);
    }
    function Yh(a, b) {
      var c = b._currentValue;
      if (Uh !== b)
        if (b = { context: b, memoizedValue: c, next: null }, null === Th) {
          if (null === a)
            throw Error(u(308));
          Th = b;
          a.dependencies = { lanes: 0, firstContext: b };
        } else
          Th = Th.next = b;
      return c;
    }
    var Zh = "undefined" !== typeof AbortController ? AbortController : function() {
      var a = [], b = this.signal = { aborted: false, addEventListener: function(c, d) {
        a.push(d);
      } };
      this.abort = function() {
        b.aborted = true;
        a.forEach(function(c) {
          return c();
        });
      };
    };
    var $h = ba.unstable_scheduleCallback;
    var ai = ba.unstable_NormalPriority;
    var th = { $$typeof: ra, Consumer: null, Provider: null, _currentValue: null, _currentValue2: null, _threadCount: 0, _defaultValue: null, _globalName: null };
    function Kg() {
      return { controller: new Zh(), data: /* @__PURE__ */ new Map(), refCount: 0 };
    }
    function bi(a) {
      a.refCount--;
      0 === a.refCount && $h(ai, function() {
        a.controller.abort();
      });
    }
    var ci = da.ReactCurrentBatchConfig;
    var di = ka(null);
    function sh() {
      var a = di.current;
      return null !== a ? a : Q.pooledCache;
    }
    function rh(a, b) {
      null === b ? E(di, di.current) : E(di, b.pool);
    }
    function Ch() {
      var a = sh();
      return null === a ? null : { parent: th._currentValue, pool: a };
    }
    function ei(a) {
      a.flags |= 4;
    }
    function fi(a) {
      a.flags |= 2097664;
    }
    function gi(a, b) {
      if ("stylesheet" !== b.type || 0 !== (b.state.loading & 4))
        a.flags &= -16777217;
      else if (a.flags |= 16777216, 0 === (N & 42) && (b = "stylesheet" === b.type && 0 === (b.state.loading & 3) ? false : true, !b))
        if (hi())
          a.flags |= 8192;
        else
          throw le = he, ge;
    }
    function ii(a, b) {
      null !== b ? a.flags |= 4 : a.flags & 16384 && (b = 22 !== a.tag ? pb() : 1073741824, a.lanes |= b);
    }
    function ji(a, b) {
      if (!K)
        switch (a.tailMode) {
          case "hidden":
            b = a.tail;
            for (var c = null; null !== b; )
              null !== b.alternate && (c = b), b = b.sibling;
            null === c ? a.tail = null : c.sibling = null;
            break;
          case "collapsed":
            c = a.tail;
            for (var d = null; null !== c; )
              null !== c.alternate && (d = c), c = c.sibling;
            null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
        }
    }
    function W(a) {
      var b = null !== a.alternate && a.alternate.child === a.child, c = 0, d = 0;
      if (b)
        for (var e = a.child; null !== e; )
          c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 31457280, d |= e.flags & 31457280, e.return = a, e = e.sibling;
      else
        for (e = a.child; null !== e; )
          c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
      a.subtreeFlags |= d;
      a.childLanes = c;
      return b;
    }
    function ki(a, b, c) {
      var d = b.pendingProps;
      md(b);
      switch (b.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return W(b), null;
        case 1:
          return Tc(b.type) && Uc(), W(b), null;
        case 3:
          c = b.stateNode;
          d = null;
          null !== a && (d = a.memoizedState.cache);
          b.memoizedState.cache !== d && (b.flags |= 2048);
          Wh(th);
          Oa();
          D(Qc);
          D(Pc);
          c.pendingContext && (c.context = c.pendingContext, c.pendingContext = null);
          if (null === a || null === a.child)
            Fd(b) ? ei(b) : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== nd && (li(nd), nd = null));
          W(b);
          return null;
        case 26:
          c = b.memoizedState;
          if (null === a)
            ei(b), null !== b.ref && fi(b), null !== c ? (W(b), gi(b, c)) : (W(b), b.flags &= -16777217);
          else {
            var e = a.memoizedState;
            c !== e && ei(b);
            a.ref !== b.ref && fi(b);
            null !== c ? (W(b), c === e ? b.flags &= -16777217 : gi(b, c)) : (a.memoizedProps !== d && ei(b), W(b), b.flags &= -16777217);
          }
          return null;
        case 27:
          Qa(b);
          c = Ia.current;
          e = b.type;
          if (null !== a && null != b.stateNode)
            a.memoizedProps !== d && ei(b), a.ref !== b.ref && fi(b);
          else {
            if (!d) {
              if (null === b.stateNode)
                throw Error(u(166));
              W(b);
              return null;
            }
            a = Ga.current;
            Fd(b) ? Ad(b, a) : (a = mi(e, d, c), b.stateNode = a, ei(b));
            null !== b.ref && fi(b);
          }
          W(b);
          return null;
        case 5:
          Qa(b);
          c = b.type;
          if (null !== a && null != b.stateNode)
            a.memoizedProps !== d && ei(b), a.ref !== b.ref && fi(b);
          else {
            if (!d) {
              if (null === b.stateNode)
                throw Error(u(166));
              W(b);
              return null;
            }
            a = Ga.current;
            if (Fd(b))
              Ad(b, a) && ei(b);
            else {
              e = ni(Ia.current);
              switch (a) {
                case 1:
                  a = e.createElementNS("http://www.w3.org/2000/svg", c);
                  break;
                case 2:
                  a = e.createElementNS("http://www.w3.org/1998/Math/MathML", c);
                  break;
                default:
                  switch (c) {
                    case "svg":
                      a = e.createElementNS("http://www.w3.org/2000/svg", c);
                      break;
                    case "math":
                      a = e.createElementNS("http://www.w3.org/1998/Math/MathML", c);
                      break;
                    case "script":
                      a = e.createElement("div");
                      a.innerHTML = "<script></script>";
                      a = a.removeChild(a.firstChild);
                      break;
                    case "select":
                      a = "string" === typeof d.is ? e.createElement("select", { is: d.is }) : e.createElement("select");
                      d.multiple ? a.multiple = true : d.size && (a.size = d.size);
                      break;
                    default:
                      a = "string" === typeof d.is ? e.createElement(c, { is: d.is }) : e.createElement(c);
                  }
              }
              a[xb] = b;
              a[yb] = d;
              a:
                for (e = b.child; null !== e; ) {
                  if (5 === e.tag || 6 === e.tag)
                    a.appendChild(e.stateNode);
                  else if (4 !== e.tag && 27 !== e.tag && null !== e.child) {
                    e.child.return = e;
                    e = e.child;
                    continue;
                  }
                  if (e === b)
                    break a;
                  for (; null === e.sibling; ) {
                    if (null === e.return || e.return === b)
                      break a;
                    e = e.return;
                  }
                  e.sibling.return = e.return;
                  e = e.sibling;
                }
              b.stateNode = a;
              a:
                switch (oi(a, c, d), c) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    a = !!d.autoFocus;
                    break a;
                  case "img":
                    a = true;
                    break a;
                  default:
                    a = false;
                }
              a && ei(b);
            }
            null !== b.ref && fi(b);
          }
          W(b);
          b.flags &= -16777217;
          return null;
        case 6:
          if (a && null != b.stateNode)
            a.memoizedProps !== d && ei(b);
          else {
            if ("string" !== typeof d && null === b.stateNode)
              throw Error(u(166));
            a = Ia.current;
            if (Fd(b)) {
              a: {
                a = b.stateNode;
                c = b.memoizedProps;
                a[xb] = b;
                if (d = a.nodeValue !== c) {
                  if (e = I, null !== e)
                    switch (e.tag) {
                      case 3:
                        e = 0 !== (e.mode & 1);
                        Cd(a.nodeValue, c, e);
                        if (e) {
                          a = false;
                          break a;
                        }
                        break;
                      case 27:
                      case 5:
                        var f = 0 !== (e.mode & 1);
                        true !== e.memoizedProps.suppressHydrationWarning && Cd(a.nodeValue, c, f);
                        if (f) {
                          a = false;
                          break a;
                        }
                    }
                }
                a = d;
              }
              a && ei(b);
            } else
              a = ni(a).createTextNode(d), a[xb] = b, b.stateNode = a;
          }
          W(b);
          return null;
        case 13:
          Oe(b);
          d = b.memoizedState;
          if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
            if (K && null !== J && 0 !== (b.mode & 1) && 0 === (b.flags & 128))
              Hd(), Id(), b.flags |= 384, e = false;
            else if (e = Fd(b), null !== d && null !== d.dehydrated) {
              if (null === a) {
                if (!e)
                  throw Error(u(318));
                e = b.memoizedState;
                e = null !== e ? e.dehydrated : null;
                if (!e)
                  throw Error(u(317));
                e[xb] = b;
              } else
                Id(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
              W(b);
              e = false;
            } else
              null !== nd && (li(nd), nd = null), e = true;
            if (!e)
              return b.flags & 256 ? b : null;
          }
          if (0 !== (b.flags & 128))
            return b.lanes = c, b;
          c = null !== d;
          a = null !== a && null !== a.memoizedState;
          c && (d = b.child, e = null, null !== d.alternate && null !== d.alternate.memoizedState && null !== d.alternate.memoizedState.cachePool && (e = d.alternate.memoizedState.cachePool.pool), f = null, null !== d.memoizedState && null !== d.memoizedState.cachePool && (f = d.memoizedState.cachePool.pool), f !== e && (d.flags |= 2048));
          c !== a && c && (b.child.flags |= 8192);
          ii(b, b.updateQueue);
          W(b);
          return null;
        case 4:
          return Oa(), null === a && pi(b.stateNode.containerInfo), W(b), null;
        case 10:
          return Wh(b.type._context), W(b), null;
        case 17:
          return Tc(b.type) && Uc(), W(b), null;
        case 19:
          D(Le);
          e = b.memoizedState;
          if (null === e)
            return W(b), null;
          d = 0 !== (b.flags & 128);
          f = e.rendering;
          if (null === f)
            if (d)
              ji(e, false);
            else {
              if (0 !== qi || null !== a && 0 !== (a.flags & 128))
                for (a = b.child; null !== a; ) {
                  f = Pe(a);
                  if (null !== f) {
                    b.flags |= 128;
                    ji(e, false);
                    a = f.updateQueue;
                    b.updateQueue = a;
                    ii(b, a);
                    b.subtreeFlags = 0;
                    a = c;
                    for (c = b.child; null !== c; )
                      ri(c, a), c = c.sibling;
                    E(Le, Le.current & 1 | 2);
                    return b.child;
                  }
                  a = a.sibling;
                }
              null !== e.tail && Va() > si && (b.flags |= 128, d = true, ji(e, false), b.lanes = 8388608);
            }
          else {
            if (!d)
              if (a = Pe(f), null !== a) {
                if (b.flags |= 128, d = true, a = a.updateQueue, b.updateQueue = a, ii(b, a), ji(e, true), null === e.tail && "hidden" === e.tailMode && !f.alternate && !K)
                  return W(b), null;
              } else
                2 * Va() - e.renderingStartTime > si && 1073741824 !== c && (b.flags |= 128, d = true, ji(e, false), b.lanes = 8388608);
            e.isBackwards ? (f.sibling = b.child, b.child = f) : (a = e.last, null !== a ? a.sibling = f : b.child = f, e.last = f);
          }
          if (null !== e.tail)
            return b = e.tail, e.rendering = b, e.tail = b.sibling, e.renderingStartTime = Va(), b.sibling = null, a = Le.current, E(Le, d ? a & 1 | 2 : a & 1), b;
          W(b);
          return null;
        case 22:
        case 23:
          return Oe(b), He(), d = null !== b.memoizedState, null !== a ? null !== a.memoizedState !== d && (b.flags |= 8192) : d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== (c & 1073741824) && 0 === (b.flags & 128) && (W(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : W(b), c = b.updateQueue, null !== c && ii(b, c.retryQueue), c = null, null !== a && null !== a.memoizedState && null !== a.memoizedState.cachePool && (c = a.memoizedState.cachePool.pool), d = null, null !== b.memoizedState && null !== b.memoizedState.cachePool && (d = b.memoizedState.cachePool.pool), d !== c && (b.flags |= 2048), null !== a && D(di), null;
        case 24:
          return c = null, null !== a && (c = a.memoizedState.cache), b.memoizedState.cache !== c && (b.flags |= 2048), Wh(th), W(b), null;
        case 25:
          return null;
      }
      throw Error(u(156, b.tag));
    }
    function ti(a, b) {
      md(b);
      switch (b.tag) {
        case 1:
          return Tc(b.type) && Uc(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
        case 3:
          return Wh(th), Oa(), D(Qc), D(Pc), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;
        case 26:
        case 27:
        case 5:
          return Qa(b), null;
        case 13:
          Oe(b);
          a = b.memoizedState;
          if (null !== a && null !== a.dehydrated) {
            if (null === b.alternate)
              throw Error(u(340));
            Id();
          }
          a = b.flags;
          return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
        case 19:
          return D(Le), null;
        case 4:
          return Oa(), null;
        case 10:
          return Wh(b.type._context), null;
        case 22:
        case 23:
          return Oe(b), He(), null !== a && D(di), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
        case 24:
          return Wh(th), null;
        case 25:
          return null;
        default:
          return null;
      }
    }
    function ui(a, b) {
      md(b);
      switch (b.tag) {
        case 1:
          a = b.type.childContextTypes;
          null !== a && void 0 !== a && Uc();
          break;
        case 3:
          Wh(th);
          Oa();
          D(Qc);
          D(Pc);
          break;
        case 26:
        case 27:
        case 5:
          Qa(b);
          break;
        case 4:
          Oa();
          break;
        case 13:
          Oe(b);
          break;
        case 19:
          D(Le);
          break;
        case 10:
          Wh(b.type._context);
          break;
        case 22:
        case 23:
          Oe(b);
          He();
          null !== a && D(di);
          break;
        case 24:
          Wh(th);
      }
    }
    function vi(a, b, c) {
      var d = Array.prototype.slice.call(arguments, 3);
      try {
        b.apply(c, d);
      } catch (e) {
        this.onError(e);
      }
    }
    var wi = false;
    var xi = null;
    var yi = false;
    var zi = null;
    var Ai = { onError: function(a) {
      wi = true;
      xi = a;
    } };
    function Bi(a, b, c, d, e, f, g, h, k) {
      wi = false;
      xi = null;
      vi.apply(Ai, arguments);
    }
    function Ci(a, b, c, d, e, f, g, h, k) {
      Bi.apply(this, arguments);
      if (wi) {
        if (wi) {
          var p = xi;
          wi = false;
          xi = null;
        } else
          throw Error(u(198));
        yi || (yi = true, zi = p);
      }
    }
    var Di = false;
    var Ei = false;
    var Fi = "function" === typeof WeakSet ? WeakSet : Set;
    var Gi = null;
    function Hi(a, b) {
      try {
        var c = a.ref;
        if (null !== c) {
          var d = a.stateNode;
          switch (a.tag) {
            case 26:
            case 27:
            case 5:
              var e = d;
              break;
            default:
              e = d;
          }
          "function" === typeof c ? a.refCleanup = c(e) : c.current = e;
        }
      } catch (f) {
        X(a, b, f);
      }
    }
    function Ii(a, b) {
      var c = a.ref, d = a.refCleanup;
      if (null !== c)
        if ("function" === typeof d)
          try {
            d();
          } catch (e) {
            X(a, b, e);
          } finally {
            a.refCleanup = null, a = a.alternate, null != a && (a.refCleanup = null);
          }
        else if ("function" === typeof c)
          try {
            c(null);
          } catch (e) {
            X(a, b, e);
          }
        else
          c.current = null;
    }
    function Ji(a, b, c) {
      try {
        c();
      } catch (d) {
        X(a, b, d);
      }
    }
    var Ki = false;
    function Li(a, b) {
      Mi = Ni;
      a = Oi();
      if (Pi(a)) {
        if ("selectionStart" in a)
          var c = { start: a.selectionStart, end: a.selectionEnd };
        else
          a: {
            c = (c = a.ownerDocument) && c.defaultView || window;
            var d = c.getSelection && c.getSelection();
            if (d && 0 !== d.rangeCount) {
              c = d.anchorNode;
              var e = d.anchorOffset, f = d.focusNode;
              d = d.focusOffset;
              try {
                c.nodeType, f.nodeType;
              } catch (A) {
                c = null;
                break a;
              }
              var g = 0, h = -1, k = -1, p = 0, r = 0, w = a, q = null;
              b:
                for (; ; ) {
                  for (var t; ; ) {
                    w !== c || 0 !== e && 3 !== w.nodeType || (h = g + e);
                    w !== f || 0 !== d && 3 !== w.nodeType || (k = g + d);
                    3 === w.nodeType && (g += w.nodeValue.length);
                    if (null === (t = w.firstChild))
                      break;
                    q = w;
                    w = t;
                  }
                  for (; ; ) {
                    if (w === a)
                      break b;
                    q === c && ++p === e && (h = g);
                    q === f && ++r === d && (k = g);
                    if (null !== (t = w.nextSibling))
                      break;
                    w = q;
                    q = w.parentNode;
                  }
                  w = t;
                }
              c = -1 === h || -1 === k ? null : { start: h, end: k };
            } else
              c = null;
          }
        c = c || { start: 0, end: 0 };
      } else
        c = null;
      Qi = { focusedElem: a, selectionRange: c };
      Ni = false;
      for (Gi = b; null !== Gi; )
        if (b = Gi, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a)
          a.return = b, Gi = a;
        else
          for (; null !== Gi; ) {
            b = Gi;
            try {
              var y = b.alternate, B = b.flags;
              switch (b.tag) {
                case 0:
                  if (0 !== (B & 4)) {
                    var O = b.updateQueue, P = null !== O ? O.events : null;
                    if (null !== P)
                      for (a = 0; a < P.length; a++) {
                        var m = P[a];
                        m.ref.impl = m.nextImpl;
                      }
                  }
                  break;
                case 11:
                case 15:
                  break;
                case 1:
                  if (0 !== (B & 1024) && null !== y) {
                    var l = y.memoizedProps, n = y.memoizedState, v = b.stateNode, x = v.getSnapshotBeforeUpdate(b.elementType === b.type ? l : Pg(b.type, l), n);
                    v.__reactInternalSnapshotBeforeUpdate = x;
                  }
                  break;
                case 3:
                  0 !== (B & 1024) && Ri(b.stateNode.containerInfo);
                  break;
                case 5:
                case 26:
                case 27:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  if (0 !== (B & 1024))
                    throw Error(u(163));
              }
            } catch (A) {
              X(
                b,
                b.return,
                A
              );
            }
            a = b.sibling;
            if (null !== a) {
              a.return = b.return;
              Gi = a;
              break;
            }
            Gi = b.return;
          }
      y = Ki;
      Ki = false;
      return y;
    }
    function Si(a, b, c) {
      var d = b.updateQueue;
      d = null !== d ? d.lastEffect : null;
      if (null !== d) {
        var e = d = d.next;
        do {
          if ((e.tag & a) === a) {
            var f = e.inst, g = f.destroy;
            void 0 !== g && (f.destroy = void 0, Ji(b, c, g));
          }
          e = e.next;
        } while (e !== d);
      }
    }
    function Ti(a, b) {
      b = b.updateQueue;
      b = null !== b ? b.lastEffect : null;
      if (null !== b) {
        var c = b = b.next;
        do {
          if ((c.tag & a) === a) {
            var d = c.create, e = c.inst;
            d = d();
            e.destroy = d;
          }
          c = c.next;
        } while (c !== b);
      }
    }
    function Ui(a, b) {
      try {
        Ti(b, a);
      } catch (c) {
        X(a, a.return, c);
      }
    }
    function Vi(a) {
      var b = a.updateQueue;
      if (null !== b) {
        var c = a.stateNode;
        try {
          de(b, c);
        } catch (d) {
          X(a, a.return, d);
        }
      }
    }
    function Wi(a) {
      var b = a.type, c = a.memoizedProps, d = a.stateNode;
      try {
        a:
          switch (b) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              c.autoFocus && d.focus();
              break a;
            case "img":
              c.src && (d.src = c.src);
          }
      } catch (e) {
        X(a, a.return, e);
      }
    }
    function Xi(a, b, c) {
      var d = c.flags;
      switch (c.tag) {
        case 0:
        case 11:
        case 15:
          Yi(a, c);
          d & 4 && Ui(c, 5);
          break;
        case 1:
          Yi(a, c);
          if (d & 4)
            if (a = c.stateNode, null === b)
              try {
                a.componentDidMount();
              } catch (h) {
                X(c, c.return, h);
              }
            else {
              var e = c.elementType === c.type ? b.memoizedProps : Pg(c.type, b.memoizedProps);
              b = b.memoizedState;
              try {
                a.componentDidUpdate(e, b, a.__reactInternalSnapshotBeforeUpdate);
              } catch (h) {
                X(c, c.return, h);
              }
            }
          d & 64 && Vi(c);
          d & 512 && Hi(c, c.return);
          break;
        case 3:
          Yi(a, c);
          if (d & 64 && (d = c.updateQueue, null !== d)) {
            a = null;
            if (null !== c.child)
              switch (c.child.tag) {
                case 27:
                case 5:
                  a = c.child.stateNode;
                  break;
                case 1:
                  a = c.child.stateNode;
              }
            try {
              de(d, a);
            } catch (h) {
              X(c, c.return, h);
            }
          }
          break;
        case 26:
          Yi(a, c);
          d & 512 && Hi(c, c.return);
          break;
        case 27:
        case 5:
          Yi(a, c);
          null === b && d & 4 && Wi(c);
          d & 512 && Hi(c, c.return);
          break;
        case 12:
          Yi(a, c);
          break;
        case 13:
          Yi(a, c);
          d & 4 && Zi(a, c);
          break;
        case 22:
          if (0 !== (c.mode & 1)) {
            if (e = null !== c.memoizedState || Di, !e) {
              b = null !== b && null !== b.memoizedState || Ei;
              var f = Di, g = Ei;
              Di = e;
              (Ei = b) && !g ? $i(a, c, 0 !== (c.subtreeFlags & 8772)) : Yi(a, c);
              Di = f;
              Ei = g;
            }
          } else
            Yi(a, c);
          d & 512 && ("manual" === c.memoizedProps.mode ? Hi(c, c.return) : Ii(c, c.return));
          break;
        default:
          Yi(a, c);
      }
    }
    function aj(a) {
      var b = a.alternate;
      null !== b && (a.alternate = null, aj(b));
      a.child = null;
      a.deletions = null;
      a.sibling = null;
      5 === a.tag && (b = a.stateNode, null !== b && Gb(b));
      a.stateNode = null;
      a.return = null;
      a.dependencies = null;
      a.memoizedProps = null;
      a.memoizedState = null;
      a.pendingProps = null;
      a.stateNode = null;
      a.updateQueue = null;
    }
    function bj(a) {
      return 5 === a.tag || 3 === a.tag || 26 === a.tag || 27 === a.tag || 4 === a.tag;
    }
    function cj(a) {
      a:
        for (; ; ) {
          for (; null === a.sibling; ) {
            if (null === a.return || bj(a.return))
              return null;
            a = a.return;
          }
          a.sibling.return = a.return;
          for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 27 !== a.tag && 18 !== a.tag; ) {
            if (a.flags & 2)
              continue a;
            if (null === a.child || 4 === a.tag)
              continue a;
            else
              a.child.return = a, a = a.child;
          }
          if (!(a.flags & 2))
            return a.stateNode;
        }
    }
    function dj(a, b, c) {
      var d = a.tag;
      if (5 === d || 6 === d)
        a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = Dd));
      else if (4 !== d && 27 !== d && (a = a.child, null !== a))
        for (dj(a, b, c), a = a.sibling; null !== a; )
          dj(a, b, c), a = a.sibling;
    }
    function ej(a, b, c) {
      var d = a.tag;
      if (5 === d || 6 === d)
        a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);
      else if (4 !== d && 27 !== d && (a = a.child, null !== a))
        for (ej(a, b, c), a = a.sibling; null !== a; )
          ej(a, b, c), a = a.sibling;
    }
    var fj = null;
    var gj = false;
    function hj(a, b, c) {
      for (c = c.child; null !== c; )
        ij(a, b, c), c = c.sibling;
    }
    function ij(a, b, c) {
      if (cb && "function" === typeof cb.onCommitFiberUnmount)
        try {
          cb.onCommitFiberUnmount(bb, c);
        } catch (k) {
        }
      switch (c.tag) {
        case 26:
          Ei || Ii(c, b);
          hj(a, b, c);
          c.memoizedState ? c.memoizedState.count-- : c.stateNode && (c = c.stateNode, c.parentNode.removeChild(c));
          break;
        case 27:
          Ei || Ii(c, b);
          var d = fj, e = gj;
          fj = c.stateNode;
          hj(a, b, c);
          c = c.stateNode;
          for (a = c.attributes; a.length; )
            c.removeAttributeNode(a[0]);
          Gb(c);
          fj = d;
          gj = e;
          break;
        case 5:
          Ei || Ii(c, b);
        case 6:
          d = fj;
          e = gj;
          fj = null;
          hj(a, b, c);
          fj = d;
          gj = e;
          null !== fj && (gj ? (a = fj, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : fj.removeChild(c.stateNode));
          break;
        case 18:
          null !== fj && (gj ? (a = fj, c = c.stateNode, 8 === a.nodeType ? jj(a.parentNode, c) : 1 === a.nodeType && jj(a, c), kj(a)) : jj(fj, c.stateNode));
          break;
        case 4:
          d = fj;
          e = gj;
          fj = c.stateNode.containerInfo;
          gj = true;
          hj(a, b, c);
          fj = d;
          gj = e;
          break;
        case 0:
        case 11:
        case 14:
        case 15:
          if (!Ei && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
            e = d = d.next;
            do {
              var f = e.tag, g = e.inst, h = g.destroy;
              void 0 !== h && (0 !== (f & 2) ? (g.destroy = void 0, Ji(c, b, h)) : 0 !== (f & 4) && (g.destroy = void 0, Ji(c, b, h)));
              e = e.next;
            } while (e !== d);
          }
          hj(a, b, c);
          break;
        case 1:
          if (!Ei && (Ii(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount))
            try {
              d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
            } catch (k) {
              X(c, b, k);
            }
          hj(a, b, c);
          break;
        case 21:
          hj(a, b, c);
          break;
        case 22:
          Ii(c, b);
          c.mode & 1 ? (Ei = (d = Ei) || null !== c.memoizedState, hj(a, b, c), Ei = d) : hj(a, b, c);
          break;
        default:
          hj(a, b, c);
      }
    }
    function Zi(a, b) {
      if (null === b.memoizedState && (a = b.alternate, null !== a && (a = a.memoizedState, null !== a && (a = a.dehydrated, null !== a))))
        try {
          kj(a);
        } catch (c) {
          X(b, b.return, c);
        }
    }
    function lj(a) {
      switch (a.tag) {
        case 13:
        case 19:
          var b = a.stateNode;
          null === b && (b = a.stateNode = new Fi());
          return b;
        case 22:
          return a = a.stateNode, b = a._retryCache, null === b && (b = a._retryCache = new Fi()), b;
        default:
          throw Error(u(435, a.tag));
      }
    }
    function mj(a, b) {
      var c = lj(a);
      b.forEach(function(d) {
        var e = nj.bind(null, a, d);
        c.has(d) || (c.add(d), d.then(e, e));
      });
    }
    function oj(a, b) {
      var c = b.deletions;
      if (null !== c)
        for (var d = 0; d < c.length; d++) {
          var e = c[d];
          try {
            var f = a, g = b, h = g;
            a:
              for (; null !== h; ) {
                switch (h.tag) {
                  case 27:
                  case 5:
                    fj = h.stateNode;
                    gj = false;
                    break a;
                  case 3:
                    fj = h.stateNode.containerInfo;
                    gj = true;
                    break a;
                  case 4:
                    fj = h.stateNode.containerInfo;
                    gj = true;
                    break a;
                }
                h = h.return;
              }
            if (null === fj)
              throw Error(u(160));
            ij(f, g, e);
            fj = null;
            gj = false;
            var k = e.alternate;
            null !== k && (k.return = null);
            e.return = null;
          } catch (p) {
            X(e, b, p);
          }
        }
      if (b.subtreeFlags & 12854)
        for (b = b.child; null !== b; )
          pj(b, a), b = b.sibling;
    }
    var qj = null;
    function pj(a, b) {
      var c = a.alternate, d = a.flags;
      switch (a.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          oj(b, a);
          rj(a);
          if (d & 4) {
            try {
              Si(3, a, a.return), Ti(3, a);
            } catch (t) {
              X(a, a.return, t);
            }
            try {
              Si(5, a, a.return);
            } catch (t) {
              X(a, a.return, t);
            }
          }
          break;
        case 1:
          oj(b, a);
          rj(a);
          d & 512 && null !== c && Ii(c, c.return);
          d & 64 && Di && (a = a.updateQueue, null !== a && (c = a.callbacks, null !== c && (d = a.shared.hiddenCallbacks, a.shared.hiddenCallbacks = null === d ? c : d.concat(c))));
          break;
        case 26:
          var e = qj;
          oj(b, a);
          rj(a);
          d & 512 && null !== c && Ii(c, c.return);
          if (d & 4) {
            if (b = null !== c ? c.memoizedState : null, d = a.memoizedState, null === c)
              if (null === d)
                if (null === a.stateNode) {
                  a: {
                    c = a.type;
                    d = a.memoizedProps;
                    b = e.ownerDocument || e;
                    b:
                      switch (c) {
                        case "title":
                          e = b.getElementsByTagName("title")[0];
                          if (!e || e[Fb] || e[xb] || "http://www.w3.org/2000/svg" === e.namespaceURI || e.hasAttribute("itemprop"))
                            e = b.createElement(c), b.head.insertBefore(e, b.querySelector("head > title"));
                          oi(e, c, d);
                          e[xb] = a;
                          Nb(e);
                          c = e;
                          break a;
                        case "link":
                          var f = sj("link", "href", b).get(c + (d.href || ""));
                          if (f) {
                            for (var g = 0; g < f.length; g++)
                              if (e = f[g], e.getAttribute("href") === (null == d.href ? null : d.href) && e.getAttribute("rel") === (null == d.rel ? null : d.rel) && e.getAttribute("title") === (null == d.title ? null : d.title) && e.getAttribute("crossorigin") === (null == d.crossOrigin ? null : d.crossOrigin)) {
                                f.splice(g, 1);
                                break b;
                              }
                          }
                          e = b.createElement(c);
                          oi(e, c, d);
                          b.head.appendChild(e);
                          break;
                        case "meta":
                          if (f = sj("meta", "content", b).get(c + (d.content || ""))) {
                            for (g = 0; g < f.length; g++)
                              if (e = f[g], e.getAttribute("content") === (null == d.content ? null : "" + d.content) && e.getAttribute("name") === (null == d.name ? null : d.name) && e.getAttribute("property") === (null == d.property ? null : d.property) && e.getAttribute("http-equiv") === (null == d.httpEquiv ? null : d.httpEquiv) && e.getAttribute("charset") === (null == d.charSet ? null : d.charSet)) {
                                f.splice(g, 1);
                                break b;
                              }
                          }
                          e = b.createElement(c);
                          oi(e, c, d);
                          b.head.appendChild(e);
                          break;
                        default:
                          throw Error(u(468, c));
                      }
                    e[xb] = a;
                    Nb(e);
                    c = e;
                  }
                  a.stateNode = c;
                } else
                  tj(e, a.type, a.stateNode);
              else
                a.stateNode = uj(e, d, a.memoizedProps);
            else if (b !== d)
              null === b ? null !== c.stateNode && (c = c.stateNode, c.parentNode.removeChild(c)) : b.count--, null === d ? tj(e, a.type, a.stateNode) : uj(e, d, a.memoizedProps);
            else if (null === d && null !== a.stateNode) {
              a.updateQueue = null;
              try {
                var h = a.stateNode, k = a.memoizedProps;
                vj(h, a.type, c.memoizedProps, k);
                h[yb] = k;
              } catch (t) {
                X(a, a.return, t);
              }
            }
          }
          break;
        case 27:
          if (d & 4 && null === a.alternate) {
            e = a.stateNode;
            f = a.memoizedProps;
            for (g = e.firstChild; g; ) {
              var p = g.nextSibling, r = g.nodeName;
              g[Fb] || "HEAD" === r || "BODY" === r || "SCRIPT" === r || "STYLE" === r || "LINK" === r && "stylesheet" === g.rel.toLowerCase() || e.removeChild(g);
              g = p;
            }
            g = a.type;
            for (p = e.attributes; p.length; )
              e.removeAttributeNode(p[0]);
            oi(e, g, f);
            e[xb] = a;
            e[yb] = f;
          }
        case 5:
          oj(b, a);
          rj(a);
          d & 512 && null !== c && Ii(c, c.return);
          if (a.flags & 32) {
            b = a.stateNode;
            try {
              vc(b, "");
            } catch (t) {
              X(a, a.return, t);
            }
          }
          if (d & 4 && (d = a.stateNode, null != d)) {
            b = a.memoizedProps;
            c = null !== c ? c.memoizedProps : b;
            e = a.type;
            a.updateQueue = null;
            try {
              vj(d, e, c, b), d[yb] = b;
            } catch (t) {
              X(a, a.return, t);
            }
          }
          break;
        case 6:
          oj(b, a);
          rj(a);
          if (d & 4) {
            if (null === a.stateNode)
              throw Error(u(162));
            c = a.stateNode;
            d = a.memoizedProps;
            try {
              c.nodeValue = d;
            } catch (t) {
              X(
                a,
                a.return,
                t
              );
            }
          }
          break;
        case 3:
          wj = null;
          e = qj;
          qj = xj(b.containerInfo);
          oj(b, a);
          qj = e;
          rj(a);
          if (d & 4 && null !== c && c.memoizedState.isDehydrated)
            try {
              kj(b.containerInfo);
            } catch (t) {
              X(a, a.return, t);
            }
          break;
        case 4:
          c = qj;
          qj = xj(a.stateNode.containerInfo);
          oj(b, a);
          rj(a);
          qj = c;
          break;
        case 13:
          oj(b, a);
          rj(a);
          a.child.flags & 8192 && null !== a.memoizedState !== (null !== c && null !== c.memoizedState) && (yj = Va());
          d & 4 && (c = a.updateQueue, null !== c && (a.updateQueue = null, mj(a, c)));
          break;
        case 22:
          d & 512 && null !== c && Ii(c, c.return);
          h = null !== a.memoizedState;
          k = null !== c && null !== c.memoizedState;
          if (a.mode & 1) {
            var w = Di, q = Ei;
            Di = w || h;
            Ei = q || k;
            oj(b, a);
            Ei = q;
            Di = w;
          } else
            oj(b, a);
          rj(a);
          b = a.stateNode;
          b._current = a;
          b._visibility &= -3;
          b._visibility |= b._pendingVisibility & 2;
          if (d & 8192 && (b._visibility = h ? b._visibility & -2 : b._visibility | 1, h && (b = Di || Ei, null === c || k || b || 0 !== (a.mode & 1) && zj(a)), null === a.memoizedProps || "manual" !== a.memoizedProps.mode))
            a:
              for (c = null, b = a; ; ) {
                if (5 === b.tag || 26 === b.tag || 27 === b.tag) {
                  if (null === c) {
                    c = b;
                    try {
                      e = b.stateNode, h ? (f = e.style, "function" === typeof f.setProperty ? f.setProperty(
                        "display",
                        "none",
                        "important"
                      ) : f.display = "none") : (g = b.stateNode, p = b.memoizedProps.style, r = void 0 !== p && null !== p && p.hasOwnProperty("display") ? p.display : null, g.style.display = null == r || "boolean" === typeof r ? "" : ("" + r).trim());
                    } catch (t) {
                      X(a, a.return, t);
                    }
                  }
                } else if (6 === b.tag) {
                  if (null === c)
                    try {
                      b.stateNode.nodeValue = h ? "" : b.memoizedProps;
                    } catch (t) {
                      X(a, a.return, t);
                    }
                } else if ((22 !== b.tag && 23 !== b.tag || null === b.memoizedState || b === a) && null !== b.child) {
                  b.child.return = b;
                  b = b.child;
                  continue;
                }
                if (b === a)
                  break a;
                for (; null === b.sibling; ) {
                  if (null === b.return || b.return === a)
                    break a;
                  c === b && (c = null);
                  b = b.return;
                }
                c === b && (c = null);
                b.sibling.return = b.return;
                b = b.sibling;
              }
          d & 4 && (c = a.updateQueue, null !== c && (d = c.retryQueue, null !== d && (c.retryQueue = null, mj(a, d))));
          break;
        case 19:
          oj(b, a);
          rj(a);
          d & 4 && (c = a.updateQueue, null !== c && (a.updateQueue = null, mj(a, c)));
          break;
        case 21:
          break;
        default:
          oj(b, a), rj(a);
      }
    }
    function rj(a) {
      var b = a.flags;
      if (b & 2) {
        try {
          if (27 !== a.tag) {
            b: {
              for (var c = a.return; null !== c; ) {
                if (bj(c)) {
                  var d = c;
                  break b;
                }
                c = c.return;
              }
              throw Error(u(160));
            }
            switch (d.tag) {
              case 27:
                var e = d.stateNode, f = cj(a);
                ej(a, f, e);
                break;
              case 5:
                var g = d.stateNode;
                d.flags & 32 && (vc(g, ""), d.flags &= -33);
                var h = cj(a);
                ej(a, h, g);
                break;
              case 3:
              case 4:
                var k = d.stateNode.containerInfo, p = cj(a);
                dj(a, p, k);
                break;
              default:
                throw Error(u(161));
            }
          }
        } catch (r) {
          X(a, a.return, r);
        }
        a.flags &= -3;
      }
      b & 4096 && (a.flags &= -4097);
    }
    function Yi(a, b) {
      if (b.subtreeFlags & 8772)
        for (b = b.child; null !== b; )
          Xi(a, b.alternate, b), b = b.sibling;
    }
    function zj(a) {
      for (a = a.child; null !== a; ) {
        var b = a;
        switch (b.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            Si(4, b, b.return);
            zj(b);
            break;
          case 1:
            Ii(b, b.return);
            var c = b.stateNode;
            if ("function" === typeof c.componentWillUnmount) {
              var d = b, e = b.return;
              try {
                var f = d;
                c.props = f.memoizedProps;
                c.state = f.memoizedState;
                c.componentWillUnmount();
              } catch (g) {
                X(d, e, g);
              }
            }
            zj(b);
            break;
          case 26:
          case 27:
          case 5:
            Ii(b, b.return);
            zj(b);
            break;
          case 22:
            Ii(b, b.return);
            null === b.memoizedState && zj(b);
            break;
          default:
            zj(b);
        }
        a = a.sibling;
      }
    }
    function $i(a, b, c) {
      c = c && 0 !== (b.subtreeFlags & 8772);
      for (b = b.child; null !== b; ) {
        var d = b.alternate, e = a, f = b, g = f.flags;
        switch (f.tag) {
          case 0:
          case 11:
          case 15:
            $i(e, f, c);
            Ui(f, 4);
            break;
          case 1:
            $i(e, f, c);
            e = f.stateNode;
            if ("function" === typeof e.componentDidMount)
              try {
                e.componentDidMount();
              } catch (k) {
                X(f, f.return, k);
              }
            d = f.updateQueue;
            if (null !== d) {
              var h = d.shared.hiddenCallbacks;
              if (null !== h)
                for (d.shared.hiddenCallbacks = null, d = 0; d < h.length; d++)
                  ce(h[d], e);
            }
            c && g & 64 && Vi(f);
            Hi(f, f.return);
            break;
          case 26:
          case 27:
          case 5:
            $i(e, f, c);
            c && null === d && g & 4 && Wi(f);
            Hi(f, f.return);
            break;
          case 12:
            $i(e, f, c);
            break;
          case 13:
            $i(e, f, c);
            c && g & 4 && Zi(e, f);
            break;
          case 22:
            null === f.memoizedState && $i(e, f, c);
            Hi(f, f.return);
            break;
          default:
            $i(e, f, c);
        }
        b = b.sibling;
      }
    }
    function Aj(a, b) {
      try {
        Ti(b, a);
      } catch (c) {
        X(a, a.return, c);
      }
    }
    function Bj(a, b) {
      var c = null;
      null !== a && null !== a.memoizedState && null !== a.memoizedState.cachePool && (c = a.memoizedState.cachePool.pool);
      a = null;
      null !== b.memoizedState && null !== b.memoizedState.cachePool && (a = b.memoizedState.cachePool.pool);
      a !== c && (null != a && a.refCount++, null != c && bi(c));
    }
    function Cj(a, b) {
      a = null;
      null !== b.alternate && (a = b.alternate.memoizedState.cache);
      b = b.memoizedState.cache;
      b !== a && (b.refCount++, null != a && bi(a));
    }
    function Dj(a, b, c, d) {
      if (b.subtreeFlags & 10256)
        for (b = b.child; null !== b; )
          Ej(a, b, c, d), b = b.sibling;
    }
    function Ej(a, b, c, d) {
      var e = b.flags;
      switch (b.tag) {
        case 0:
        case 11:
        case 15:
          Dj(a, b, c, d);
          e & 2048 && Aj(b, 9);
          break;
        case 3:
          Dj(a, b, c, d);
          e & 2048 && (a = null, null !== b.alternate && (a = b.alternate.memoizedState.cache), b = b.memoizedState.cache, b !== a && (b.refCount++, null != a && bi(a)));
          break;
        case 23:
          break;
        case 22:
          var f = b.stateNode;
          null !== b.memoizedState ? f._visibility & 4 ? Dj(a, b, c, d) : b.mode & 1 ? Fj(a, b) : (f._visibility |= 4, Dj(a, b, c, d)) : f._visibility & 4 ? Dj(a, b, c, d) : (f._visibility |= 4, Gj(a, b, c, d, 0 !== (b.subtreeFlags & 10256)));
          e & 2048 && Bj(
            b.alternate,
            b
          );
          break;
        case 24:
          Dj(a, b, c, d);
          e & 2048 && Cj(b.alternate, b);
          break;
        default:
          Dj(a, b, c, d);
      }
    }
    function Gj(a, b, c, d, e) {
      e = e && 0 !== (b.subtreeFlags & 10256);
      for (b = b.child; null !== b; ) {
        var f = a, g = b, h = c, k = d, p = g.flags;
        switch (g.tag) {
          case 0:
          case 11:
          case 15:
            Gj(f, g, h, k, e);
            Aj(g, 8);
            break;
          case 23:
            break;
          case 22:
            var r = g.stateNode;
            null !== g.memoizedState ? r._visibility & 4 ? Gj(f, g, h, k, e) : g.mode & 1 ? Fj(f, g) : (r._visibility |= 4, Gj(f, g, h, k, e)) : (r._visibility |= 4, Gj(f, g, h, k, e));
            e && p & 2048 && Bj(g.alternate, g);
            break;
          case 24:
            Gj(f, g, h, k, e);
            e && p & 2048 && Cj(g.alternate, g);
            break;
          default:
            Gj(f, g, h, k, e);
        }
        b = b.sibling;
      }
    }
    function Fj(a, b) {
      if (b.subtreeFlags & 10256)
        for (b = b.child; null !== b; ) {
          var c = a, d = b, e = d.flags;
          switch (d.tag) {
            case 22:
              Fj(c, d);
              e & 2048 && Bj(d.alternate, d);
              break;
            case 24:
              Fj(c, d);
              e & 2048 && Cj(d.alternate, d);
              break;
            default:
              Fj(c, d);
          }
          b = b.sibling;
        }
    }
    var Hj = 8192;
    function Ij(a) {
      if (a.subtreeFlags & Hj)
        for (a = a.child; null !== a; )
          Jj(a), a = a.sibling;
    }
    function Jj(a) {
      switch (a.tag) {
        case 26:
          Ij(a);
          a.flags & Hj && null !== a.memoizedState && Kj(qj, a.memoizedState, a.memoizedProps);
          break;
        case 5:
          Ij(a);
          break;
        case 3:
        case 4:
          var b = qj;
          qj = xj(a.stateNode.containerInfo);
          Ij(a);
          qj = b;
          break;
        case 22:
          null === a.memoizedState && (b = a.alternate, null !== b && null !== b.memoizedState ? (b = Hj, Hj = 16777216, Ij(a), Hj = b) : Ij(a));
          break;
        default:
          Ij(a);
      }
    }
    function Lj(a) {
      var b = a.alternate;
      if (null !== b && (a = b.child, null !== a)) {
        b.child = null;
        do
          b = a.sibling, a.sibling = null, a = b;
        while (null !== a);
      }
    }
    function Mj(a) {
      var b = a.deletions;
      if (0 !== (a.flags & 16)) {
        if (null !== b)
          for (var c = 0; c < b.length; c++) {
            var d = b[c];
            Gi = d;
            Nj(d, a);
          }
        Lj(a);
      }
      if (a.subtreeFlags & 10256)
        for (a = a.child; null !== a; )
          Oj(a), a = a.sibling;
    }
    function Oj(a) {
      switch (a.tag) {
        case 0:
        case 11:
        case 15:
          Mj(a);
          a.flags & 2048 && Si(9, a, a.return);
          break;
        case 22:
          var b = a.stateNode;
          null !== a.memoizedState && b._visibility & 4 && (null === a.return || 13 !== a.return.tag) ? (b._visibility &= -5, Pj(a)) : Mj(a);
          break;
        default:
          Mj(a);
      }
    }
    function Pj(a) {
      var b = a.deletions;
      if (0 !== (a.flags & 16)) {
        if (null !== b)
          for (var c = 0; c < b.length; c++) {
            var d = b[c];
            Gi = d;
            Nj(d, a);
          }
        Lj(a);
      }
      for (a = a.child; null !== a; ) {
        b = a;
        switch (b.tag) {
          case 0:
          case 11:
          case 15:
            Si(8, b, b.return);
            Pj(b);
            break;
          case 22:
            c = b.stateNode;
            c._visibility & 4 && (c._visibility &= -5, Pj(b));
            break;
          default:
            Pj(b);
        }
        a = a.sibling;
      }
    }
    function Nj(a, b) {
      for (; null !== Gi; ) {
        var c = Gi;
        switch (c.tag) {
          case 0:
          case 11:
          case 15:
            Si(8, c, b);
            break;
          case 23:
          case 22:
            if (null !== c.memoizedState && null !== c.memoizedState.cachePool) {
              var d = c.memoizedState.cachePool.pool;
              null != d && d.refCount++;
            }
            break;
          case 24:
            bi(c.memoizedState.cache);
        }
        d = c.child;
        if (null !== d)
          d.return = c, Gi = d;
        else
          a:
            for (c = a; null !== Gi; ) {
              d = Gi;
              var e = d.sibling, f = d.return;
              aj(d);
              if (d === c) {
                Gi = null;
                break a;
              }
              if (null !== e) {
                e.return = f;
                Gi = e;
                break a;
              }
              Gi = f;
            }
      }
    }
    var Qj = { getCacheSignal: function() {
      return Wf(th).controller.signal;
    }, getCacheForType: function(a) {
      var b = Wf(th), c = b.data.get(a);
      void 0 === c && (c = a(), b.data.set(a, c));
      return c;
    } };
    var Rj = "function" === typeof WeakMap ? WeakMap : Map;
    var Sj = da.ReactCurrentDispatcher;
    var Tj = da.ReactCurrentCache;
    var Uj = da.ReactCurrentOwner;
    var Vj = da.ReactCurrentBatchConfig;
    var M = 0;
    var Q = null;
    var Y = null;
    var N = 0;
    var R = 0;
    var Wj = null;
    var Xj = false;
    var Fe = 0;
    var qi = 0;
    var cf = null;
    var be = 0;
    var Yj = 0;
    var Zj = 0;
    var ak = null;
    var gf = null;
    var jf = false;
    var bk = false;
    var yj = 0;
    var si = Infinity;
    var hf = null;
    var $g = false;
    var ah = null;
    var ch = null;
    var ck = false;
    var dk = null;
    var ek = 0;
    var fk = 0;
    var gk = null;
    var hk = 0;
    var ik = null;
    function Jg(a) {
      if (0 === (a.mode & 1))
        return 2;
      if (0 !== (M & 2) && 0 !== N)
        return N & -N;
      if (null !== ci.transition)
        return a = rf, 0 !== a ? a : of();
      a = F;
      if (0 !== a)
        return a;
      a = window.event;
      a = void 0 === a ? 32 : jk(a.type);
      return a;
    }
    function kg(a, b, c) {
      if (a === Q && 2 === R || null !== a.cancelPendingCommit)
        df(a, 0), ef(a, N);
      kk(a, c);
      if (0 === (M & 2) || a !== Q)
        a === Q && (0 === (M & 2) && (Yj |= c), 4 === qi && ef(a, N)), We(a), 2 === c && 0 === M && 0 === (b.mode & 1) && (si = Va() + 500, Ze(true));
    }
    function mf(a, b) {
      if (0 !== (M & 6))
        throw Error(u(327));
      var c = a.callbackNode;
      if ($e() && a.callbackNode !== c)
        return null;
      var d = lb(a, a === Q ? N : 0);
      if (0 === d)
        return null;
      b = 0 !== (d & 60) || 0 !== (d & a.expiredLanes) || b ? af(a, d) : lk(a, d);
      if (0 !== b) {
        if (2 === b) {
          var e = d, f = nb(a, e);
          0 !== f && (d = f, b = bf(a, e, f));
        }
        if (1 === b)
          throw c = cf, df(a, 0), ef(a, d), We(a), c;
        if (6 === b)
          ef(a, d);
        else {
          e = a.current.alternate;
          if (0 === (d & 60) && !mk(e)) {
            b = af(a, d);
            if (2 === b) {
              f = d;
              var g = nb(a, f);
              0 !== g && (d = g, b = bf(a, f, g));
            }
            if (1 === b)
              throw c = cf, df(a, 0), ef(a, d), We(a), c;
          }
          a.finishedWork = e;
          a.finishedLanes = d;
          a: {
            switch (b) {
              case 0:
              case 1:
                throw Error(u(345));
              case 4:
                if ((d & 8388480) === d) {
                  ef(a, d);
                  break a;
                }
                break;
              case 2:
              case 3:
              case 5:
                break;
              default:
                throw Error(u(329));
            }
            if ((d & 125829120) === d && (b = yj + 300 - Va(), 10 < b)) {
              ef(a, d);
              if (0 !== lb(a, 0))
                break a;
              a.timeoutHandle = nk(ok.bind(null, a, e, gf, hf, jf, d), b);
              break a;
            }
            ok(a, e, gf, hf, jf, d);
          }
        }
      }
      We(a);
      lf(a, Va());
      a = a.callbackNode === c ? mf.bind(null, a) : null;
      return a;
    }
    function bf(a, b, c) {
      var d = ak, e = a.current.memoizedState.isDehydrated;
      e && (df(a, c).flags |= 256);
      c = af(a, c);
      if (2 !== c) {
        if (Xj && !e)
          return a.errorRecoveryDisabledLanes |= b, Yj |= b, 4;
        a = gf;
        gf = d;
        null !== a && li(a);
      }
      return c;
    }
    function li(a) {
      null === gf ? gf = a : gf.push.apply(gf, a);
    }
    function ok(a, b, c, d, e, f) {
      if (0 === (f & 42) && (pk = { stylesheets: null, count: 0, unsuspend: qk }, Jj(b), b = rk(), null !== b)) {
        a.cancelPendingCommit = b(ff.bind(null, a, c, d, e));
        ef(a, f);
        return;
      }
      ff(a, c, d, e);
    }
    function mk(a) {
      for (var b = a; ; ) {
        if (b.flags & 16384) {
          var c = b.updateQueue;
          if (null !== c && (c = c.stores, null !== c))
            for (var d = 0; d < c.length; d++) {
              var e = c[d], f = e.getSnapshot;
              e = e.value;
              try {
                if (!$c(f(), e))
                  return false;
              } catch (g) {
                return false;
              }
            }
        }
        c = b.child;
        if (b.subtreeFlags & 16384 && null !== c)
          c.return = b, b = c;
        else {
          if (b === a)
            break;
          for (; null === b.sibling; ) {
            if (null === b.return || b.return === a)
              return true;
            b = b.return;
          }
          b.sibling.return = b.return;
          b = b.sibling;
        }
      }
      return true;
    }
    function kk(a, b) {
      a.pendingLanes |= b;
      536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);
      M & 2 ? jf = true : M & 4 && (bk = true);
      Td();
    }
    function ef(a, b) {
      b &= ~Zj;
      b &= ~Yj;
      a.suspendedLanes |= b;
      a.pingedLanes &= ~b;
      for (a = a.expirationTimes; 0 < b; ) {
        var c = 31 - fb(b), d = 1 << c;
        a[c] = -1;
        b &= ~d;
      }
    }
    function sk(a, b) {
      var c = M;
      M |= 1;
      try {
        return a(b);
      } finally {
        M = c, 0 === M && (si = Va() + 500, Ze(true));
      }
    }
    function tk(a) {
      null !== dk && 0 === dk.tag && 0 === (M & 6) && $e();
      var b = M;
      M |= 1;
      var c = Vj.transition, d = F;
      try {
        if (Vj.transition = null, F = 2, a)
          return a();
      } finally {
        F = d, Vj.transition = c, M = b, 0 === (M & 6) && Ze(false);
      }
    }
    function uk() {
      if (null !== Y) {
        if (0 === R)
          var a = Y.return;
        else
          a = Y, Vh(), Rf(a), ne = null, oe = 0, a = Y;
        for (; null !== a; )
          ui(a.alternate, a), a = a.return;
        Y = null;
      }
    }
    function df(a, b) {
      a.finishedWork = null;
      a.finishedLanes = 0;
      var c = a.timeoutHandle;
      -1 !== c && (a.timeoutHandle = -1, vk(c));
      c = a.cancelPendingCommit;
      null !== c && (a.cancelPendingCommit = null, c());
      uk();
      Q = a;
      Y = a = ue(a.current, null);
      N = Fe = b;
      R = 0;
      Wj = null;
      Xj = false;
      qi = 0;
      cf = null;
      Zj = Yj = be = 0;
      gf = ak = null;
      jf = false;
      Nd();
      return a;
    }
    function wk(a, b) {
      S = null;
      vf.current = Lf;
      Uj.current = null;
      b === fe ? (b = me(), R = hi() && 0 === (be & 268435455) && 0 === (Yj & 268435455) ? 2 : 3) : b === ge ? (b = me(), R = 4) : R = b === fh ? 8 : null !== b && "object" === typeof b && "function" === typeof b.then ? 6 : 1;
      Wj = b;
      null === Y && (qi = 1, cf = b);
    }
    function hi() {
      if ((N & 8388480) === N)
        return null === Je ? true : false;
      var a = Ie.current;
      return null === a || (N & 125829120) !== N && 0 === (N & 1073741824) ? false : a === Je;
    }
    function xk() {
      var a = Sj.current;
      Sj.current = Lf;
      return null === a ? Lf : a;
    }
    function yk() {
      var a = Tj.current;
      Tj.current = Qj;
      return a;
    }
    function Jh() {
      qi = 4;
      null === Q || 0 === (be & 268435455) && 0 === (Yj & 268435455) || ef(Q, N);
    }
    function af(a, b) {
      var c = M;
      M |= 2;
      var d = xk(), e = yk();
      if (Q !== a || N !== b)
        hf = null, df(a, b);
      a:
        do
          try {
            if (0 !== R && null !== Y) {
              b = Y;
              var f = Wj;
              switch (R) {
                case 8:
                  uk();
                  qi = 6;
                  break a;
                default:
                  R = 0, Wj = null, zk(b, f);
              }
            }
            Ak();
            break;
          } catch (g) {
            wk(a, g);
          }
        while (1);
      Vh();
      M = c;
      Sj.current = d;
      Tj.current = e;
      if (null !== Y)
        throw Error(u(261));
      Q = null;
      N = 0;
      Nd();
      return qi;
    }
    function Ak() {
      for (; null !== Y; )
        Bk(Y);
    }
    function lk(a, b) {
      var c = M;
      M |= 2;
      var d = xk(), e = yk();
      if (Q !== a || N !== b)
        hf = null, si = Va() + 500, df(a, b);
      a:
        do
          try {
            if (0 !== R && null !== Y) {
              b = Y;
              var f = Wj;
              b:
                switch (R) {
                  case 1:
                    R = 0;
                    Wj = null;
                    zk(b, f);
                    break;
                  case 2:
                    if (ie(f)) {
                      R = 0;
                      Wj = null;
                      Ck(b);
                      break;
                    }
                    b = function() {
                      2 === R && Q === a && (R = 7);
                      We(a);
                    };
                    f.then(b, b);
                    break a;
                  case 3:
                    R = 7;
                    break a;
                  case 4:
                    R = 5;
                    break a;
                  case 7:
                    ie(f) ? (R = 0, Wj = null, Ck(b)) : (R = 0, Wj = null, zk(b, f));
                    break;
                  case 5:
                    switch (Y.tag) {
                      case 5:
                      case 26:
                      case 27:
                        b = Y;
                        R = 0;
                        Wj = null;
                        var g = b.sibling;
                        if (null !== g)
                          Y = g;
                        else {
                          var h = b.return;
                          null !== h ? (Y = h, Dk(h)) : Y = null;
                        }
                        break b;
                    }
                    R = 0;
                    Wj = null;
                    zk(b, f);
                    break;
                  case 6:
                    R = 0;
                    Wj = null;
                    zk(b, f);
                    break;
                  case 8:
                    uk();
                    qi = 6;
                    break a;
                  default:
                    throw Error(u(462));
                }
            }
            Ek();
            break;
          } catch (k) {
            wk(a, k);
          }
        while (1);
      Vh();
      Sj.current = d;
      Tj.current = e;
      M = c;
      if (null !== Y)
        return 0;
      Q = null;
      N = 0;
      Nd();
      return qi;
    }
    function Ek() {
      for (; null !== Y && !Ta(); )
        Bk(Y);
    }
    function Bk(a) {
      var b = Fk(a.alternate, a, Fe);
      a.memoizedProps = a.pendingProps;
      null === b ? Dk(a) : Y = b;
      Uj.current = null;
    }
    function Ck(a) {
      var b = a.alternate;
      switch (a.tag) {
        case 2:
          a.tag = 0;
        case 15:
        case 0:
          var c = a.type, d = a.pendingProps;
          d = a.elementType === c ? d : Pg(c, d);
          var e = Tc(c) ? Rc : Pc.current;
          e = Sc(a, e);
          b = uh(b, a, d, c, e, N);
          break;
        case 11:
          c = a.type.render;
          d = a.pendingProps;
          d = a.elementType === c ? d : Pg(c, d);
          b = uh(b, a, d, c, a.ref, N);
          break;
        case 5:
          Rf(a);
        default:
          ui(b, a), a = Y = ri(a, Fe), b = Fk(b, a, Fe);
      }
      a.memoizedProps = a.pendingProps;
      null === b ? Dk(a) : Y = b;
      Uj.current = null;
    }
    function zk(a, b) {
      Vh();
      Rf(a);
      ne = null;
      oe = 0;
      var c = a.return;
      if (null === c || null === Q)
        qi = 1, cf = b, Y = null;
      else {
        try {
          a: {
            var d = Q, e = b;
            b = N;
            a.flags |= 32768;
            if (null !== e && "object" === typeof e && "function" === typeof e.then) {
              var f = e, g = a.tag;
              if (0 === (a.mode & 1) && (0 === g || 11 === g || 15 === g)) {
                var h = a.alternate;
                h ? (a.updateQueue = h.updateQueue, a.memoizedState = h.memoizedState, a.lanes = h.lanes) : (a.updateQueue = null, a.memoizedState = null);
              }
              var k = Ie.current;
              if (null !== k) {
                switch (k.tag) {
                  case 13:
                    a.mode & 1 && (null === Je ? Jh() : null === k.alternate && 0 === qi && (qi = 3));
                    k.flags &= -257;
                    dh(k, c, a, d, b);
                    if (f === he)
                      k.flags |= 16384;
                    else {
                      var p = k.updateQueue;
                      null === p ? k.updateQueue = /* @__PURE__ */ new Set([f]) : p.add(f);
                    }
                    break;
                  case 22:
                    if (k.mode & 1) {
                      k.flags |= 65536;
                      if (f === he)
                        k.flags |= 16384;
                      else {
                        var r = k.updateQueue;
                        if (null === r) {
                          var w = { transitions: null, markerInstances: null, retryQueue: /* @__PURE__ */ new Set([f]) };
                          k.updateQueue = w;
                        } else {
                          var q = r.retryQueue;
                          null === q ? r.retryQueue = /* @__PURE__ */ new Set([f]) : q.add(f);
                        }
                      }
                      break;
                    }
                  default:
                    throw Error(u(435, k.tag));
                }
                k.mode & 1 && Gk(d, f, b);
                break a;
              } else if (1 === d.tag) {
                Gk(d, f, b);
                Jh();
                break a;
              } else
                e = Error(u(426));
            } else if (K && a.mode & 1 && (f = Ie.current, null !== f)) {
              0 === (f.flags & 65536) && (f.flags |= 256);
              dh(f, c, a, d, b);
              Jd(Wg(e, a));
              break a;
            }
            d = e = Wg(e, a);
            4 !== qi && (qi = 2);
            null === ak ? ak = [d] : ak.push(d);
            d = c;
            do {
              switch (d.tag) {
                case 3:
                  var t = e;
                  d.flags |= 65536;
                  b &= -b;
                  d.lanes |= b;
                  var y = Zg(d, t, b);
                  $d(d, y);
                  break a;
                case 1:
                  g = e;
                  var B = d.type, O = d.stateNode;
                  if (0 === (d.flags & 128) && ("function" === typeof B.getDerivedStateFromError || null !== O && "function" === typeof O.componentDidCatch && (null === ch || !ch.has(O)))) {
                    d.flags |= 65536;
                    y = b & -b;
                    d.lanes |= y;
                    t = bh(d, g, y);
                    $d(d, t);
                    break a;
                  }
              }
              d = d.return;
            } while (null !== d);
          }
        } catch (P) {
          throw Y = c, P;
        }
        if (a.flags & 32768)
          a: {
            do {
              c = ti(a.alternate, a);
              if (null !== c) {
                c.flags &= 32767;
                Y = c;
                break a;
              }
              a = a.return;
              null !== a && (a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null);
              Y = a;
            } while (null !== a);
            qi = 6;
            Y = null;
          }
        else
          Dk(a);
      }
    }
    function Dk(a) {
      var b = a;
      do {
        a = b.return;
        var c = ki(b.alternate, b, Fe);
        if (null !== c) {
          Y = c;
          return;
        }
        b = b.sibling;
        if (null !== b) {
          Y = b;
          return;
        }
        Y = b = a;
      } while (null !== b);
      0 === qi && (qi = 5);
    }
    function ff(a, b, c, d) {
      var e = F, f = Vj.transition;
      try {
        Vj.transition = null, F = 2, Hk(a, b, c, d, e);
      } finally {
        Vj.transition = f, F = e;
      }
      return null;
    }
    function Hk(a, b, c, d, e) {
      do
        $e();
      while (null !== dk);
      if (0 !== (M & 6))
        throw Error(u(327));
      var f = a.finishedWork, g = a.finishedLanes;
      if (null === f)
        return null;
      a.finishedWork = null;
      a.finishedLanes = 0;
      if (f === a.current)
        throw Error(u(177));
      a.callbackNode = null;
      a.callbackPriority = 0;
      a.cancelPendingCommit = null;
      var h = f.lanes | f.childLanes;
      h |= Md;
      rb(a, h);
      bk = false;
      a === Q && (Y = Q = null, N = 0);
      0 === (f.subtreeFlags & 10256) && 0 === (f.flags & 10256) || ck || (ck = true, fk = h, gk = c, Ik(Za, function() {
        $e();
        return null;
      }));
      c = 0 !== (f.flags & 15990);
      if (0 !== (f.subtreeFlags & 15990) || c) {
        c = Vj.transition;
        Vj.transition = null;
        var k = F;
        F = 2;
        var p = M;
        M |= 4;
        Uj.current = null;
        Li(a, f);
        pj(f, a);
        Jk(Qi);
        Ni = !!Mi;
        Qi = Mi = null;
        a.current = f;
        Xi(a, f.alternate, f);
        Ua();
        M = p;
        F = k;
        Vj.transition = c;
      } else
        a.current = f;
      ck ? (ck = false, dk = a, ek = g) : Kk(a, h);
      h = a.pendingLanes;
      0 === h && (ch = null);
      db(f.stateNode, e);
      We(a);
      if (null !== b)
        for (e = a.onRecoverableError, f = 0; f < b.length; f++)
          g = b[f], h = { digest: g.digest, componentStack: g.stack }, e(g.value, h);
      if ($g)
        throw $g = false, a = ah, ah = null, a;
      0 !== (ek & 3) && 0 !== a.tag && $e();
      h = a.pendingLanes;
      bk || d || 0 !== (h & 3) ? a === ik ? hk++ : (hk = 0, ik = a) : hk = 0;
      Ze(false);
      return null;
    }
    function Kk(a, b) {
      0 === (a.pooledCacheLanes &= b) && (b = a.pooledCache, null != b && (a.pooledCache = null, bi(b)));
    }
    function $e() {
      if (null !== dk) {
        var a = dk, b = fk;
        fk = 0;
        var c = ub(ek), d = 32 > c ? 32 : c;
        c = Vj.transition;
        var e = F;
        try {
          Vj.transition = null;
          F = d;
          if (null === dk)
            var f = false;
          else {
            d = gk;
            gk = null;
            var g = dk, h = ek;
            dk = null;
            ek = 0;
            if (0 !== (M & 6))
              throw Error(u(331));
            var k = M;
            M |= 4;
            Oj(g.current);
            Ej(g, g.current, h, d);
            M = k;
            Ze(false);
            if (cb && "function" === typeof cb.onPostCommitFiberRoot)
              try {
                cb.onPostCommitFiberRoot(bb, g);
              } catch (p) {
              }
            f = true;
          }
          return f;
        } finally {
          F = e, Vj.transition = c, Kk(a, b);
        }
      }
      return false;
    }
    function Lk(a, b, c) {
      b = Wg(c, b);
      b = Zg(a, b, 2);
      a = Yd(a, b, 2);
      null !== a && (kk(a, 2), We(a));
    }
    function X(a, b, c) {
      if (3 === a.tag)
        Lk(a, a, c);
      else
        for (; null !== b; ) {
          if (3 === b.tag) {
            Lk(b, a, c);
            break;
          } else if (1 === b.tag) {
            var d = b.stateNode;
            if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === ch || !ch.has(d))) {
              a = Wg(c, a);
              a = bh(b, a, 2);
              b = Yd(b, a, 2);
              null !== b && (kk(b, 2), We(b));
              break;
            }
          }
          b = b.return;
        }
    }
    function Gk(a, b, c) {
      var d = a.pingCache;
      if (null === d) {
        d = a.pingCache = new Rj();
        var e = /* @__PURE__ */ new Set();
        d.set(b, e);
      } else
        e = d.get(b), void 0 === e && (e = /* @__PURE__ */ new Set(), d.set(b, e));
      e.has(c) || (Xj = true, e.add(c), a = Mk.bind(null, a, b, c), b.then(a, a));
    }
    function Mk(a, b, c) {
      var d = a.pingCache;
      null !== d && d.delete(b);
      a.pingedLanes |= a.suspendedLanes & c;
      M & 2 ? jf = true : M & 4 && (bk = true);
      Td();
      Q === a && (N & c) === c && (4 === qi || 3 === qi && (N & 125829120) === N && 300 > Va() - yj ? 0 === (M & 2) && df(a, 0) : Zj |= c);
      We(a);
    }
    function Nk(a, b) {
      0 === b && (b = 0 === (a.mode & 1) ? 2 : pb());
      a = Sd(a, b);
      null !== a && (kk(a, b), We(a));
    }
    function Kh(a) {
      var b = a.memoizedState, c = 0;
      null !== b && (c = b.retryLane);
      Nk(a, c);
    }
    function nj(a, b) {
      var c = 0;
      switch (a.tag) {
        case 13:
          var d = a.stateNode;
          var e = a.memoizedState;
          null !== e && (c = e.retryLane);
          break;
        case 19:
          d = a.stateNode;
          break;
        case 22:
          d = a.stateNode._retryCache;
          break;
        default:
          throw Error(u(314));
      }
      null !== d && d.delete(b);
      Nk(a, c);
    }
    function Td() {
      if (50 < hk)
        throw hk = 0, ik = null, M & 2 && null !== Q && (Q.errorRecoveryDisabledLanes |= N), Error(u(185));
    }
    var Fk;
    Fk = function(a, b, c) {
      if (null !== a)
        if (a.memoizedProps !== b.pendingProps || Qc.current)
          ag = true;
        else {
          if (0 === (a.lanes & c) && 0 === (b.flags & 128))
            return ag = false, Ph(a, b, c);
          ag = 0 !== (a.flags & 131072) ? true : false;
        }
      else
        ag = false, K && 0 !== (b.flags & 1048576) && kd(b, dd, b.index);
      b.lanes = 0;
      switch (b.tag) {
        case 2:
          var d = b.type;
          wh(a, b);
          a = b.pendingProps;
          var e = Sc(b, Pc.current);
          ih(b, c);
          e = Gf(null, b, d, a, e, c);
          var f = Pf();
          b.flags |= 1;
          "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Tc(d) ? (f = true, Xc(b)) : f = false, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, Vd(b), e.updater = Rg, b.stateNode = e, e._reactInternals = b, Vg(b, d, a, c), b = xh(null, b, d, true, f, c)) : (b.tag = 0, K && f && ld(b), gh(null, b, e, c), b = b.child);
          return b;
        case 16:
          d = b.elementType;
          a: {
            wh(a, b);
            a = b.pendingProps;
            e = d._init;
            d = e(d._payload);
            b.type = d;
            e = b.tag = Ok(d);
            a = Pg(d, a);
            switch (e) {
              case 0:
                b = nh(null, b, d, a, c);
                break a;
              case 1:
                b = vh(null, b, d, a, c);
                break a;
              case 11:
                b = hh(null, b, d, a, c);
                break a;
              case 14:
                b = kh(null, b, d, Pg(d.type, a), c);
                break a;
            }
            throw Error(u(
              306,
              d,
              ""
            ));
          }
          return b;
        case 0:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Pg(d, e), nh(a, b, d, e, c);
        case 1:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Pg(d, e), vh(a, b, d, e, c);
        case 3:
          a: {
            yh(b);
            if (null === a)
              throw Error(u(387));
            e = b.pendingProps;
            f = b.memoizedState;
            d = f.element;
            Wd(a, b);
            ae(b, e, null, c);
            var g = b.memoizedState;
            e = g.cache;
            Qh(b, th, e);
            e !== f.cache && Xh(b, th, c);
            e = g.element;
            if (f.isDehydrated)
              if (f = { element: e, isDehydrated: false, cache: g.cache }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {
                d = Wg(Error(u(423)), b);
                b = zh(a, b, e, c, d);
                break a;
              } else if (e !== d) {
                d = Wg(Error(u(424)), b);
                b = zh(a, b, e, c, d);
                break a;
              } else
                for (J = ud(b.stateNode.containerInfo.firstChild), I = b, K = true, nd = null, od = true, c = Be(b, null, e, c), b.child = c; c; )
                  c.flags = c.flags & -3 | 4096, c = c.sibling;
            else {
              Id();
              if (e === d) {
                b = jh(a, b, c);
                break a;
              }
              gh(a, b, e, c);
            }
            b = b.child;
          }
          return b;
        case 26:
          return ph(a, b), c = b.memoizedState = Pk(b.type, null === a ? null : a.memoizedProps, b.pendingProps), null !== a || K || null !== c || (c = b.type, a = b.pendingProps, d = ni(Ia.current).createElement(c), d[xb] = b, d[yb] = a, oi(d, c, a), Nb(d), b.stateNode = d), null;
        case 27:
          return Pa(b), null === a && K && (d = b.stateNode = mi(b.type, b.pendingProps, Ia.current), I = b, od = true, J = ud(d.firstChild)), d = b.pendingProps.children, null !== a || K ? gh(a, b, d, c) : b.child = Ae(b, null, d, c), ph(a, b), b.child;
        case 5:
          return Pa(b), null === a && K && ((e = d = J, e) ? sd(b, e) || (yd(b) && zd(), J = ud(e.nextSibling), f = I, J && sd(b, J) ? pd(f, e) : (rd(I, b), K = false, I = b, J = d)) : (yd(b) && zd(), rd(I, b), K = false, I = b, J = d)), e = b.type, f = b.pendingProps, g = null !== a ? a.memoizedProps : null, d = f.children, Gd(e, f) ? d = null : null !== g && Gd(e, g) && (b.flags |= 32), null !== b.memoizedState && (e = Gf(a, b, Nf, null, null, c), Ka._currentValue = e, ag && null !== a && a.memoizedState.memoizedState !== e && Xh(b, Ka, c)), ph(a, b), gh(a, b, d, c), b.child;
        case 6:
          return null === a && K && ((d = "" !== b.pendingProps, a = c = J, a && d) ? vd(b, a) || (yd(b) && zd(), J = ud(a.nextSibling), d = I, J && vd(b, J) ? pd(d, a) : (rd(I, b), K = false, I = b, J = c)) : (yd(b) && zd(), rd(I, b), K = false, I = b, J = c)), null;
        case 13:
          return Dh(a, b, c);
        case 4:
          return La(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Ae(
            b,
            null,
            d,
            c
          ) : gh(a, b, d, c), b.child;
        case 11:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Pg(d, e), hh(a, b, d, e, c);
        case 7:
          return gh(a, b, b.pendingProps, c), b.child;
        case 8:
          return gh(a, b, b.pendingProps.children, c), b.child;
        case 12:
          return gh(a, b, b.pendingProps.children, c), b.child;
        case 10:
          a: {
            d = b.type._context;
            e = b.pendingProps;
            f = b.memoizedProps;
            g = e.value;
            Qh(b, d, g);
            if (null !== f)
              if ($c(f.value, g)) {
                if (f.children === e.children && !Qc.current) {
                  b = jh(a, b, c);
                  break a;
                }
              } else
                Xh(b, d, c);
            gh(a, b, e.children, c);
            b = b.child;
          }
          return b;
        case 9:
          return e = b.type, d = b.pendingProps.children, ih(b, c), e = Wf(e), d = d(e), b.flags |= 1, gh(a, b, d, c), b.child;
        case 14:
          return d = b.type, e = Pg(d, b.pendingProps), e = Pg(d.type, e), kh(a, b, d, e, c);
        case 15:
          return mh(a, b, b.type, b.pendingProps, c);
        case 17:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Pg(d, e), wh(a, b), b.tag = 1, Tc(d) ? (a = true, Xc(b)) : a = false, ih(b, c), Tg(b, d, e), Vg(b, d, e, c), xh(null, b, d, true, a, c);
        case 19:
          return Oh(a, b, c);
        case 22:
          return oh(a, b, c);
        case 24:
          return ih(b, c), d = Wf(th), null === a ? (e = sh(), null === e && (e = Q, f = Kg(), e.pooledCache = f, f.refCount++, null !== f && (e.pooledCacheLanes |= c), e = f), b.memoizedState = { parent: d, cache: e }, Vd(b), Qh(b, th, e)) : (0 !== (a.lanes & c) && (Wd(a, b), ae(b, null, null, c)), e = a.memoizedState, f = b.memoizedState, e.parent !== d ? (e = { parent: d, cache: d }, b.memoizedState = e, 0 === b.lanes && (b.memoizedState = b.updateQueue.baseState = e), Qh(b, th, d)) : (d = f.cache, Qh(b, th, d), d !== e.cache && Xh(b, th, c))), gh(a, b, b.pendingProps.children, c), b.child;
      }
      throw Error(u(156, b.tag));
    };
    function Ik(a, b) {
      return Ra(a, b);
    }
    function Qk(a, b, c, d) {
      this.tag = a;
      this.key = c;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.refCleanup = this.ref = null;
      this.pendingProps = b;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = d;
      this.subtreeFlags = this.flags = 0;
      this.deletions = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
    }
    function qd(a, b, c, d) {
      return new Qk(a, b, c, d);
    }
    function lh(a) {
      a = a.prototype;
      return !(!a || !a.isReactComponent);
    }
    function Ok(a) {
      if ("function" === typeof a)
        return lh(a) ? 1 : 0;
      if (void 0 !== a && null !== a) {
        a = a.$$typeof;
        if (a === ta)
          return 11;
        if (a === wa)
          return 14;
      }
      return 2;
    }
    function ue(a, b) {
      var c = a.alternate;
      null === c ? (c = qd(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
      c.flags = a.flags & 31457280;
      c.childLanes = a.childLanes;
      c.lanes = a.lanes;
      c.child = a.child;
      c.memoizedProps = a.memoizedProps;
      c.memoizedState = a.memoizedState;
      c.updateQueue = a.updateQueue;
      b = a.dependencies;
      c.dependencies = null === b ? null : { lanes: b.lanes, firstContext: b.firstContext };
      c.sibling = a.sibling;
      c.index = a.index;
      c.ref = a.ref;
      c.refCleanup = a.refCleanup;
      return c;
    }
    function ri(a, b) {
      a.flags &= 31457282;
      var c = a.alternate;
      null === c ? (a.childLanes = 0, a.lanes = b, a.child = null, a.subtreeFlags = 0, a.memoizedProps = null, a.memoizedState = null, a.updateQueue = null, a.dependencies = null, a.stateNode = null) : (a.childLanes = c.childLanes, a.lanes = c.lanes, a.child = c.child, a.subtreeFlags = 0, a.deletions = null, a.memoizedProps = c.memoizedProps, a.memoizedState = c.memoizedState, a.updateQueue = c.updateQueue, a.type = c.type, b = c.dependencies, a.dependencies = null === b ? null : { lanes: b.lanes, firstContext: b.firstContext });
      return a;
    }
    function we(a, b, c, d, e, f) {
      var g = 2;
      d = a;
      if ("function" === typeof a)
        lh(a) && (g = 1);
      else if ("string" === typeof a)
        g = Rk(a, c, Ga.current) ? 26 : "html" === a || "head" === a || "body" === a ? 27 : 5;
      else
        a:
          switch (a) {
            case na:
              return ye(c.children, e, f, b);
            case oa:
              g = 8;
              e |= 8;
              0 !== (e & 1) && (e |= 16);
              break;
            case pa:
              return a = qd(12, c, b, e | 2), a.elementType = pa, a.lanes = f, a;
            case ua:
              return a = qd(13, c, b, e), a.elementType = ua, a.lanes = f, a;
            case va:
              return a = qd(19, c, b, e), a.elementType = va, a.lanes = f, a;
            case za:
              return Hh(c, e, f, b);
            case Aa:
            case ya:
            case Ba:
              return a = qd(
                24,
                c,
                b,
                e
              ), a.elementType = Ba, a.lanes = f, a;
            default:
              if ("object" === typeof a && null !== a)
                switch (a.$$typeof) {
                  case qa:
                    g = 10;
                    break a;
                  case ra:
                    g = 9;
                    break a;
                  case ta:
                    g = 11;
                    break a;
                  case wa:
                    g = 14;
                    break a;
                  case xa:
                    g = 16;
                    d = null;
                    break a;
                }
              throw Error(u(130, null == a ? a : typeof a, ""));
          }
      b = qd(g, c, b, e);
      b.elementType = a;
      b.type = d;
      b.lanes = f;
      return b;
    }
    function ye(a, b, c, d) {
      a = qd(7, a, d, b);
      a.lanes = c;
      return a;
    }
    function Hh(a, b, c, d) {
      a = qd(22, a, d, b);
      a.elementType = za;
      a.lanes = c;
      var e = { _visibility: 1, _pendingVisibility: 1, _pendingMarkers: null, _retryCache: null, _transitions: null, _current: null, detach: function() {
        var f = e._current;
        if (null === f)
          throw Error(u(456));
        if (0 === (e._pendingVisibility & 2)) {
          var g = Sd(f, 2);
          null !== g && (e._pendingVisibility |= 2, kg(g, f, 2));
        }
      }, attach: function() {
        var f = e._current;
        if (null === f)
          throw Error(u(456));
        if (0 !== (e._pendingVisibility & 2)) {
          var g = Sd(f, 2);
          null !== g && (e._pendingVisibility &= -3, kg(g, f, 2));
        }
      } };
      a.stateNode = e;
      return a;
    }
    function ve(a, b, c) {
      a = qd(6, a, null, b);
      a.lanes = c;
      return a;
    }
    function xe(a, b, c) {
      b = qd(4, null !== a.children ? a.children : [], a.key, b);
      b.lanes = c;
      b.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
      return b;
    }
    function Sk(a, b, c, d, e) {
      this.tag = b;
      this.containerInfo = a;
      this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
      this.timeoutHandle = -1;
      this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
      this.callbackPriority = 0;
      this.expirationTimes = qb(-1);
      this.entangledLanes = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
      this.entanglements = qb(0);
      this.hiddenUpdates = qb(null);
      this.identifierPrefix = d;
      this.onRecoverableError = e;
      this.pooledCache = null;
      this.pooledCacheLanes = 0;
      this.incompleteTransitions = /* @__PURE__ */ new Map();
    }
    function Tk(a, b, c, d, e, f, g, h, k) {
      a = new Sk(a, b, c, h, k);
      1 === b ? (b = 1, true === f && (b |= 24)) : b = 0;
      f = qd(3, null, null, b);
      a.current = f;
      f.stateNode = a;
      b = Kg();
      b.refCount++;
      a.pooledCache = b;
      b.refCount++;
      f.memoizedState = { element: d, isDehydrated: c, cache: b };
      Vd(f);
      return a;
    }
    function Uk(a, b, c) {
      var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
      return { $$typeof: ma, key: null == d ? null : "" + d, children: a, containerInfo: b, implementation: c };
    }
    function Vk(a) {
      if (!a)
        return Oc;
      a = a._reactInternals;
      a: {
        if (Ic(a) !== a || 1 !== a.tag)
          throw Error(u(170));
        var b = a;
        do {
          switch (b.tag) {
            case 3:
              b = b.stateNode.context;
              break a;
            case 1:
              if (Tc(b.type)) {
                b = b.stateNode.__reactInternalMemoizedMergedChildContext;
                break a;
              }
          }
          b = b.return;
        } while (null !== b);
        throw Error(u(171));
      }
      if (1 === a.tag) {
        var c = a.type;
        if (Tc(c))
          return Wc(a, c, b);
      }
      return b;
    }
    function Wk(a, b, c, d, e, f, g, h, k) {
      a = Tk(c, d, true, a, e, f, g, h, k);
      a.context = Vk(null);
      c = a.current;
      d = Jg(c);
      e = Xd(d);
      e.callback = void 0 !== b && null !== b ? b : null;
      Yd(c, e, d);
      a.current.lanes = d;
      kk(a, d);
      We(a);
      return a;
    }
    function Xk(a, b, c, d) {
      var e = b.current, f = Jg(e);
      c = Vk(c);
      null === b.context ? b.context = c : b.pendingContext = c;
      b = Xd(f);
      b.payload = { element: a };
      d = void 0 === d ? null : d;
      null !== d && (b.callback = d);
      a = Yd(e, b, f);
      null !== a && (kg(a, e, f), Zd(a, e, f));
      return f;
    }
    function Yk(a) {
      a = a.current;
      if (!a.child)
        return null;
      switch (a.child.tag) {
        case 27:
        case 5:
          return a.child.stateNode;
        default:
          return a.child.stateNode;
      }
    }
    function Zk(a) {
      switch (a.tag) {
        case 3:
          var b = a.stateNode;
          if (b.current.memoizedState.isDehydrated) {
            var c = kb(b.pendingLanes);
            0 !== c && (sb(b, c | 2), We(b), 0 === (M & 6) && (si = Va() + 500, Ze(false)));
          }
          break;
        case 13:
          tk(function() {
            var d = Sd(a, 2);
            null !== d && kg(d, a, 2);
          }), $k(a, 2);
      }
    }
    function al(a, b) {
      a = a.memoizedState;
      if (null !== a && null !== a.dehydrated) {
        var c = a.retryLane;
        a.retryLane = 0 !== c && c < b ? c : b;
      }
    }
    function $k(a, b) {
      al(a, b);
      (a = a.alternate) && al(a, b);
    }
    function bl(a) {
      if (13 === a.tag) {
        var b = Sd(a, 134217728);
        null !== b && kg(b, a, 134217728);
        $k(a, 134217728);
      }
    }
    function cl() {
      return null;
    }
    var dl = false;
    function el(a, b, c) {
      if (dl)
        return a(b, c);
      dl = true;
      try {
        return sk(a, b, c);
      } finally {
        if (dl = false, null !== Dc || null !== Ec)
          tk(), Hc();
      }
    }
    function fl(a, b) {
      var c = a.stateNode;
      if (null === c)
        return null;
      var d = Lb(c);
      if (null === d)
        return null;
      c = d[b];
      a:
        switch (b) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
            a = !d;
            break a;
          default:
            a = false;
        }
      if (a)
        return null;
      if (c && "function" !== typeof c)
        throw Error(u(231, b, typeof c));
      return c;
    }
    var gl = false;
    if (Sb)
      try {
        hl = {};
        Object.defineProperty(hl, "passive", { get: function() {
          gl = true;
        } });
        window.addEventListener("test", hl, hl);
        window.removeEventListener("test", hl, hl);
      } catch (a) {
        gl = false;
      }
    var hl;
    function il(a) {
      var b = a.keyCode;
      "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
      10 === a && (a = 13);
      return 32 <= a || 13 === a ? a : 0;
    }
    function jl() {
      return true;
    }
    function kl() {
      return false;
    }
    function ll(a) {
      function b(c, d, e, f, g) {
        this._reactName = c;
        this._targetInst = e;
        this.type = d;
        this.nativeEvent = f;
        this.target = g;
        this.currentTarget = null;
        for (var h in a)
          a.hasOwnProperty(h) && (c = a[h], this[h] = c ? c(f) : f[h]);
        this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : false === f.returnValue) ? jl : kl;
        this.isPropagationStopped = kl;
        return this;
      }
      C(b.prototype, { preventDefault: function() {
        this.defaultPrevented = true;
        var c = this.nativeEvent;
        c && (c.preventDefault ? c.preventDefault() : "unknown" !== typeof c.returnValue && (c.returnValue = false), this.isDefaultPrevented = jl);
      }, stopPropagation: function() {
        var c = this.nativeEvent;
        c && (c.stopPropagation ? c.stopPropagation() : "unknown" !== typeof c.cancelBubble && (c.cancelBubble = true), this.isPropagationStopped = jl);
      }, persist: function() {
      }, isPersistent: jl });
      return b;
    }
    var ml = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
      return a.timeStamp || Date.now();
    }, defaultPrevented: 0, isTrusted: 0 };
    var nl = ll(ml);
    var ol = C({}, ml, { view: 0, detail: 0 });
    var pl = ll(ol);
    var ql;
    var rl;
    var sl;
    var ul = C({}, ol, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: tl, button: 0, buttons: 0, relatedTarget: function(a) {
      return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
    }, movementX: function(a) {
      if ("movementX" in a)
        return a.movementX;
      a !== sl && (sl && "mousemove" === a.type ? (ql = a.screenX - sl.screenX, rl = a.screenY - sl.screenY) : rl = ql = 0, sl = a);
      return ql;
    }, movementY: function(a) {
      return "movementY" in a ? a.movementY : rl;
    } });
    var vl = ll(ul);
    var wl = C({}, ul, { dataTransfer: 0 });
    var xl = ll(wl);
    var yl = C({}, ol, { relatedTarget: 0 });
    var zl = ll(yl);
    var Al = C({}, ml, { animationName: 0, elapsedTime: 0, pseudoElement: 0 });
    var Bl = ll(Al);
    var Cl = C({}, ml, { clipboardData: function(a) {
      return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    } });
    var Dl = ll(Cl);
    var El = C({}, ml, { data: 0 });
    var Fl = ll(El);
    var Gl = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    };
    var Hl = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    };
    var Il = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
    function Jl(a) {
      var b = this.nativeEvent;
      return b.getModifierState ? b.getModifierState(a) : (a = Il[a]) ? !!b[a] : false;
    }
    function tl() {
      return Jl;
    }
    var Kl = C({}, ol, { key: function(a) {
      if (a.key) {
        var b = Gl[a.key] || a.key;
        if ("Unidentified" !== b)
          return b;
      }
      return "keypress" === a.type ? (a = il(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Hl[a.keyCode] || "Unidentified" : "";
    }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: tl, charCode: function(a) {
      return "keypress" === a.type ? il(a) : 0;
    }, keyCode: function(a) {
      return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    }, which: function(a) {
      return "keypress" === a.type ? il(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    } });
    var Ll = ll(Kl);
    var Ml = C({}, ul, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 });
    var Nl = ll(Ml);
    var Ol = C({}, ol, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: tl });
    var Pl = ll(Ol);
    var Ql = C({}, ml, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 });
    var Rl = ll(Ql);
    var Sl = C({}, ul, {
      deltaX: function(a) {
        return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
      },
      deltaY: function(a) {
        return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
      },
      deltaZ: 0,
      deltaMode: 0
    });
    var Tl = ll(Sl);
    function Ul(a, b, c, d, e) {
      if ("submit" === b && c && c.stateNode === e) {
        var f = Lb(e).action, g = d.submitter;
        g && (b = (b = Lb(g)) ? b.formAction : g.getAttribute("formAction"), null != b && (f = b, g = null));
        if ("function" === typeof f) {
          var h = new nl("action", "action", null, d, e);
          a.push({ event: h, listeners: [{ instance: null, listener: function() {
            if (!d.defaultPrevented) {
              h.preventDefault();
              if (g) {
                var k = g.ownerDocument.createElement("input");
                k.name = g.name;
                k.value = g.value;
                g.parentNode.insertBefore(k, g);
                var p = new FormData(e);
                k.parentNode.removeChild(k);
              } else
                p = new FormData(e);
              Eg(c, { pending: true, data: p, method: e.method, action: f }, f, p);
            }
          }, currentTarget: e }] });
        }
      }
    }
    var Vl = false;
    var Wl = null;
    var Xl = null;
    var Yl = null;
    var Zl = /* @__PURE__ */ new Map();
    var $l = /* @__PURE__ */ new Map();
    var am = [];
    var bm = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");
    function cm(a, b) {
      switch (a) {
        case "focusin":
        case "focusout":
          Wl = null;
          break;
        case "dragenter":
        case "dragleave":
          Xl = null;
          break;
        case "mouseover":
        case "mouseout":
          Yl = null;
          break;
        case "pointerover":
        case "pointerout":
          Zl.delete(b.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          $l.delete(b.pointerId);
      }
    }
    function dm(a, b, c, d, e, f) {
      if (null === a || a.nativeEvent !== f)
        return a = { blockedOn: b, domEventName: c, eventSystemFlags: d, nativeEvent: f, targetContainers: [e] }, null !== b && (b = Jb(b), null !== b && bl(b)), a;
      a.eventSystemFlags |= d;
      b = a.targetContainers;
      null !== e && -1 === b.indexOf(e) && b.push(e);
      return a;
    }
    function em(a, b, c, d, e) {
      switch (b) {
        case "focusin":
          return Wl = dm(Wl, a, b, c, d, e), true;
        case "dragenter":
          return Xl = dm(Xl, a, b, c, d, e), true;
        case "mouseover":
          return Yl = dm(Yl, a, b, c, d, e), true;
        case "pointerover":
          var f = e.pointerId;
          Zl.set(f, dm(Zl.get(f) || null, a, b, c, d, e));
          return true;
        case "gotpointercapture":
          return f = e.pointerId, $l.set(f, dm($l.get(f) || null, a, b, c, d, e)), true;
      }
      return false;
    }
    function fm(a) {
      var b = Hb(a.target);
      if (null !== b) {
        var c = Ic(b);
        if (null !== c) {
          if (b = c.tag, 13 === b) {
            if (b = Jc(c), null !== b) {
              a.blockedOn = b;
              tb(a.priority, function() {
                if (13 === c.tag) {
                  var d = Jg(c), e = Sd(c, d);
                  null !== e && kg(e, c, d);
                  $k(c, d);
                }
              });
              return;
            }
          } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {
            a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
            return;
          }
        }
      }
      a.blockedOn = null;
    }
    function gm(a) {
      if (null !== a.blockedOn)
        return false;
      for (var b = a.targetContainers; 0 < b.length; ) {
        var c = hm(a.nativeEvent);
        if (null === c) {
          c = a.nativeEvent;
          var d = new c.constructor(c.type, c);
          Bc = d;
          c.target.dispatchEvent(d);
          Bc = null;
        } else
          return b = Jb(c), null !== b && bl(b), a.blockedOn = c, false;
        b.shift();
      }
      return true;
    }
    function im(a, b, c) {
      gm(a) && c.delete(b);
    }
    function jm() {
      Vl = false;
      null !== Wl && gm(Wl) && (Wl = null);
      null !== Xl && gm(Xl) && (Xl = null);
      null !== Yl && gm(Yl) && (Yl = null);
      Zl.forEach(im);
      $l.forEach(im);
    }
    function km(a, b) {
      a.blockedOn === b && (a.blockedOn = null, Vl || (Vl = true, ba.unstable_scheduleCallback(ba.unstable_NormalPriority, jm)));
    }
    var lm = null;
    function mm(a) {
      lm !== a && (lm = a, ba.unstable_scheduleCallback(ba.unstable_NormalPriority, function() {
        lm === a && (lm = null);
        for (var b = 0; b < a.length; b += 3) {
          var c = a[b], d = a[b + 1], e = a[b + 2];
          if ("function" !== typeof d)
            if (null === nm(d || c))
              continue;
            else
              break;
          var f = Jb(c);
          null !== f && (a.splice(b, 3), b -= 3, Eg(f, { pending: true, data: e, method: c.method, action: d }, d, e));
        }
      }));
    }
    function kj(a) {
      function b(k) {
        return km(k, a);
      }
      null !== Wl && km(Wl, a);
      null !== Xl && km(Xl, a);
      null !== Yl && km(Yl, a);
      Zl.forEach(b);
      $l.forEach(b);
      for (var c = 0; c < am.length; c++) {
        var d = am[c];
        d.blockedOn === a && (d.blockedOn = null);
      }
      for (; 0 < am.length && (c = am[0], null === c.blockedOn); )
        fm(c), null === c.blockedOn && am.shift();
      c = a.getRootNode().$$reactFormReplay;
      if (null != c)
        for (d = 0; d < c.length; d += 3) {
          var e = c[d], f = c[d + 1], g = Lb(e);
          if ("function" === typeof f)
            g || mm(c);
          else if (g) {
            var h = null;
            if (f && f.hasAttribute("formAction"))
              if (e = f, g = Lb(f))
                h = g.formAction;
              else {
                if (null !== nm(e))
                  continue;
              }
            else
              h = g.action;
            "function" === typeof h ? c[d + 1] = h : (c.splice(d, 3), d -= 3);
            mm(c);
          }
        }
    }
    var om = da.ReactCurrentBatchConfig;
    var Ni = true;
    function pm(a, b, c, d) {
      var e = F, f = om.transition;
      om.transition = null;
      try {
        F = 2, qm(a, b, c, d);
      } finally {
        F = e, om.transition = f;
      }
    }
    function rm(a, b, c, d) {
      var e = F, f = om.transition;
      om.transition = null;
      try {
        F = 8, qm(a, b, c, d);
      } finally {
        F = e, om.transition = f;
      }
    }
    function qm(a, b, c, d) {
      if (Ni) {
        var e = hm(d);
        if (null === e)
          sm(a, b, d, tm, c), cm(a, d);
        else if (em(e, a, b, c, d))
          d.stopPropagation();
        else if (cm(a, d), b & 4 && -1 < bm.indexOf(a)) {
          for (; null !== e; ) {
            var f = Jb(e);
            null !== f && Zk(f);
            f = hm(d);
            null === f && sm(a, b, d, tm, c);
            if (f === e)
              break;
            e = f;
          }
          null !== e && d.stopPropagation();
        } else
          sm(a, b, d, null, c);
      }
    }
    function hm(a) {
      a = Cc(a);
      return nm(a);
    }
    var tm = null;
    function nm(a) {
      tm = null;
      a = Hb(a);
      if (null !== a) {
        var b = Ic(a);
        if (null === b)
          a = null;
        else {
          var c = b.tag;
          if (13 === c) {
            a = Jc(b);
            if (null !== a)
              return a;
            a = null;
          } else if (3 === c) {
            if (b.stateNode.current.memoizedState.isDehydrated)
              return 3 === b.tag ? b.stateNode.containerInfo : null;
            a = null;
          } else
            b !== a && (a = null);
        }
      }
      tm = a;
      return null;
    }
    function jk(a) {
      switch (a) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return 2;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return 8;
        case "message":
          switch (Wa()) {
            case Xa:
              return 2;
            case Ya:
              return 8;
            case Za:
            case $a:
              return 32;
            case ab:
              return 536870912;
            default:
              return 32;
          }
        default:
          return 32;
      }
    }
    var um = null;
    var vm = null;
    var wm = null;
    function xm() {
      if (wm)
        return wm;
      var a, b = vm, c = b.length, d, e = "value" in um ? um.value : um.textContent, f = e.length;
      for (a = 0; a < c && b[a] === e[a]; a++)
        ;
      var g = c - a;
      for (d = 1; d <= g && b[c - d] === e[f - d]; d++)
        ;
      return wm = e.slice(a, 1 < d ? 1 - d : void 0);
    }
    var ym = [9, 13, 27, 32];
    var zm = Sb && "CompositionEvent" in window;
    var Am = null;
    Sb && "documentMode" in document && (Am = document.documentMode);
    var Bm = Sb && "TextEvent" in window && !Am;
    var Dm = Sb && (!zm || Am && 8 < Am && 11 >= Am);
    var Em = String.fromCharCode(32);
    var Fm = false;
    function Gm(a, b) {
      switch (a) {
        case "keyup":
          return -1 !== ym.indexOf(b.keyCode);
        case "keydown":
          return 229 !== b.keyCode;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function Hm(a) {
      a = a.detail;
      return "object" === typeof a && "data" in a ? a.data : null;
    }
    var Im = false;
    function Jm(a, b) {
      switch (a) {
        case "compositionend":
          return Hm(b);
        case "keypress":
          if (32 !== b.which)
            return null;
          Fm = true;
          return Em;
        case "textInput":
          return a = b.data, a === Em && Fm ? null : a;
        default:
          return null;
      }
    }
    function Km(a, b) {
      if (Im)
        return "compositionend" === a || !zm && Gm(a, b) ? (a = xm(), wm = vm = um = null, Im = false, a) : null;
      switch (a) {
        case "paste":
          return null;
        case "keypress":
          if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
            if (b.char && 1 < b.char.length)
              return b.char;
            if (b.which)
              return String.fromCharCode(b.which);
          }
          return null;
        case "compositionend":
          return Dm && "ko" !== b.locale ? null : b.data;
        default:
          return null;
      }
    }
    var Lm = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
    function Mm(a) {
      var b = a && a.nodeName && a.nodeName.toLowerCase();
      return "input" === b ? !!Lm[a.type] : "textarea" === b ? true : false;
    }
    function Nm(a, b, c, d) {
      Gc(d);
      b = Om(b, "onChange");
      0 < b.length && (c = new nl("onChange", "change", null, c, d), a.push({ event: c, listeners: b }));
    }
    var Pm = null;
    var Qm = null;
    function Rm(a) {
      Sm(a, 0);
    }
    function Tm(a) {
      var b = Kb(a);
      if (kc(b))
        return a;
    }
    function Um(a, b) {
      if ("change" === a)
        return b;
    }
    var Vm = false;
    if (Sb) {
      if (Sb) {
        Xm = "oninput" in document;
        if (!Xm) {
          Ym = document.createElement("div");
          Ym.setAttribute("oninput", "return;");
          Xm = "function" === typeof Ym.oninput;
        }
        Wm = Xm;
      } else
        Wm = false;
      Vm = Wm && (!document.documentMode || 9 < document.documentMode);
    }
    var Wm;
    var Xm;
    var Ym;
    function Zm() {
      Pm && (Pm.detachEvent("onpropertychange", $m), Qm = Pm = null);
    }
    function $m(a) {
      if ("value" === a.propertyName && Tm(Qm)) {
        var b = [];
        Nm(b, Qm, a, Cc(a));
        el(Rm, b);
      }
    }
    function an(a, b, c) {
      "focusin" === a ? (Zm(), Pm = b, Qm = c, Pm.attachEvent("onpropertychange", $m)) : "focusout" === a && Zm();
    }
    function bn(a) {
      if ("selectionchange" === a || "keyup" === a || "keydown" === a)
        return Tm(Qm);
    }
    function cn(a, b) {
      if ("click" === a)
        return Tm(b);
    }
    function dn(a, b) {
      if ("input" === a || "change" === a)
        return Tm(b);
    }
    function en(a) {
      for (; a && a.firstChild; )
        a = a.firstChild;
      return a;
    }
    function fn(a, b) {
      var c = en(a);
      a = 0;
      for (var d; c; ) {
        if (3 === c.nodeType) {
          d = a + c.textContent.length;
          if (a <= b && d >= b)
            return { node: c, offset: b - a };
          a = d;
        }
        a: {
          for (; c; ) {
            if (c.nextSibling) {
              c = c.nextSibling;
              break a;
            }
            c = c.parentNode;
          }
          c = void 0;
        }
        c = en(c);
      }
    }
    function gn(a, b) {
      return a && b ? a === b ? true : a && 3 === a.nodeType ? false : b && 3 === b.nodeType ? gn(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : false : false;
    }
    function Oi() {
      for (var a = window, b = lc(); b instanceof a.HTMLIFrameElement; ) {
        try {
          var c = "string" === typeof b.contentWindow.location.href;
        } catch (d) {
          c = false;
        }
        if (c)
          a = b.contentWindow;
        else
          break;
        b = lc(a.document);
      }
      return b;
    }
    function Pi(a) {
      var b = a && a.nodeName && a.nodeName.toLowerCase();
      return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
    }
    function Jk(a) {
      var b = Oi(), c = a.focusedElem, d = a.selectionRange;
      if (b !== c && c && c.ownerDocument && gn(c.ownerDocument.documentElement, c)) {
        if (null !== d && Pi(c)) {
          if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c)
            c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);
          else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
            a = a.getSelection();
            var e = c.textContent.length, f = Math.min(d.start, e);
            d = void 0 === d.end ? f : Math.min(d.end, e);
            !a.extend && f > d && (e = d, d = f, f = e);
            e = fn(c, f);
            var g = fn(
              c,
              d
            );
            e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
          }
        }
        b = [];
        for (a = c; a = a.parentNode; )
          1 === a.nodeType && b.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
        "function" === typeof c.focus && c.focus();
        for (c = 0; c < b.length; c++)
          a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
      }
    }
    var hn = Sb && "documentMode" in document && 11 >= document.documentMode;
    var jn = null;
    var kn = null;
    var ln = null;
    var mn = false;
    function nn(a, b, c) {
      var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
      mn || null == jn || jn !== lc(d) || (d = jn, "selectionStart" in d && Pi(d) ? d = { start: d.selectionStart, end: d.selectionEnd } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = { anchorNode: d.anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset }), ln && ee(ln, d) || (ln = d, d = Om(kn, "onSelect"), 0 < d.length && (b = new nl("onSelect", "select", null, b, c), a.push({ event: b, listeners: d }), b.target = jn)));
    }
    function on(a, b) {
      var c = {};
      c[a.toLowerCase()] = b.toLowerCase();
      c["Webkit" + a] = "webkit" + b;
      c["Moz" + a] = "moz" + b;
      return c;
    }
    var pn = { animationend: on("Animation", "AnimationEnd"), animationiteration: on("Animation", "AnimationIteration"), animationstart: on("Animation", "AnimationStart"), transitionend: on("Transition", "TransitionEnd") };
    var qn = {};
    var rn = {};
    Sb && (rn = document.createElement("div").style, "AnimationEvent" in window || (delete pn.animationend.animation, delete pn.animationiteration.animation, delete pn.animationstart.animation), "TransitionEvent" in window || delete pn.transitionend.transition);
    function sn(a) {
      if (qn[a])
        return qn[a];
      if (!pn[a])
        return a;
      var b = pn[a], c;
      for (c in b)
        if (b.hasOwnProperty(c) && c in rn)
          return qn[a] = b[c];
      return a;
    }
    var tn = sn("animationend");
    var un = sn("animationiteration");
    var vn = sn("animationstart");
    var wn = sn("transitionend");
    var xn = /* @__PURE__ */ new Map();
    var yn = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
    function zn(a, b) {
      xn.set(a, b);
      Qb(b, [a]);
    }
    for (An = 0; An < yn.length; An++) {
      Bn = yn[An], Cn = Bn.toLowerCase(), Dn = Bn[0].toUpperCase() + Bn.slice(1);
      zn(Cn, "on" + Dn);
    }
    var Bn;
    var Cn;
    var Dn;
    var An;
    zn(tn, "onAnimationEnd");
    zn(un, "onAnimationIteration");
    zn(vn, "onAnimationStart");
    zn("dblclick", "onDoubleClick");
    zn("focusin", "onFocus");
    zn("focusout", "onBlur");
    zn(wn, "onTransitionEnd");
    Rb("onMouseEnter", ["mouseout", "mouseover"]);
    Rb("onMouseLeave", ["mouseout", "mouseover"]);
    Rb("onPointerEnter", ["pointerout", "pointerover"]);
    Rb("onPointerLeave", ["pointerout", "pointerover"]);
    Qb("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
    Qb("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
    Qb("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
    Qb("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
    Qb("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
    Qb("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
    var Bd = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");
    var En = new Set("cancel close invalid load scroll toggle".split(" ").concat(Bd));
    function Fn(a, b, c) {
      var d = a.type || "unknown-event";
      a.currentTarget = c;
      Ci(d, b, void 0, a);
      a.currentTarget = null;
    }
    function Sm(a, b) {
      b = 0 !== (b & 4);
      for (var c = 0; c < a.length; c++) {
        var d = a[c], e = d.event;
        d = d.listeners;
        a: {
          var f = void 0;
          if (b)
            for (var g = d.length - 1; 0 <= g; g--) {
              var h = d[g], k = h.instance, p = h.currentTarget;
              h = h.listener;
              if (k !== f && e.isPropagationStopped())
                break a;
              Fn(e, h, p);
              f = k;
            }
          else
            for (g = 0; g < d.length; g++) {
              h = d[g];
              k = h.instance;
              p = h.currentTarget;
              h = h.listener;
              if (k !== f && e.isPropagationStopped())
                break a;
              Fn(e, h, p);
              f = k;
            }
        }
      }
      if (yi)
        throw a = zi, yi = false, zi = null, a;
    }
    function L(a, b) {
      var c = b[Ab];
      void 0 === c && (c = b[Ab] = /* @__PURE__ */ new Set());
      var d = a + "__bubble";
      c.has(d) || (Gn(b, a, 2, false), c.add(d));
    }
    function Hn(a, b, c) {
      var d = 0;
      b && (d |= 4);
      Gn(c, a, d, b);
    }
    var In = "_reactListening" + Math.random().toString(36).slice(2);
    function pi(a) {
      if (!a[In]) {
        a[In] = true;
        Ob.forEach(function(c) {
          "selectionchange" !== c && (En.has(c) || Hn(c, false, a), Hn(c, true, a));
        });
        var b = 9 === a.nodeType ? a : a.ownerDocument;
        null === b || b[In] || (b[In] = true, Hn("selectionchange", false, b));
      }
    }
    function Gn(a, b, c, d) {
      switch (jk(b)) {
        case 2:
          var e = pm;
          break;
        case 8:
          e = rm;
          break;
        default:
          e = qm;
      }
      c = e.bind(null, b, c, a);
      e = void 0;
      !gl || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = true);
      d ? void 0 !== e ? a.addEventListener(b, c, { capture: true, passive: e }) : a.addEventListener(b, c, true) : void 0 !== e ? a.addEventListener(b, c, { passive: e }) : a.addEventListener(b, c, false);
    }
    function sm(a, b, c, d, e) {
      var f = d;
      if (0 === (b & 1) && 0 === (b & 2) && null !== d)
        a:
          for (; ; ) {
            if (null === d)
              return;
            var g = d.tag;
            if (3 === g || 4 === g) {
              var h = d.stateNode.containerInfo;
              if (h === e || 8 === h.nodeType && h.parentNode === e)
                break;
              if (4 === g)
                for (g = d.return; null !== g; ) {
                  var k = g.tag;
                  if (3 === k || 4 === k) {
                    if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e)
                      return;
                  }
                  g = g.return;
                }
              for (; null !== h; ) {
                g = Hb(h);
                if (null === g)
                  return;
                k = g.tag;
                if (5 === k || 6 === k || 26 === k || 27 === k) {
                  d = f = g;
                  continue a;
                }
                h = h.parentNode;
              }
            }
            d = d.return;
          }
      el(function() {
        var p = f, r = Cc(c), w = [];
        a: {
          var q = xn.get(a);
          if (void 0 !== q) {
            var t = nl, y = a;
            switch (a) {
              case "keypress":
                if (0 === il(c))
                  break a;
              case "keydown":
              case "keyup":
                t = Ll;
                break;
              case "focusin":
                y = "focus";
                t = zl;
                break;
              case "focusout":
                y = "blur";
                t = zl;
                break;
              case "beforeblur":
              case "afterblur":
                t = zl;
                break;
              case "click":
                if (2 === c.button)
                  break a;
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                t = vl;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                t = xl;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                t = Pl;
                break;
              case tn:
              case un:
              case vn:
                t = Bl;
                break;
              case wn:
                t = Rl;
                break;
              case "scroll":
                t = pl;
                break;
              case "wheel":
                t = Tl;
                break;
              case "copy":
              case "cut":
              case "paste":
                t = Dl;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                t = Nl;
            }
            var B = 0 !== (b & 4), O = !B && "scroll" === a, P = B ? null !== q ? q + "Capture" : null : q;
            B = [];
            for (var m = p, l; null !== m; ) {
              var n = m;
              l = n.stateNode;
              n = n.tag;
              5 !== n && 26 !== n && 27 !== n || null === l || null === P || (n = fl(m, P), null != n && B.push(Jn(m, n, l)));
              if (O)
                break;
              m = m.return;
            }
            0 < B.length && (q = new t(q, y, null, c, r), w.push({ event: q, listeners: B }));
          }
        }
        if (0 === (b & 7)) {
          a: {
            q = "mouseover" === a || "pointerover" === a;
            t = "mouseout" === a || "pointerout" === a;
            if (q && c !== Bc && (y = c.relatedTarget || c.fromElement) && (Hb(y) || y[zb]))
              break a;
            if (t || q) {
              q = r.window === r ? r : (q = r.ownerDocument) ? q.defaultView || q.parentWindow : window;
              if (t) {
                if (y = c.relatedTarget || c.toElement, t = p, y = y ? Hb(y) : null, null !== y && (O = Ic(y), B = y.tag, y !== O || 5 !== B && 27 !== B && 6 !== B))
                  y = null;
              } else
                t = null, y = p;
              if (t !== y) {
                B = vl;
                n = "onMouseLeave";
                P = "onMouseEnter";
                m = "mouse";
                if ("pointerout" === a || "pointerover" === a)
                  B = Nl, n = "onPointerLeave", P = "onPointerEnter", m = "pointer";
                O = null == t ? q : Kb(t);
                l = null == y ? q : Kb(y);
                q = new B(n, m + "leave", t, c, r);
                q.target = O;
                q.relatedTarget = l;
                n = null;
                Hb(r) === p && (B = new B(P, m + "enter", y, c, r), B.target = l, B.relatedTarget = O, n = B);
                O = n;
                if (t && y)
                  b: {
                    B = t;
                    P = y;
                    m = 0;
                    for (l = B; l; l = Kn(l))
                      m++;
                    l = 0;
                    for (n = P; n; n = Kn(n))
                      l++;
                    for (; 0 < m - l; )
                      B = Kn(B), m--;
                    for (; 0 < l - m; )
                      P = Kn(P), l--;
                    for (; m--; ) {
                      if (B === P || null !== P && B === P.alternate)
                        break b;
                      B = Kn(B);
                      P = Kn(P);
                    }
                    B = null;
                  }
                else
                  B = null;
                null !== t && Ln(w, q, t, B, false);
                null !== y && null !== O && Ln(w, O, y, B, true);
              }
            }
          }
          a: {
            q = p ? Kb(p) : window;
            t = q.nodeName && q.nodeName.toLowerCase();
            if ("select" === t || "input" === t && "file" === q.type)
              var v = Um;
            else if (Mm(q))
              if (Vm)
                v = dn;
              else {
                v = bn;
                var x = an;
              }
            else
              t = q.nodeName, !t || "input" !== t.toLowerCase() || "checkbox" !== q.type && "radio" !== q.type ? p && zc(p.elementType) && (v = Um) : v = cn;
            if (v && (v = v(a, p))) {
              Nm(w, v, c, r);
              break a;
            }
            x && x(
              a,
              q,
              p
            );
            "focusout" === a && p && "number" === q.type && null != p.memoizedProps.value && pc(q, "number", q.value);
          }
          x = p ? Kb(p) : window;
          switch (a) {
            case "focusin":
              if (Mm(x) || "true" === x.contentEditable)
                jn = x, kn = p, ln = null;
              break;
            case "focusout":
              ln = kn = jn = null;
              break;
            case "mousedown":
              mn = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mn = false;
              nn(w, c, r);
              break;
            case "selectionchange":
              if (hn)
                break;
            case "keydown":
            case "keyup":
              nn(w, c, r);
          }
          var A;
          if (zm)
            b: {
              switch (a) {
                case "compositionstart":
                  var z = "onCompositionStart";
                  break b;
                case "compositionend":
                  z = "onCompositionEnd";
                  break b;
                case "compositionupdate":
                  z = "onCompositionUpdate";
                  break b;
              }
              z = void 0;
            }
          else
            Im ? Gm(a, c) && (z = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (z = "onCompositionStart");
          z && (Dm && "ko" !== c.locale && (Im || "onCompositionStart" !== z ? "onCompositionEnd" === z && Im && (A = xm()) : (um = r, vm = "value" in um ? um.value : um.textContent, Im = true)), x = Om(p, z), 0 < x.length && (z = new Fl(z, a, null, c, r), w.push({ event: z, listeners: x }), A ? z.data = A : (A = Hm(c), null !== A && (z.data = A))));
          if (A = Bm ? Jm(a, c) : Km(a, c))
            z = Om(p, "onBeforeInput"), 0 < z.length && (x = new Fl("onBeforeInput", "beforeinput", null, c, r), w.push({ event: x, listeners: z }), x.data = A);
          Ul(w, a, p, c, r);
        }
        Sm(w, b);
      });
    }
    function Jn(a, b, c) {
      return { instance: a, listener: b, currentTarget: c };
    }
    function Om(a, b) {
      for (var c = b + "Capture", d = []; null !== a; ) {
        var e = a, f = e.stateNode;
        e = e.tag;
        5 !== e && 26 !== e && 27 !== e || null === f || (e = fl(a, c), null != e && d.unshift(Jn(a, e, f)), e = fl(a, b), null != e && d.push(Jn(a, e, f)));
        a = a.return;
      }
      return d;
    }
    function Kn(a) {
      if (null === a)
        return null;
      do
        a = a.return;
      while (a && 5 !== a.tag && 27 !== a.tag);
      return a ? a : null;
    }
    function Ln(a, b, c, d, e) {
      for (var f = b._reactName, g = []; null !== c && c !== d; ) {
        var h = c, k = h.alternate, p = h.stateNode;
        h = h.tag;
        if (null !== k && k === d)
          break;
        5 !== h && 26 !== h && 27 !== h || null === p || (k = p, e ? (p = fl(c, f), null != p && g.unshift(Jn(c, p, k))) : e || (p = fl(c, f), null != p && g.push(Jn(c, p, k))));
        c = c.return;
      }
      0 !== g.length && a.push({ event: b, listeners: g });
    }
    var Mn = /\r\n?/g;
    var Nn = /\u0000|\uFFFD/g;
    function On(a) {
      return ("string" === typeof a ? a : "" + a).replace(Mn, "\n").replace(Nn, "");
    }
    function Cd(a, b, c) {
      b = On(b);
      if (On(a) !== b && c)
        throw Error(u(425));
    }
    function Dd() {
    }
    function Z(a, b, c, d, e, f) {
      switch (c) {
        case "children":
          "string" === typeof d ? "body" === b || "textarea" === b && "" === d || vc(a, d) : "number" === typeof d && "body" !== b && vc(a, "" + d);
          break;
        case "className":
          Yb(a, "class", d);
          break;
        case "tabIndex":
          Yb(a, "tabindex", d);
          break;
        case "dir":
        case "role":
        case "viewBox":
        case "width":
        case "height":
          Yb(a, c, d);
          break;
        case "style":
          yc(a, d, f);
          break;
        case "src":
        case "href":
          if ("" === d) {
            a.removeAttribute(c);
            break;
          }
          if (null == d || "function" === typeof d || "symbol" === typeof d || "boolean" === typeof d) {
            a.removeAttribute(c);
            break;
          }
          a.setAttribute(c, "" + d);
          break;
        case "action":
        case "formAction":
          if ("function" === typeof d) {
            a.setAttribute(c, "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you're trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");
            break;
          } else
            "function" === typeof f && ("formAction" === c ? ("input" !== b && Z(a, b, "name", e.name, e, null), Z(
              a,
              b,
              "formEncType",
              e.formEncType,
              e,
              null
            ), Z(a, b, "formMethod", e.formMethod, e, null), Z(a, b, "formTarget", e.formTarget, e, null)) : (Z(a, b, "encType", e.encType, e, null), Z(a, b, "method", e.method, e, null), Z(a, b, "target", e.target, e, null)));
          if (null == d || "symbol" === typeof d || "boolean" === typeof d) {
            a.removeAttribute(c);
            break;
          }
          a.setAttribute(c, "" + d);
          break;
        case "onClick":
          null != d && (a.onclick = Dd);
          break;
        case "onScroll":
          null != d && L("scroll", a);
          break;
        case "dangerouslySetInnerHTML":
          if (null != d) {
            if ("object" !== typeof d || !("__html" in d))
              throw Error(u(61));
            d = d.__html;
            if (null != d) {
              if (null != e.children)
                throw Error(u(60));
              a.innerHTML = d;
            }
          }
          break;
        case "multiple":
          a.multiple = d && "function" !== typeof d && "symbol" !== typeof d;
          break;
        case "muted":
          a.muted = d && "function" !== typeof d && "symbol" !== typeof d;
          break;
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
        case "defaultValue":
        case "defaultChecked":
        case "innerHTML":
          break;
        case "autoFocus":
          break;
        case "xlinkHref":
          if (null == d || "function" === typeof d || "boolean" === typeof d || "symbol" === typeof d) {
            a.removeAttribute("xlink:href");
            break;
          }
          a.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "" + d);
          break;
        case "contentEditable":
        case "spellCheck":
        case "draggable":
        case "value":
        case "autoReverse":
        case "externalResourcesRequired":
        case "focusable":
        case "preserveAlpha":
          null != d && "function" !== typeof d && "symbol" !== typeof d ? a.setAttribute(c, "" + d) : a.removeAttribute(c);
          break;
        case "allowFullScreen":
        case "async":
        case "autoPlay":
        case "controls":
        case "default":
        case "defer":
        case "disabled":
        case "disablePictureInPicture":
        case "disableRemotePlayback":
        case "formNoValidate":
        case "hidden":
        case "loop":
        case "noModule":
        case "noValidate":
        case "open":
        case "playsInline":
        case "readOnly":
        case "required":
        case "reversed":
        case "scoped":
        case "seamless":
        case "itemScope":
          d && "function" !== typeof d && "symbol" !== typeof d ? a.setAttribute(c, "") : a.removeAttribute(c);
          break;
        case "capture":
        case "download":
          true === d ? a.setAttribute(c, "") : false !== d && null != d && "function" !== typeof d && "symbol" !== typeof d ? a.setAttribute(c, d) : a.removeAttribute(c);
          break;
        case "cols":
        case "rows":
        case "size":
        case "span":
          null != d && "function" !== typeof d && "symbol" !== typeof d && !isNaN(d) && 1 <= d ? a.setAttribute(c, d) : a.removeAttribute(c);
          break;
        case "rowSpan":
        case "start":
          null == d || "function" === typeof d || "symbol" === typeof d || isNaN(d) ? a.removeAttribute(c) : a.setAttribute(c, d);
          break;
        case "xlinkActuate":
          Zb(a, "http://www.w3.org/1999/xlink", "xlink:actuate", d);
          break;
        case "xlinkArcrole":
          Zb(a, "http://www.w3.org/1999/xlink", "xlink:arcrole", d);
          break;
        case "xlinkRole":
          Zb(a, "http://www.w3.org/1999/xlink", "xlink:role", d);
          break;
        case "xlinkShow":
          Zb(a, "http://www.w3.org/1999/xlink", "xlink:show", d);
          break;
        case "xlinkTitle":
          Zb(a, "http://www.w3.org/1999/xlink", "xlink:title", d);
          break;
        case "xlinkType":
          Zb(
            a,
            "http://www.w3.org/1999/xlink",
            "xlink:type",
            d
          );
          break;
        case "xmlBase":
          Zb(a, "http://www.w3.org/XML/1998/namespace", "xml:base", d);
          break;
        case "xmlLang":
          Zb(a, "http://www.w3.org/XML/1998/namespace", "xml:lang", d);
          break;
        case "xmlSpace":
          Zb(a, "http://www.w3.org/XML/1998/namespace", "xml:space", d);
          break;
        case "is":
          Xb(a, "is", d);
          break;
        case "innerText":
        case "textContent":
          break;
        default:
          if (!(2 < c.length) || "o" !== c[0] && "O" !== c[0] || "n" !== c[1] && "N" !== c[1])
            e = Ac.get(c) || c, Xb(a, e, d);
      }
    }
    function Pn(a, b, c, d, e, f) {
      switch (c) {
        case "style":
          yc(a, d, f);
          break;
        case "dangerouslySetInnerHTML":
          if (null != d) {
            if ("object" !== typeof d || !("__html" in d))
              throw Error(u(61));
            c = d.__html;
            if (null != c) {
              if (null != e.children)
                throw Error(u(60));
              a.innerHTML = c;
            }
          }
          break;
        case "children":
          "string" === typeof d ? vc(a, d) : "number" === typeof d && vc(a, "" + d);
          break;
        case "onScroll":
          null != d && L("scroll", a);
          break;
        case "onClick":
          null != d && (a.onclick = Dd);
          break;
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
        case "innerHTML":
          break;
        case "innerText":
        case "textContent":
          break;
        default:
          if (!Pb.hasOwnProperty(c))
            a: {
              if ("o" === c[0] && "n" === c[1] && (e = c.endsWith("Capture"), b = c.slice(2, e ? c.length - 7 : void 0), f = Lb(a), f = null != f ? f[c] : null, "function" === typeof f && a.removeEventListener(b, f, e), "function" === typeof d)) {
                "function" !== typeof f && null !== f && (c in a ? a[c] = null : a.hasAttribute(c) && a.removeAttribute(c));
                a.addEventListener(b, d, e);
                break a;
              }
              c in a ? a[c] = d : true === d ? a.setAttribute(c, "") : Xb(a, c, d);
            }
      }
    }
    function oi(a, b, c) {
      switch (b) {
        case "div":
        case "span":
        case "svg":
        case "path":
        case "a":
        case "g":
        case "p":
        case "li":
          break;
        case "input":
          L("invalid", a);
          var d = null, e = null, f = null, g = null, h = null, k = null;
          for (r in c)
            if (c.hasOwnProperty(r)) {
              var p = c[r];
              if (null != p)
                switch (r) {
                  case "name":
                    d = p;
                    break;
                  case "type":
                    e = p;
                    break;
                  case "checked":
                    h = p;
                    break;
                  case "defaultChecked":
                    k = p;
                    break;
                  case "value":
                    f = p;
                    break;
                  case "defaultValue":
                    g = p;
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    if (null != p)
                      throw Error(u(137, b));
                    break;
                  default:
                    Z(
                      a,
                      b,
                      r,
                      p,
                      c,
                      null
                    );
                }
            }
          qc(a, f, g, h, k, e, d, false);
          jc(a);
          return;
        case "select":
          L("invalid", a);
          var r = e = f = null;
          for (d in c)
            if (c.hasOwnProperty(d) && (g = c[d], null != g))
              switch (d) {
                case "value":
                  f = g;
                  break;
                case "defaultValue":
                  e = g;
                  break;
                case "multiple":
                  r = g;
                default:
                  Z(a, b, d, g, c, null);
              }
          b = f;
          c = e;
          a.multiple = !!r;
          null != b ? sc(a, !!r, b, false) : null != c && sc(a, !!r, c, true);
          return;
        case "textarea":
          L("invalid", a);
          f = d = r = null;
          for (e in c)
            if (c.hasOwnProperty(e) && (g = c[e], null != g))
              switch (e) {
                case "value":
                  r = g;
                  break;
                case "defaultValue":
                  d = g;
                  break;
                case "children":
                  f = g;
                  break;
                case "dangerouslySetInnerHTML":
                  if (null != g)
                    throw Error(u(91));
                  break;
                default:
                  Z(a, b, e, g, c, null);
              }
          uc(a, r, d, f);
          jc(a);
          return;
        case "option":
          for (g in c)
            if (c.hasOwnProperty(g) && (r = c[g], null != r))
              switch (g) {
                case "selected":
                  a.selected = r && "function" !== typeof r && "symbol" !== typeof r;
                  break;
                default:
                  Z(a, b, g, r, c, null);
              }
          return;
        case "dialog":
          L("cancel", a);
          L("close", a);
          break;
        case "iframe":
        case "object":
          L("load", a);
          break;
        case "video":
        case "audio":
          for (r = 0; r < Bd.length; r++)
            L(Bd[r], a);
          break;
        case "image":
          L("error", a);
          L(
            "load",
            a
          );
          break;
        case "details":
          L("toggle", a);
          break;
        case "embed":
        case "source":
        case "img":
        case "link":
          L("error", a), L("load", a);
        case "area":
        case "base":
        case "br":
        case "col":
        case "hr":
        case "keygen":
        case "meta":
        case "param":
        case "track":
        case "wbr":
        case "menuitem":
          for (h in c)
            if (c.hasOwnProperty(h) && (r = c[h], null != r))
              switch (h) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw Error(u(137, b));
                default:
                  Z(a, b, h, r, c, null);
              }
          return;
        default:
          if (zc(b)) {
            for (k in c)
              c.hasOwnProperty(k) && (r = c[k], null != r && Pn(a, b, k, r, c, null));
            return;
          }
      }
      for (f in c)
        c.hasOwnProperty(f) && (r = c[f], null != r && Z(a, b, f, r, c, null));
    }
    function vj(a, b, c, d) {
      switch (b) {
        case "div":
        case "span":
        case "svg":
        case "path":
        case "a":
        case "g":
        case "p":
        case "li":
          break;
        case "input":
          var e = null, f = null, g = null, h = null, k = null, p = null, r = null;
          for (t in c) {
            var w = c[t];
            if (c.hasOwnProperty(t) && null != w)
              switch (t) {
                case "checked":
                  break;
                case "value":
                  break;
                case "defaultValue":
                  k = w;
                default:
                  d.hasOwnProperty(t) || Z(a, b, t, null, d, w);
              }
          }
          for (var q in d) {
            var t = d[q];
            w = c[q];
            if (d.hasOwnProperty(q) && (null != t || null != w))
              switch (q) {
                case "type":
                  f = t;
                  break;
                case "name":
                  e = t;
                  break;
                case "checked":
                  p = t;
                  break;
                case "defaultChecked":
                  r = t;
                  break;
                case "value":
                  g = t;
                  break;
                case "defaultValue":
                  h = t;
                  break;
                case "children":
                case "dangerouslySetInnerHTML":
                  if (null != t)
                    throw Error(u(137, b));
                  break;
                default:
                  t !== w && Z(a, b, q, t, d, w);
              }
          }
          oc(a, g, h, k, p, r, f, e);
          return;
        case "select":
          t = g = h = q = null;
          for (f in c)
            if (k = c[f], c.hasOwnProperty(f) && null != k)
              switch (f) {
                case "value":
                  break;
                case "multiple":
                  t = k;
                default:
                  d.hasOwnProperty(f) || Z(a, b, f, null, d, k);
              }
          for (e in d)
            if (f = d[e], k = c[e], d.hasOwnProperty(e) && (null != f || null != k))
              switch (e) {
                case "value":
                  q = f;
                  break;
                case "defaultValue":
                  h = f;
                  break;
                case "multiple":
                  g = f;
                default:
                  f !== k && Z(a, b, e, f, d, k);
              }
          b = h;
          c = g;
          d = t;
          null != q ? sc(a, !!c, q, false) : !!d !== !!c && (null != b ? sc(a, !!c, b, true) : sc(a, !!c, c ? [] : "", false));
          return;
        case "textarea":
          t = q = null;
          for (h in c)
            if (e = c[h], c.hasOwnProperty(h) && null != e && !d.hasOwnProperty(h))
              switch (h) {
                case "value":
                  break;
                case "children":
                  break;
                default:
                  Z(a, b, h, null, d, e);
              }
          for (g in d)
            if (e = d[g], f = c[g], d.hasOwnProperty(g) && (null != e || null != f))
              switch (g) {
                case "value":
                  q = e;
                  break;
                case "defaultValue":
                  t = e;
                  break;
                case "children":
                  break;
                case "dangerouslySetInnerHTML":
                  if (null != e)
                    throw Error(u(91));
                  break;
                default:
                  e !== f && Z(a, b, g, e, d, f);
              }
          tc(a, q, t);
          return;
        case "option":
          for (var y in c)
            if (q = c[y], c.hasOwnProperty(y) && null != q && !d.hasOwnProperty(y))
              switch (y) {
                case "selected":
                  a.selected = false;
                  break;
                default:
                  Z(a, b, y, null, d, q);
              }
          for (k in d)
            if (q = d[k], t = c[k], d.hasOwnProperty(k) && q !== t && (null != q || null != t))
              switch (k) {
                case "selected":
                  a.selected = q && "function" !== typeof q && "symbol" !== typeof q;
                  break;
                default:
                  Z(a, b, k, q, d, t);
              }
          return;
        case "img":
        case "link":
        case "area":
        case "base":
        case "br":
        case "col":
        case "embed":
        case "hr":
        case "keygen":
        case "meta":
        case "param":
        case "source":
        case "track":
        case "wbr":
        case "menuitem":
          for (var B in c)
            q = c[B], c.hasOwnProperty(B) && null != q && !d.hasOwnProperty(B) && Z(a, b, B, null, d, q);
          for (p in d)
            if (q = d[p], t = c[p], d.hasOwnProperty(p) && q !== t && (null != q || null != t))
              switch (p) {
                case "children":
                case "dangerouslySetInnerHTML":
                  if (null != q)
                    throw Error(u(137, b));
                  break;
                default:
                  Z(a, b, p, q, d, t);
              }
          return;
        default:
          if (zc(b)) {
            for (var O in c)
              q = c[O], c.hasOwnProperty(O) && null != q && !d.hasOwnProperty(O) && Pn(a, b, O, null, d, q);
            for (r in d)
              q = d[r], t = c[r], !d.hasOwnProperty(r) || q === t || null == q && null == t || Pn(a, b, r, q, d, t);
            return;
          }
      }
      for (var P in c)
        q = c[P], c.hasOwnProperty(P) && null != q && !d.hasOwnProperty(P) && Z(a, b, P, null, d, q);
      for (w in d)
        q = d[w], t = c[w], !d.hasOwnProperty(w) || q === t || null == q && null == t || Z(a, b, w, q, d, t);
    }
    var Mi = null;
    var Qi = null;
    function ni(a) {
      return 9 === a.nodeType ? a : a.ownerDocument;
    }
    function Ma(a) {
      switch (a) {
        case "http://www.w3.org/2000/svg":
          return 1;
        case "http://www.w3.org/1998/Math/MathML":
          return 2;
        default:
          return 0;
      }
    }
    function Na(a, b) {
      if (0 === a)
        switch (b) {
          case "svg":
            return 1;
          case "math":
            return 2;
          default:
            return 0;
        }
      return 1 === a && "foreignObject" === b ? 0 : a;
    }
    function Gd(a, b) {
      return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
    }
    var nk = "function" === typeof setTimeout ? setTimeout : void 0;
    var vk = "function" === typeof clearTimeout ? clearTimeout : void 0;
    var Qn = "function" === typeof Promise ? Promise : void 0;
    var nf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Qn ? function(a) {
      return Qn.resolve(null).then(a).catch(Rn);
    } : nk;
    function Rn(a) {
      setTimeout(function() {
        throw a;
      });
    }
    function jj(a, b) {
      var c = b, d = 0;
      do {
        var e = c.nextSibling;
        a.removeChild(c);
        if (e && 8 === e.nodeType)
          if (c = e.data, "/$" === c) {
            if (0 === d) {
              a.removeChild(e);
              kj(b);
              return;
            }
            d--;
          } else
            "$" !== c && "$?" !== c && "$!" !== c || d++;
        c = e;
      } while (c);
      kj(b);
    }
    function Ri(a) {
      var b = a.nodeType;
      if (9 === b)
        Sn(a);
      else if (1 === b)
        switch (a.nodeName) {
          case "HEAD":
          case "HTML":
          case "BODY":
            Sn(a);
            break;
          default:
            a.textContent = "";
        }
    }
    function Sn(a) {
      var b = a.firstChild;
      b && 10 === b.nodeType && (b = b.nextSibling);
      for (; b; ) {
        var c = b;
        b = b.nextSibling;
        switch (c.nodeName) {
          case "HTML":
          case "HEAD":
          case "BODY":
            Sn(c);
            Gb(c);
            continue;
          case "SCRIPT":
          case "STYLE":
            continue;
          case "LINK":
            if ("stylesheet" === c.rel.toLowerCase())
              continue;
        }
        a.removeChild(c);
      }
    }
    function td(a, b, c, d) {
      for (; 1 === a.nodeType; ) {
        var e = c;
        if (a.nodeName.toLowerCase() !== b.toLowerCase()) {
          if (!d && ("INPUT" !== a.nodeName || "hidden" !== a.type))
            break;
        } else if (!d)
          if ("input" === b && "hidden" === a.type) {
            var f = null == e.name ? null : "" + e.name;
            if ("hidden" === e.type && a.getAttribute("name") === f)
              return a;
          } else
            return a;
        else if (!a[Fb])
          switch (b) {
            case "meta":
              if (!a.hasAttribute("itemprop"))
                break;
              return a;
            case "link":
              f = a.getAttribute("rel");
              if ("stylesheet" === f && a.hasAttribute("data-precedence"))
                break;
              else if (f !== e.rel || a.getAttribute("href") !== (null == e.href ? null : e.href) || a.getAttribute("crossorigin") !== (null == e.crossOrigin ? null : e.crossOrigin) || a.getAttribute("title") !== (null == e.title ? null : e.title))
                break;
              return a;
            case "style":
              if (a.hasAttribute("data-precedence"))
                break;
              return a;
            case "script":
              f = a.getAttribute("src");
              if ((f !== (null == e.src ? null : e.src) || a.getAttribute("type") !== (null == e.type ? null : e.type) || a.getAttribute("crossorigin") !== (null == e.crossOrigin ? null : e.crossOrigin)) && f && a.hasAttribute("async") && !a.hasAttribute("itemprop"))
                break;
              return a;
            default:
              return a;
          }
        a = ud(a.nextSibling);
        if (null === a)
          break;
      }
      return null;
    }
    function wd(a, b, c) {
      if ("" === b)
        return null;
      for (; 3 !== a.nodeType; ) {
        if (!c)
          return null;
        a = ud(a.nextSibling);
        if (null === a)
          return null;
      }
      return a;
    }
    function ud(a) {
      for (; null != a; a = a.nextSibling) {
        var b = a.nodeType;
        if (1 === b || 3 === b)
          break;
        if (8 === b) {
          b = a.data;
          if ("$" === b || "$!" === b || "$?" === b)
            break;
          if ("/$" === b)
            return null;
        }
      }
      return a;
    }
    function Ib(a) {
      a = a.previousSibling;
      for (var b = 0; a; ) {
        if (8 === a.nodeType) {
          var c = a.data;
          if ("$" === c || "$!" === c || "$?" === c) {
            if (0 === b)
              return a;
            b--;
          } else
            "/$" === c && b++;
        }
        a = a.previousSibling;
      }
      return null;
    }
    function mi(a, b, c) {
      b = ni(c);
      switch (a) {
        case "html":
          a = b.documentElement;
          if (!a)
            throw Error(u(452));
          return a;
        case "head":
          a = b.head;
          if (!a)
            throw Error(u(453));
          return a;
        case "body":
          a = b.body;
          if (!a)
            throw Error(u(454));
          return a;
        default:
          throw Error(u(451));
      }
    }
    var Tn = /* @__PURE__ */ new Map();
    var Un = /* @__PURE__ */ new Set();
    function xj(a) {
      return "function" === typeof a.getRootNode ? a.getRootNode() : a.ownerDocument;
    }
    var Zn = { prefetchDNS: Vn, preconnect: Wn, preload: Xn, preinit: Yn };
    function $n(a, b, c) {
      var d = document;
      if ("string" === typeof c && c) {
        var e = nc(c);
        e = 'link[rel="' + a + '"][href="' + e + '"]';
        "string" === typeof b && (e += '[crossorigin="' + b + '"]');
        Un.has(e) || (Un.add(e), a = { rel: a, crossOrigin: b, href: c }, null === d.querySelector(e) && (b = d.createElement("link"), oi(b, "link", a), Nb(b), d.head.appendChild(b)));
      }
    }
    function Vn(a) {
      $n("dns-prefetch", null, a);
    }
    function Wn(a, b) {
      $n("preconnect", null == b || "string" !== typeof b.crossOrigin ? null : "use-credentials" === b.crossOrigin ? "use-credentials" : "", a);
    }
    function Xn(a, b) {
      var c = document;
      if ("string" === typeof a && a && "object" === typeof b && null !== b && "string" === typeof b.as && b.as && c) {
        var d = b.as, e = 'link[rel="preload"][as="' + nc(d) + '"]';
        if ("image" === d) {
          var f = b.imageSrcSet, g = b.imageSizes;
          "string" === typeof f && "" !== f ? (e += '[imagesrcset="' + nc(f) + '"]', "string" === typeof g && (e += '[imagesizes="' + nc(g) + '"]')) : e += '[href="' + nc(a) + '"]';
        } else
          e += '[href="' + nc(a) + '"]';
        f = e;
        switch (d) {
          case "style":
            f = ao(a);
            break;
          case "script":
            f = bo(a);
        }
        Tn.has(f) || (a = { rel: "preload", as: d, href: "image" === d && b.imageSrcSet ? void 0 : a, crossOrigin: "font" === d ? "" : b.crossOrigin, integrity: b.integrity, type: b.type, nonce: b.nonce, fetchPriority: b.fetchPriority, imageSrcSet: b.imageSrcSet, imageSizes: b.imageSizes }, Tn.set(f, a), null !== c.querySelector(e) || "style" === d && c.querySelector(co(f)) || "script" === d && c.querySelector("script[async]" + f) || (d = c.createElement("link"), oi(d, "link", a), Nb(d), c.head.appendChild(d)));
      }
    }
    function Yn(a, b) {
      var c = document;
      if ("string" === typeof a && a && "object" === typeof b && null !== b)
        switch (b.as) {
          case "style":
            var d = Mb(c).hoistableStyles, e = ao(a), f = b.precedence || "default", g = d.get(e);
            if (g)
              break;
            var h = { loading: 0, preload: null };
            if (g = c.querySelector(co(e)))
              h.loading = 1;
            else {
              a = { rel: "stylesheet", href: a, "data-precedence": f, crossOrigin: b.crossOrigin, integrity: b.integrity, fetchPriority: b.fetchPriority };
              (b = Tn.get(e)) && eo(a, b);
              var k = g = c.createElement("link");
              Nb(k);
              oi(k, "link", a);
              k._p = new Promise(function(p, r) {
                k.onload = p;
                k.onerror = r;
              });
              k.addEventListener("load", function() {
                h.loading |= 1;
              });
              k.addEventListener("error", function() {
                h.loading |= 2;
              });
              h.loading |= 4;
              fo(g, f, c);
            }
            g = { type: "stylesheet", instance: g, count: 1, state: h };
            d.set(e, g);
            break;
          case "script":
            d = Mb(c).hoistableScripts, e = bo(a), f = d.get(e), f || (f = c.querySelector("script[async]" + e), f || (a = { src: a, async: true, crossOrigin: b.crossOrigin, integrity: b.integrity, nonce: b.nonce, fetchPriority: b.fetchPriority }, (b = Tn.get(e)) && go(a, b), f = c.createElement("script"), Nb(f), oi(
              f,
              "link",
              a
            ), c.head.appendChild(f)), f = { type: "script", instance: f, count: 1, state: null }, d.set(e, f));
        }
    }
    function Pk(a, b, c) {
      b = (b = Ia.current) ? xj(b) : null;
      if (!b)
        throw Error(u(446));
      switch (a) {
        case "meta":
        case "title":
          return null;
        case "style":
          return "string" === typeof c.precedence && "string" === typeof c.href ? (c = ao(c.href), b = Mb(b).hoistableStyles, a = b.get(c), a || (a = { type: "style", instance: null, count: 0, state: null }, b.set(c, a)), a) : { type: "void", instance: null, count: 0, state: null };
        case "link":
          if ("stylesheet" === c.rel && "string" === typeof c.href && "string" === typeof c.precedence) {
            a = ao(c.href);
            var d = Mb(b).hoistableStyles, e = d.get(a);
            e || (b = b.ownerDocument || b, e = { type: "stylesheet", instance: null, count: 0, state: { loading: 0, preload: null } }, d.set(a, e), Tn.has(a) || ho(b, a, { rel: "preload", as: "style", href: c.href, crossOrigin: c.crossOrigin, integrity: c.integrity, media: c.media, hrefLang: c.hrefLang, referrerPolicy: c.referrerPolicy }, e.state));
            return e;
          }
          return null;
        case "script":
          return "string" === typeof c.src && true === c.async ? (c = bo(c.src), b = Mb(b).hoistableScripts, a = b.get(c), a || (a = { type: "script", instance: null, count: 0, state: null }, b.set(c, a)), a) : {
            type: "void",
            instance: null,
            count: 0,
            state: null
          };
        default:
          throw Error(u(444, a));
      }
    }
    function ao(a) {
      return 'href="' + nc(a) + '"';
    }
    function co(a) {
      return 'link[rel="stylesheet"][' + a + "]";
    }
    function io(a) {
      return C({}, a, { "data-precedence": a.precedence, precedence: null });
    }
    function ho(a, b, c, d) {
      Tn.set(b, c);
      a.querySelector(co(b)) || (a.querySelector('link[rel="preload"][as="style"][' + b + "]") ? d.loading = 1 : (b = a.createElement("link"), d.preload = b, b.addEventListener("load", function() {
        return d.loading |= 1;
      }), b.addEventListener("error", function() {
        return d.loading |= 2;
      }), oi(b, "link", c), Nb(b), a.head.appendChild(b)));
    }
    function bo(a) {
      return '[src="' + nc(a) + '"]';
    }
    function uj(a, b, c) {
      b.count++;
      if (null === b.instance)
        switch (b.type) {
          case "style":
            var d = a.querySelector('style[data-href~="' + nc(c.href) + '"]');
            if (d)
              return b.instance = d, Nb(d), d;
            var e = C({}, c, { "data-href": c.href, "data-precedence": c.precedence, href: null, precedence: null });
            d = (a.ownerDocument || a).createElement("style");
            Nb(d);
            oi(d, "style", e);
            fo(d, c.precedence, a);
            return b.instance = d;
          case "stylesheet":
            e = ao(c.href);
            var f = a.querySelector(co(e));
            if (f)
              return b.instance = f, Nb(f), f;
            d = io(c);
            (e = Tn.get(e)) && eo(d, e);
            f = (a.ownerDocument || a).createElement("link");
            Nb(f);
            var g = f;
            g._p = new Promise(function(h, k) {
              g.onload = h;
              g.onerror = k;
            });
            oi(f, "link", d);
            b.state.loading |= 4;
            fo(f, c.precedence, a);
            return b.instance = f;
          case "script":
            f = bo(c.src);
            if (e = a.querySelector("script[async]" + f))
              return b.instance = e, Nb(e), e;
            d = c;
            if (e = Tn.get(f))
              d = C({}, c), go(d, e);
            a = a.ownerDocument || a;
            e = a.createElement("script");
            Nb(e);
            oi(e, "link", d);
            a.head.appendChild(e);
            return b.instance = e;
          case "void":
            return null;
          default:
            throw Error(u(443, b.type));
        }
      else
        "stylesheet" === b.type && 0 === (b.state.loading & 4) && (d = b.instance, b.state.loading |= 4, fo(d, c.precedence, a));
      return b.instance;
    }
    function fo(a, b, c) {
      for (var d = c.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'), e = d.length ? d[d.length - 1] : null, f = e, g = 0; g < d.length; g++) {
        var h = d[g];
        if (h.dataset.precedence === b)
          f = h;
        else if (f !== e)
          break;
      }
      f ? f.parentNode.insertBefore(a, f.nextSibling) : (b = 9 === c.nodeType ? c.head : c, b.insertBefore(a, b.firstChild));
    }
    function eo(a, b) {
      null == a.crossOrigin && (a.crossOrigin = b.crossOrigin);
      null == a.referrerPolicy && (a.referrerPolicy = b.referrerPolicy);
      null == a.title && (a.title = b.title);
    }
    function go(a, b) {
      null == a.crossOrigin && (a.crossOrigin = b.crossOrigin);
      null == a.referrerPolicy && (a.referrerPolicy = b.referrerPolicy);
      null == a.integrity && (a.referrerPolicy = b.integrity);
    }
    var wj = null;
    function sj(a, b, c) {
      if (null === wj) {
        var d = /* @__PURE__ */ new Map();
        var e = wj = /* @__PURE__ */ new Map();
        e.set(c, d);
      } else
        e = wj, d = e.get(c), d || (d = /* @__PURE__ */ new Map(), e.set(c, d));
      if (d.has(a))
        return d;
      d.set(a, null);
      c = c.getElementsByTagName(a);
      for (e = 0; e < c.length; e++) {
        var f = c[e];
        if (!(f[Fb] || f[xb] || "link" === a && "stylesheet" === f.getAttribute("rel")) && "http://www.w3.org/2000/svg" !== f.namespaceURI) {
          var g = f.getAttribute(b) || "";
          g = a + g;
          var h = d.get(g);
          h ? h.push(f) : d.set(g, [f]);
        }
      }
      return d;
    }
    function tj(a, b, c) {
      a = a.ownerDocument || a;
      a.head.insertBefore(c, "title" === b ? a.querySelector("head > title") : null);
    }
    function Rk(a, b, c) {
      if (1 === c || null != b.itemProp)
        return false;
      switch (a) {
        case "meta":
        case "title":
          return true;
        case "style":
          if ("string" !== typeof b.precedence || "string" !== typeof b.href || "" === b.href)
            break;
          return true;
        case "link":
          if ("string" !== typeof b.rel || "string" !== typeof b.href || "" === b.href || b.onLoad || b.onError)
            break;
          switch (b.rel) {
            case "stylesheet":
              return a = b.disabled, "string" === typeof b.precedence && null == a;
            default:
              return true;
          }
        case "script":
          if (true === b.async && !b.onLoad && !b.onError && "string" === typeof b.src && b.src)
            return true;
      }
      return false;
    }
    var pk = null;
    function qk() {
    }
    function Kj(a, b, c) {
      if (null === pk)
        throw Error(u(475));
      var d = pk;
      if ("stylesheet" === b.type && ("string" !== typeof c.media || false !== matchMedia(c.media).matches)) {
        if (null === b.instance) {
          var e = ao(c.href), f = a.querySelector(co(e));
          if (f) {
            a = f._p;
            null !== a && "object" === typeof a && "function" === typeof a.then && (d.count++, d = jo.bind(d), a.then(d, d));
            b.state.loading |= 4;
            b.instance = f;
            Nb(f);
            return;
          }
          f = a.ownerDocument || a;
          c = io(c);
          (e = Tn.get(e)) && eo(c, e);
          f = f.createElement("link");
          Nb(f);
          var g = f;
          g._p = new Promise(function(h, k) {
            g.onload = h;
            g.onerror = k;
          });
          oi(f, "link", c);
          b.instance = f;
        }
        null === d.stylesheets && (d.stylesheets = /* @__PURE__ */ new Map());
        d.stylesheets.set(b, a);
        (a = b.state.preload) && 0 === (b.state.loading & 3) && (d.count++, b = jo.bind(d), a.addEventListener("load", b), a.addEventListener("error", b));
      }
    }
    function rk() {
      if (null === pk)
        throw Error(u(475));
      var a = pk;
      a.stylesheets && 0 === a.count && ko(a, a.stylesheets);
      return 0 < a.count ? function(b) {
        var c = setTimeout(function() {
          a.stylesheets && ko(a, a.stylesheets);
          if (a.unsuspend) {
            var d = a.unsuspend;
            a.unsuspend = null;
            d();
          }
        }, 6e4);
        a.unsuspend = b;
        return function() {
          a.unsuspend = null;
          clearTimeout(c);
        };
      } : null;
    }
    function jo() {
      this.count--;
      if (0 === this.count) {
        if (this.stylesheets)
          ko(this, this.stylesheets);
        else if (this.unsuspend) {
          var a = this.unsuspend;
          this.unsuspend = null;
          a();
        }
      }
    }
    var lo = null;
    function ko(a, b) {
      a.stylesheets = null;
      null !== a.unsuspend && (a.count++, lo = /* @__PURE__ */ new Map(), b.forEach(mo, a), lo = null, jo.call(a));
    }
    function mo(a, b) {
      if (!(b.state.loading & 4)) {
        var c = lo.get(a);
        if (c)
          var d = c.get("last");
        else {
          c = /* @__PURE__ */ new Map();
          lo.set(a, c);
          for (var e = a.querySelectorAll("link[data-precedence],style[data-precedence]"), f = 0; f < e.length; f++) {
            var g = e[f];
            if ("link" === g.nodeName || "not all" !== g.getAttribute("media"))
              c.set("p" + g.dataset.precedence, g), d = g;
          }
          d && c.set("last", d);
        }
        e = b.instance;
        g = e.getAttribute("data-precedence");
        f = c.get("p" + g) || d;
        f === d && c.set("last", e);
        c.set(g, e);
        this.count++;
        d = jo.bind(this);
        e.addEventListener("load", d);
        e.addEventListener(
          "error",
          d
        );
        f ? f.parentNode.insertBefore(e, f.nextSibling) : (a = 9 === a.nodeType ? a.head : a, a.insertBefore(e, a.firstChild));
        b.state.loading |= 4;
      }
    }
    var no = ca.Dispatcher;
    "undefined" !== typeof document && (no.current = Zn);
    var oo = "function" === typeof reportError ? reportError : function(a) {
      console.error(a);
    };
    function po(a) {
      this._internalRoot = a;
    }
    qo.prototype.render = po.prototype.render = function(a) {
      var b = this._internalRoot;
      if (null === b)
        throw Error(u(409));
      Xk(a, b, null, null);
    };
    qo.prototype.unmount = po.prototype.unmount = function() {
      var a = this._internalRoot;
      if (null !== a) {
        this._internalRoot = null;
        var b = a.containerInfo;
        tk(function() {
          Xk(null, a, null, null);
        });
        b[zb] = null;
      }
    };
    function qo(a) {
      this._internalRoot = a;
    }
    qo.prototype.unstable_scheduleHydration = function(a) {
      if (a) {
        var b = F;
        a = { blockedOn: null, target: a, priority: b };
        for (var c = 0; c < am.length && 0 !== b && b < am[c].priority; c++)
          ;
        am.splice(c, 0, a);
        0 === c && fm(a);
      }
    };
    function ro(a) {
      return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
    }
    function so(a) {
      return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
    }
    function to() {
    }
    function uo(a, b, c, d, e) {
      if (e) {
        if ("function" === typeof d) {
          var f = d;
          d = function() {
            var p = Yk(g);
            f.call(p);
          };
        }
        var g = Wk(b, d, a, 0, null, false, false, "", to);
        a._reactRootContainer = g;
        a[zb] = g.current;
        pi(8 === a.nodeType ? a.parentNode : a);
        tk();
        return g;
      }
      Ri(a);
      if ("function" === typeof d) {
        var h = d;
        d = function() {
          var p = Yk(k);
          h.call(p);
        };
      }
      var k = Tk(a, 0, false, null, null, false, false, "", to);
      a._reactRootContainer = k;
      a[zb] = k.current;
      pi(8 === a.nodeType ? a.parentNode : a);
      tk(function() {
        Xk(b, k, c, d);
      });
      return k;
    }
    function vo(a, b, c, d, e) {
      var f = c._reactRootContainer;
      if (f) {
        var g = f;
        if ("function" === typeof e) {
          var h = e;
          e = function() {
            var k = Yk(g);
            h.call(k);
          };
        }
        Xk(b, g, a, e);
      } else
        g = uo(c, b, a, e, d);
      return Yk(g);
    }
    var wo = ca.Dispatcher;
    ca.Events = [Jb, Kb, Lb, Gc, Hc, sk];
    var xo = { findFiberByHostInstance: Hb, bundleType: 0, version: "18.3.0-experimental-a1c62b8a7-20230627", rendererPackageName: "react-dom" };
    var yo = { bundleType: xo.bundleType, version: xo.version, rendererPackageName: xo.rendererPackageName, rendererConfig: xo.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: da.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
      a = Mc(a);
      return null === a ? null : a.stateNode;
    }, findFiberByHostInstance: xo.findFiberByHostInstance || cl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.3.0-experimental-a1c62b8a7-20230627" };
    if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
      zo = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (!zo.isDisabled && zo.supportsFiber)
        try {
          bb = zo.inject(yo), cb = zo;
        } catch (a) {
        }
    }
    var zo;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ca;
    exports.createPortal = function(a, b) {
      var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
      if (!ro(b))
        throw Error(u(200));
      return Uk(a, b, null, c);
    };
    exports.createRoot = function(a, b) {
      if (!ro(a))
        throw Error(u(299));
      var c = false, d = "", e = oo;
      null !== b && void 0 !== b && (true === b.unstable_strictMode && (c = true), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));
      b = Tk(a, 1, false, null, null, c, false, d, e);
      a[zb] = b.current;
      no.current = Zn;
      pi(8 === a.nodeType ? a.parentNode : a);
      return new po(b);
    };
    exports.experimental_useFormStatus = function() {
      return fa.current.useHostTransitionStatus();
    };
    exports.findDOMNode = function(a) {
      if (null == a)
        return null;
      if (1 === a.nodeType)
        return a;
      var b = a._reactInternals;
      if (void 0 === b) {
        if ("function" === typeof a.render)
          throw Error(u(188));
        a = Object.keys(a).join(",");
        throw Error(u(268, a));
      }
      a = Mc(b);
      a = null === a ? null : a.stateNode;
      return a;
    };
    exports.flushSync = function(a) {
      return tk(a);
    };
    exports.hydrate = function(a, b, c) {
      if (!so(b))
        throw Error(u(200));
      return vo(null, a, b, true, c);
    };
    exports.hydrateRoot = function(a, b, c) {
      if (!ro(a))
        throw Error(u(405));
      var d = false, e = "", f = oo;
      null !== c && void 0 !== c && (true === c.unstable_strictMode && (d = true), void 0 !== c.identifierPrefix && (e = c.identifierPrefix), void 0 !== c.onRecoverableError && (f = c.onRecoverableError));
      b = Wk(b, null, a, 1, null != c ? c : null, d, false, e, f);
      a[zb] = b.current;
      no.current = Zn;
      pi(a);
      return new qo(b);
    };
    exports.preconnect = function(a, b) {
      var c = wo.current;
      c && c.preconnect(a, b);
    };
    exports.prefetchDNS = function(a) {
      var b = wo.current;
      b && b.prefetchDNS(a);
    };
    exports.preinit = function(a, b) {
      var c = wo.current;
      c && c.preinit(a, b);
    };
    exports.preload = function(a, b) {
      var c = wo.current;
      c && c.preload(a, b);
    };
    exports.render = function(a, b, c) {
      if (!so(b))
        throw Error(u(200));
      return vo(null, a, b, false, c);
    };
    exports.unmountComponentAtNode = function(a) {
      if (!so(a))
        throw Error(u(40));
      return a._reactRootContainer ? (tk(function() {
        vo(null, null, a, false, function() {
          a._reactRootContainer = null;
          a[zb] = null;
        });
      }), true) : false;
    };
    exports.unstable_batchedUpdates = sk;
    exports.unstable_renderSubtreeIntoContainer = function(a, b, c, d) {
      if (!so(c))
        throw Error(u(200));
      if (null == a || void 0 === a._reactInternals)
        throw Error(u(38));
      return vo(a, b, c, false, d);
    };
    exports.unstable_runWithPriority = tb;
    exports.version = "18.3.0-experimental-a1c62b8a7-20230627";
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React = require_react();
        var Scheduler = require_scheduler();
        var Internals = {
          usingClientEntryPoint: false,
          Events: null,
          Dispatcher: {
            current: null
          }
        };
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn(format) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var assign = Object.assign;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableSuspenseCallback = false;
        var enableFormActions = true;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableHostSingletons = true;
        var diffInCommitPhase = true;
        var enableAsyncActions = true;
        var alwaysThrottleRetries = true;
        var createRootStrictEffectsByDefault = false;
        var disableCommentsAsDOMContainers = true;
        var disableIEWorkarounds = true;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var enableProfilerNestedUpdatePhase = true;
        var ReactCurrentDispatcher$3 = ReactSharedInternals.ReactCurrentDispatcher;
        var sharedNotPendingObject = {
          pending: false,
          data: null,
          method: null,
          action: null
        };
        var NotPending = Object.freeze(sharedNotPendingObject);
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher$3.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useFormStatus() {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useHostTransitionStatus();
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
        var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var contextStackCursor$1 = createCursor(null);
        var contextFiberStackCursor = createCursor(null);
        var rootInstanceStackCursor = createCursor(null);
        var hostTransitionProviderCursor = createCursor(null);
        var HostTransitionContext = {
          $$typeof: REACT_CONTEXT_TYPE,
          _currentValue: null,
          _currentValue2: null,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
          _defaultValue: null,
          _globalName: null
        };
        function requiredContext(c) {
          {
            if (c === null) {
              error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return c;
        }
        function getCurrentRootHostContainer() {
          return rootInstanceStackCursor.current;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, null, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          {
            var stateHook = fiber.memoizedState;
            if (stateHook !== null) {
              push(hostTransitionProviderCursor, fiber, fiber);
            }
          }
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context !== nextContext) {
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current === fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          {
            if (hostTransitionProviderCursor.current === fiber) {
              pop(hostTransitionProviderCursor, fiber);
              {
                HostTransitionContext._currentValue = null;
              }
            }
          }
        }
        var NoFlags$1 = (
          /*                      */
          0
        );
        var PerformedWork = (
          /*                */
          1
        );
        var Placement = (
          /*                    */
          2
        );
        var DidCapture = (
          /*                   */
          128
        );
        var Hydrating = (
          /*                    */
          4096
        );
        var Update = (
          /*                       */
          4
        );
        var ChildDeletion = (
          /*                */
          16
        );
        var ContentReset = (
          /*                 */
          32
        );
        var Callback = (
          /*                     */
          64
        );
        var ForceClientRender = (
          /*            */
          256
        );
        var Ref = (
          /*                          */
          512
        );
        var Snapshot = (
          /*                     */
          1024
        );
        var Passive$1 = (
          /*                      */
          2048
        );
        var Visibility = (
          /*                   */
          8192
        );
        var StoreConsistency = (
          /*             */
          16384
        );
        var ScheduleRetry = StoreConsistency;
        var ShouldSuspendCommit = Visibility;
        var LifecycleEffectMask = Passive$1 | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask = (
          /*               */
          32767
        );
        var Incomplete = (
          /*                   */
          32768
        );
        var ShouldCapture = (
          /*                */
          65536
        );
        var ForceUpdateForLegacySuspense = (
          /* */
          131072
        );
        var Forked = (
          /*                       */
          1048576
        );
        var RefStatic = (
          /*                    */
          2097152
        );
        var LayoutStatic = (
          /*                 */
          4194304
        );
        var PassiveStatic = (
          /*                */
          8388608
        );
        var MaySuspendCommit = (
          /*             */
          16777216
        );
        var PlacementDEV = (
          /*                 */
          33554432
        );
        var MountLayoutDev = (
          /*               */
          67108864
        );
        var MountPassiveDev = (
          /*              */
          134217728
        );
        var BeforeMutationMask = (
          // TODO: Remove Update flag from before mutation phase by re-landing Visibility
          // flag logic (see #20043)
          Update | Snapshot | 0
        );
        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive$1 | Visibility | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic | MaySuspendCommit;
        var scheduleCallback$3 = Scheduler.unstable_scheduleCallback;
        var cancelCallback$1 = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now$1 = Scheduler.unstable_now;
        var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority$1 = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var log$1 = Scheduler.log;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root2, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root2, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot$1(root2, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root2.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority$1;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority$1;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root2) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root2);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof log$1 === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map = /* @__PURE__ */ new Map();
            var lane = 1;
            for (var index2 = 0; index2 < TotalLanes; index2++) {
              var label = getLabelForLane(lane);
              map.set(lane, label);
              lane *= 2;
            }
            return map;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode = (
          /*                         */
          0
        );
        var ConcurrentMode = (
          /*                 */
          1
        );
        var ProfileMode = (
          /*                    */
          2
        );
        var StrictLegacyMode = (
          /*               */
          8
        );
        var StrictEffectsMode = (
          /*              */
          16
        );
        var NoStrictPassiveEffectsMode = (
          /*     */
          64
        );
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = (
          /*                        */
          0
        );
        var NoLane = (
          /*                          */
          0
        );
        var SyncHydrationLane = (
          /*               */
          1
        );
        var SyncLane = (
          /*                        */
          2
        );
        var InputContinuousHydrationLane = (
          /*    */
          4
        );
        var InputContinuousLane = (
          /*             */
          8
        );
        var DefaultHydrationLane = (
          /*            */
          16
        );
        var DefaultLane = (
          /*                     */
          32
        );
        var SyncUpdateLanes = (
          /*                */
          42
        );
        var TransitionHydrationLane = (
          /*                */
          64
        );
        var TransitionLanes = (
          /*                       */
          8388480
        );
        var TransitionLane1 = (
          /*                        */
          128
        );
        var TransitionLane2 = (
          /*                        */
          256
        );
        var TransitionLane3 = (
          /*                        */
          512
        );
        var TransitionLane4 = (
          /*                        */
          1024
        );
        var TransitionLane5 = (
          /*                        */
          2048
        );
        var TransitionLane6 = (
          /*                        */
          4096
        );
        var TransitionLane7 = (
          /*                        */
          8192
        );
        var TransitionLane8 = (
          /*                        */
          16384
        );
        var TransitionLane9 = (
          /*                        */
          32768
        );
        var TransitionLane10 = (
          /*                       */
          65536
        );
        var TransitionLane11 = (
          /*                       */
          131072
        );
        var TransitionLane12 = (
          /*                       */
          262144
        );
        var TransitionLane13 = (
          /*                       */
          524288
        );
        var TransitionLane14 = (
          /*                       */
          1048576
        );
        var TransitionLane15 = (
          /*                       */
          2097152
        );
        var TransitionLane16 = (
          /*                       */
          4194304
        );
        var RetryLanes = (
          /*                            */
          125829120
        );
        var RetryLane1 = (
          /*                             */
          8388608
        );
        var RetryLane2 = (
          /*                             */
          16777216
        );
        var RetryLane3 = (
          /*                             */
          33554432
        );
        var RetryLane4 = (
          /*                             */
          67108864
        );
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = (
          /*          */
          134217728
        );
        var NonIdleLanes = (
          /*                          */
          268435455
        );
        var IdleHydrationLane = (
          /*               */
          268435456
        );
        var IdleLane = (
          /*                        */
          536870912
        );
        var OffscreenLane = (
          /*                   */
          1073741824
        );
        function getLabelForLane(lane) {
          {
            if (lane & SyncHydrationLane) {
              return "SyncHydrationLane";
            }
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          {
            var pendingSyncLanes = lanes & SyncUpdateLanes;
            if (pendingSyncLanes !== 0) {
              return pendingSyncLanes;
            }
          }
          switch (getHighestPriorityLane(lanes)) {
            case SyncHydrationLane:
              return SyncHydrationLane;
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root2, wipLanes) {
          var pendingLanes = root2.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
          // bother waiting until the root is complete.
          (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (
              // Tests whether the next lane is equal or lower priority than the wip
              // one. This works because the bits decrease in priority as you go left.
              nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
              // only difference between default updates and transition updates is that
              // default updates do not support refresh transitions.
              nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
            ) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root2.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root2.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncHydrationLane:
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root2, currentTime) {
          var pendingLanes = root2.pendingLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = pendingLanes & ~RetryLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root2.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root2) {
          return getHighestPriorityLanes(root2.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root2, originallyAttemptedLanes) {
          if (root2.errorRecoveryDisabledLanes & originallyAttemptedLanes) {
            return NoLanes;
          }
          var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & (SyncLane | SyncHydrationLane)) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root2, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root2, lanes) {
          return (lanes & root2.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a, b) {
          return (a & b) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a, b) {
          return a | b;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function intersectLanes(a, b) {
          return a & b;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a, b) {
          return a !== NoLane && a < b ? a : b;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i = 0; i < TotalLanes; i++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated$1(root2, updateLane) {
          root2.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
          }
        }
        function markRootSuspended$1(root2, suspendedLanes) {
          root2.suspendedLanes |= suspendedLanes;
          root2.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged$1(root2, pingedLanes) {
          root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root2, remainingLanes) {
          var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
          root2.pendingLanes = remainingLanes;
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
          root2.expiredLanes &= remainingLanes;
          root2.entangledLanes &= remainingLanes;
          root2.errorRecoveryDisabledLanes &= remainingLanes;
          var entanglements = root2.entanglements;
          var expirationTimes = root2.expirationTimes;
          var hiddenUpdates = root2.hiddenUpdates;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            expirationTimes[index2] = NoTimestamp;
            var hiddenUpdatesForLane = hiddenUpdates[index2];
            if (hiddenUpdatesForLane !== null) {
              hiddenUpdates[index2] = null;
              for (var i = 0; i < hiddenUpdatesForLane.length; i++) {
                var update = hiddenUpdatesForLane[i];
                if (update !== null) {
                  update.lane &= ~OffscreenLane;
                }
              }
            }
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root2, entangledLanes) {
          var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
          var entanglements = root2.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            if (
              // Is this one of the newly entangled lanes?
              lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
              entanglements[index2] & entangledLanes
            ) {
              entanglements[index2] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function markHiddenUpdate(root2, update, lane) {
          var index2 = laneToIndex(lane);
          var hiddenUpdates = root2.hiddenUpdates;
          var hiddenUpdatesForLane = hiddenUpdates[index2];
          if (hiddenUpdatesForLane === null) {
            hiddenUpdates[index2] = [update];
          } else {
            hiddenUpdatesForLane.push(update);
          }
          update.lane = lane | OffscreenLane;
        }
        function getBumpedLaneForHydration(root2, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          if ((renderLane & SyncUpdateLanes) !== NoLane) {
            lane = SyncHydrationLane;
          } else {
            switch (renderLane) {
              case SyncLane:
                lane = SyncHydrationLane;
                break;
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
          }
          if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root2, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root2, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          var memoizedUpdaters = root2.memoizedUpdaters;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root2, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a, b) {
          return a !== 0 && a < b ? a : b;
        }
        function lowerEventPriority(a, b) {
          return a === 0 || a > b ? a : b;
        }
        function isHigherEventPriority(a, b) {
          return a !== 0 && a < b;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var HostHoistable = 26;
        var HostSingleton = 27;
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
        var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
        var internalRootNodeResourcesKey = "__reactResources$" + randomKey;
        var internalHoistableMarker = "__reactMarker$" + randomKey;
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            var tag = inst.tag;
            if (tag === HostComponent || tag === HostText || tag === SuspenseComponent || tag === HostHoistable || tag === HostSingleton || tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          var tag = inst.tag;
          if (tag === HostComponent || tag === HostHoistable || tag === HostSingleton || tag === HostText) {
            return inst.stateNode;
          }
          throw new Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        function getResourcesFromRoot(root2) {
          var resources = root2[internalRootNodeResourcesKey];
          if (!resources) {
            resources = root2[internalRootNodeResourcesKey] = {
              hoistableStyles: /* @__PURE__ */ new Map(),
              hoistableScripts: /* @__PURE__ */ new Map()
            };
          }
          return resources;
        }
        function isMarkedHoistable(node) {
          return !!node[internalHoistableMarker];
        }
        function markNodeAsHoistable(node) {
          node[internalHoistableMarker] = true;
        }
        function isOwnedInstance(node) {
          return !!(node[internalHoistableMarker] || node[internalInstanceKey]);
        }
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function getValueForAttribute(node, name, expected) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              switch (typeof expected) {
                case "function":
                case "symbol":
                  return expected;
                case "boolean": {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  if (prefix2 !== "data-" && prefix2 !== "aria-") {
                    return expected;
                  }
                }
              }
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function getValueForAttributeOnCustomComponent(node, name, expected) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              switch (typeof expected) {
                case "symbol":
                case "object":
                  return expected;
                case "function": {
                  return expected;
                }
                case "boolean": {
                  if (expected === false) {
                    return expected;
                  }
                }
              }
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            {
              if (value === "" && expected === true) {
                return true;
              }
            }
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForAttribute(node, name, value) {
          if (isAttributeNameSafe(name)) {
            if (value === null) {
              node.removeAttribute(name);
              return;
            }
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
                node.removeAttribute(name);
                return;
              case "boolean": {
                var prefix2 = name.toLowerCase().slice(0, 5);
                if (prefix2 !== "data-" && prefix2 !== "aria-") {
                  node.removeAttribute(name);
                  return;
                }
              }
            }
            {
              checkAttributeStringCoercion(value, name);
            }
            node.setAttribute(name, "" + value);
          }
        }
        function setValueForKnownAttribute(node, name, value) {
          if (value === null) {
            node.removeAttribute(name);
            return;
          }
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean": {
              node.removeAttribute(name);
              return;
            }
          }
          {
            checkAttributeStringCoercion(value, name);
          }
          node.setAttribute(name, "" + value);
        }
        function setValueForNamespacedAttribute(node, namespace, name, value) {
          if (value === null) {
            node.removeAttribute(name);
            return;
          }
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean": {
              node.removeAttribute(name);
              return;
            }
          }
          {
            checkAttributeStringCoercion(value, name);
          }
          node.setAttributeNS(namespace, name, "" + value);
        }
        function setValueForPropertyOnCustomComponent(node, name, value) {
          if (name[0] === "o" && name[1] === "n") {
            var useCapture = name.endsWith("Capture");
            var eventName = name.slice(2, useCapture ? name.length - 7 : void 0);
            var prevProps = getFiberCurrentPropsFromNode(node);
            var prevValue = prevProps != null ? prevProps[name] : null;
            if (typeof prevValue === "function") {
              node.removeEventListener(eventName, prevValue, useCapture);
            }
            if (typeof value === "function") {
              if (typeof prevValue !== "function" && prevValue !== null) {
                if (name in node) {
                  node[name] = null;
                } else if (node.hasAttribute(name)) {
                  node.removeAttribute(name);
                }
              }
              node.addEventListener(eventName, value, useCapture);
              return;
            }
          }
          if (name in node) {
            node[name] = value;
            return;
          }
          if (value === true) {
            node.setAttribute(name, "");
            return;
          }
          setValueForAttribute(node, name, value);
        }
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap$1();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$2.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct$1(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          switch (fiber.tag) {
            case HostHoistable:
            case HostSingleton:
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName$1(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_CACHE_TYPE: {
              return "Cache";
            }
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
              case REACT_SERVER_CONTEXT_TYPE: {
                var context2 = type;
                return (context2.displayName || context2._globalName) + ".Provider";
              }
            }
          }
          return null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type;
              return getContextName(context) + ".Consumer";
            case ContextProvider:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef:
              return getWrappedName(type, type.render, "ForwardRef");
            case Fragment:
              return "Fragment";
            case HostHoistable:
            case HostSingleton:
            case HostComponent:
              return type;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type);
            case Mode:
              if (type === REACT_STRICT_MODE_TYPE) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }
              if (typeof type === "string") {
                return type;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame$1.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame$1.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              {
                checkFormFieldValueStringCoercion(value);
              }
              return value;
            default:
              return "";
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          {
            checkFormFieldValueStringCoercion(node[valueField]);
          }
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            // $FlowFixMe[missing-this-annot]
            get: function() {
              return get2.call(this);
            },
            // $FlowFixMe[missing-local-annot]
            // $FlowFixMe[missing-this-annot]
            set: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        var escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n\"\\]/g;
        function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
          return value.replace(escapeSelectorAttributeValueInsideDoubleQuotesRegex, function(ch) {
            return "\\" + ch.charCodeAt(0).toString(16) + " ";
          });
        }
        var didWarnValueDefaultValue$1 = false;
        var didWarnCheckedDefaultChecked = false;
        function validateInputProps(element, props) {
          {
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function updateInput(element, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name) {
          var node = element;
          node.name = "";
          if (type != null && typeof type !== "function" && typeof type !== "symbol" && typeof type !== "boolean") {
            {
              checkAttributeStringCoercion(type, "type");
            }
            node.type = type;
          } else {
            node.removeAttribute("type");
          }
          if (value != null) {
            if (type === "number") {
              if (
                // $FlowFixMe[incompatible-type]
                value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value
              ) {
                node.value = toString(getToStringValue(value));
              }
            } else if (node.value !== toString(getToStringValue(value))) {
              node.value = toString(getToStringValue(value));
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
          }
          {
            if (value != null) {
              setDefaultValue(node, type, getToStringValue(value));
            } else if (defaultValue != null) {
              setDefaultValue(node, type, getToStringValue(defaultValue));
            } else if (lastDefaultValue != null) {
              node.removeAttribute("value");
            }
          }
          {
            if (checked == null && defaultChecked != null) {
              node.defaultChecked = !!defaultChecked;
            }
          }
          if (checked != null && node.checked !== !!checked) {
            node.checked = checked;
          }
          if (name != null && typeof name !== "function" && typeof name !== "symbol" && typeof name !== "boolean") {
            {
              checkAttributeStringCoercion(name, "name");
            }
            node.name = toString(getToStringValue(name));
          } else {
            node.removeAttribute("name");
          }
        }
        function initInput(element, value, defaultValue, checked, defaultChecked, type, name, isHydrating2) {
          var node = element;
          if (type != null && typeof type !== "function" && typeof type !== "symbol" && typeof type !== "boolean") {
            {
              checkAttributeStringCoercion(type, "type");
            }
            node.type = type;
          }
          if (value != null || defaultValue != null) {
            var isButton = type === "submit" || type === "reset";
            if (isButton && (value === void 0 || value === null)) {
              return;
            }
            var defaultValueStr = defaultValue != null ? toString(getToStringValue(defaultValue)) : "";
            var initialValue = value != null ? toString(getToStringValue(value)) : defaultValueStr;
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var checkedOrDefault = checked != null ? checked : defaultChecked;
          var initialChecked = typeof checkedOrDefault !== "function" && typeof checkedOrDefault !== "symbol" && !!checkedOrDefault;
          if (!isHydrating2) {
            node.checked = !!initialChecked;
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!initialChecked;
          }
          if (name != null && typeof name !== "function" && typeof name !== "symbol" && typeof name !== "boolean") {
            {
              checkAttributeStringCoercion(name, "name");
            }
            node.name = name;
          }
        }
        function restoreControlledInputState(element, props) {
          var rootNode = element;
          updateInput(rootNode, props.value, props.defaultValue, props.defaultValue, props.checked, props.defaultChecked, props.type, props.name);
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name, "name");
            }
            var group = queryRoot.querySelectorAll('input[name="' + escapeSelectorAttributeValueInsideDoubleQuotes("" + name) + '"][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
              updateValueIfChanged(otherNode);
              updateInput(otherNode, otherProps.value, otherProps.defaultValue, otherProps.defaultValue, otherProps.checked, otherProps.defaultChecked, otherProps.type, otherProps.name);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (
            // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
            type !== "number" || getActiveElement(node.ownerDocument) !== node
          ) {
            if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateOptionProps(element, props) {
          {
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null) {
                React.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var didWarnValueDefaultValue;
        {
          didWarnValueDefaultValue = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && propNameIsArray) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function validateSelectProps(element, props) {
          {
            checkSelectPropTypes(props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue = true;
            }
          }
        }
        function initSelect(element, value, defaultValue, multiple) {
          var node = element;
          node.multiple = !!multiple;
          if (value != null) {
            updateOptions(node, !!multiple, value, false);
          } else if (defaultValue != null) {
            updateOptions(node, !!multiple, defaultValue, true);
          }
        }
        function updateSelect(element, value, defaultValue, multiple, wasMultiple) {
          var node = element;
          if (value != null) {
            updateOptions(node, !!multiple, value, false);
          } else if (!!wasMultiple !== !!multiple) {
            if (defaultValue != null) {
              updateOptions(node, !!multiple, defaultValue, true);
            } else {
              updateOptions(node, !!multiple, multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledSelectState(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function validateTextareaProps(element, props) {
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
            if (props.children != null && props.value == null) {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
          }
        }
        function updateTextarea(element, value, defaultValue) {
          var node = element;
          if (value != null) {
            var newValue = toString(getToStringValue(value));
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (defaultValue == null) {
              if (node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
              return;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(getToStringValue(defaultValue));
          } else {
            node.defaultValue = "";
          }
        }
        function initTextarea(element, value, defaultValue, children) {
          var node = element;
          var initialValue = value;
          if (initialValue == null) {
            if (children != null) {
              {
                if (defaultValue != null) {
                  throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
                if (isArray(children)) {
                  if (children.length > 1) {
                    throw new Error("<textarea> can only have at most one child.");
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          var stringValue = getToStringValue(initialValue);
          node.defaultValue = stringValue;
          var textContent = node.textContent;
          if (textContent === stringValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledTextareaState(element, props) {
          updateTextarea(element, props.value, props.defaultValue);
        }
        var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
        var inScopeTags = [
          "applet",
          "caption",
          "html",
          "table",
          "td",
          "th",
          "marquee",
          "object",
          "template",
          // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
          // TODO: Distinguish by namespace here -- for <title>, including it here
          // errs on the side of fewer warnings
          "foreignObject",
          "desc",
          "title"
        ];
        var buttonScopeTags = inScopeTags.concat(["button"]);
        var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
        var emptyAncestorInfoDev = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null,
          containerTagInScope: null
        };
        function updatedAncestorInfoDev(oldInfo, tag) {
          {
            var ancestorInfo = assign({}, oldInfo || emptyAncestorInfoDev);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            if (tag === "#document" || tag === "html") {
              ancestorInfo.containerTagInScope = null;
            } else if (!ancestorInfo.containerTagInScope) {
              ancestorInfo.containerTagInScope = info;
            }
            return ancestorInfo;
          }
        }
        function isTagValidWithParent(tag, parentTag) {
          switch (parentTag) {
            case "select":
              return tag === "option" || tag === "optgroup" || tag === "#text";
            case "optgroup":
              return tag === "option" || tag === "#text";
            case "option":
              return tag === "#text";
            case "tr":
              return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
            case "tbody":
            case "thead":
            case "tfoot":
              return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
            case "colgroup":
              return tag === "col" || tag === "template";
            case "table":
              return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
            case "head":
              return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
            case "html":
              return tag === "head" || tag === "body" || tag === "frameset";
            case "frameset":
              return tag === "frame";
            case "#document":
              return tag === "html";
          }
          switch (tag) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
              return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return parentTag == null;
          }
          return true;
        }
        function findInvalidAncestorForTag(tag, ancestorInfo) {
          switch (tag) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        }
        var didWarn$1 = {};
        function validateDOMNesting(childTag, ancestorInfo) {
          {
            ancestorInfo = ancestorInfo || emptyAncestorInfoDev;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = (
              // eslint-disable-next-line react-internal/safe-string-coercion
              String(!!invalidParent) + "|" + childTag + "|" + ancestorTag
            );
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = "<" + childTag + ">";
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s", tagDisplayName, ancestorTag, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          }
        }
        function validateTextNesting(childText, parentTag) {
          {
            if (isTagValidWithParent("#text", parentTag)) {
              return;
            }
            var warnKey = "#text|" + parentTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            if (/\S/.test(childText)) {
              error("validateDOMNesting(...): Text nodes cannot appear as a child of <%s>.", parentTag);
            } else {
              error("validateDOMNesting(...): Whitespace text nodes cannot appear as a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.", parentTag);
            }
          }
        }
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction)
          ;
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_TYPE_NODE = 10;
        var DOCUMENT_FRAGMENT_NODE = 11;
        function setTextContent(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        }
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var uppercasePattern = /([A-Z])/g;
        var msPattern$1 = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
        }
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        function camelize(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }
        function warnHyphenatedStyleName(name) {
          {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern, "ms-"))
            );
          }
        }
        function warnBadVendoredStyleName(name) {
          {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          }
        }
        function warnStyleValueWithSemicolon(name, value) {
          {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          }
        }
        function warnStyleValueIsNaN(name, value) {
          {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          }
        }
        function warnStyleValueIsInfinity(name, value) {
          {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          }
        }
        function warnValidStyle(name, value) {
          {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name);
              }
            }
          }
        }
        var unitlessNumbers = /* @__PURE__ */ new Set([
          "animationIterationCount",
          "aspectRatio",
          "borderImageOutset",
          "borderImageSlice",
          "borderImageWidth",
          "boxFlex",
          "boxFlexGroup",
          "boxOrdinalGroup",
          "columnCount",
          "columns",
          "flex",
          "flexGrow",
          "flexPositive",
          "flexShrink",
          "flexNegative",
          "flexOrder",
          "gridArea",
          "gridRow",
          "gridRowEnd",
          "gridRowSpan",
          "gridRowStart",
          "gridColumn",
          "gridColumnEnd",
          "gridColumnSpan",
          "gridColumnStart",
          "fontWeight",
          "lineClamp",
          "lineHeight",
          "opacity",
          "order",
          "orphans",
          "scale",
          "tabSize",
          "widows",
          "zIndex",
          "zoom",
          "fillOpacity",
          // SVG-related properties
          "floodOpacity",
          "stopOpacity",
          "strokeDasharray",
          "strokeDashoffset",
          "strokeMiterlimit",
          "strokeOpacity",
          "strokeWidth",
          "MozAnimationIterationCount",
          // Known Prefixed Properties
          "MozBoxFlex",
          // TODO: Remove these since they shouldn't be used in modern code
          "MozBoxFlexGroup",
          "MozLineClamp",
          "msAnimationIterationCount",
          "msFlex",
          "msZoom",
          "msFlexGrow",
          "msFlexNegative",
          "msFlexOrder",
          "msFlexPositive",
          "msFlexShrink",
          "msGridColumn",
          "msGridColumnSpan",
          "msGridRow",
          "msGridRowSpan",
          "WebkitAnimationIterationCount",
          "WebkitBoxFlex",
          "WebKitBoxFlexGroup",
          "WebkitBoxOrdinalGroup",
          "WebkitColumnCount",
          "WebkitColumns",
          "WebkitFlex",
          "WebkitFlexGrow",
          "WebkitFlexPositive",
          "WebkitFlexShrink",
          "WebkitLineClamp"
        ]);
        function isUnitlessNumber(name) {
          return unitlessNumbers.has(name);
        }
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var value = styles[styleName];
              if (value != null && typeof value !== "boolean" && value !== "") {
                var isCustomProperty = styleName.indexOf("--") === 0;
                if (isCustomProperty) {
                  {
                    checkCSSPropertyStringCoercion(value, styleName);
                  }
                  serialized += delimiter + styleName + ":" + ("" + value).trim();
                } else {
                  if (typeof value === "number" && value !== 0 && !isUnitlessNumber(styleName)) {
                    serialized += delimiter + hyphenateStyleName(styleName) + ":" + value + "px";
                  } else {
                    {
                      checkCSSPropertyStringCoercion(value, styleName);
                    }
                    serialized += delimiter + hyphenateStyleName(styleName) + ":" + ("" + value).trim();
                  }
                }
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyle(style2, styleName, value) {
          var isCustomProperty = styleName.indexOf("--") === 0;
          {
            if (!isCustomProperty) {
              warnValidStyle(styleName, value);
            }
          }
          if (value == null || typeof value === "boolean" || value === "") {
            if (isCustomProperty) {
              style2.setProperty(styleName, "");
            } else if (styleName === "float") {
              style2.cssFloat = "";
            } else {
              style2[styleName] = "";
            }
          } else if (isCustomProperty) {
            style2.setProperty(styleName, value);
          } else if (typeof value === "number" && value !== 0 && !isUnitlessNumber(styleName)) {
            style2[styleName] = value + "px";
          } else {
            if (styleName === "float") {
              style2.cssFloat = value;
            } else {
              {
                checkCSSPropertyStringCoercion(value, styleName);
              }
              style2[styleName] = ("" + value).trim();
            }
          }
        }
        function setValueForStyles(node, styles, prevStyles) {
          if (styles != null && typeof styles !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
          {
            if (styles) {
              Object.freeze(styles);
            }
          }
          var style2 = node.style;
          if (prevStyles != null) {
            {
              validateShorthandPropertyCollisionInDev(prevStyles, styles);
            }
            for (var styleName in prevStyles) {
              if (prevStyles.hasOwnProperty(styleName) && (styles == null || !styles.hasOwnProperty(styleName))) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                if (isCustomProperty) {
                  style2.setProperty(styleName, "");
                } else if (styleName === "float") {
                  style2.cssFloat = "";
                } else {
                  style2[styleName] = "";
                }
              }
            }
            for (var _styleName in styles) {
              var value = styles[_styleName];
              if (styles.hasOwnProperty(_styleName) && prevStyles[_styleName] !== value) {
                setValueForStyle(style2, _styleName, value);
              }
            }
          } else {
            for (var _styleName2 in styles) {
              if (styles.hasOwnProperty(_styleName2)) {
                var _value = styles[_styleName2];
                setValueForStyle(style2, _styleName2, _value);
              }
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(prevStyles, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = {};
            if (prevStyles) {
              for (var key in prevStyles) {
                if (prevStyles.hasOwnProperty(key) && !nextStyles.hasOwnProperty(key)) {
                  var longhands = shorthandToLonghand[key] || [key];
                  for (var i = 0; i < longhands.length; i++) {
                    expandedUpdates[longhands[i]] = key;
                  }
                }
              }
            }
            for (var _key in nextStyles) {
              if (nextStyles.hasOwnProperty(_key) && (!prevStyles || prevStyles[_key] !== nextStyles[_key])) {
                var _longhands = shorthandToLonghand[_key] || [_key];
                for (var _i = 0; _i < _longhands.length; _i++) {
                  expandedUpdates[_longhands[_i]] = _key;
                }
              }
            }
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var _key2 in expandedUpdates) {
              var originalKey = expandedUpdates[_key2];
              var correctOriginalKey = expandedStyles[_key2];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(nextStyles[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        function isCustomElement(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return false;
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var aliases = /* @__PURE__ */ new Map([
          ["acceptCharset", "accept-charset"],
          ["htmlFor", "for"],
          ["httpEquiv", "http-equiv"],
          // HTML and SVG attributes, but the SVG attribute is case sensitive.],
          ["crossOrigin", "crossorigin"],
          // This is a list of all SVG attributes that need special casing.
          // Regular attributes that just accept strings.],
          ["accentHeight", "accent-height"],
          ["alignmentBaseline", "alignment-baseline"],
          ["arabicForm", "arabic-form"],
          ["baselineShift", "baseline-shift"],
          ["capHeight", "cap-height"],
          ["clipPath", "clip-path"],
          ["clipRule", "clip-rule"],
          ["colorInterpolation", "color-interpolation"],
          ["colorInterpolationFilters", "color-interpolation-filters"],
          ["colorProfile", "color-profile"],
          ["colorRendering", "color-rendering"],
          ["dominantBaseline", "dominant-baseline"],
          ["enableBackground", "enable-background"],
          ["fillOpacity", "fill-opacity"],
          ["fillRule", "fill-rule"],
          ["floodColor", "flood-color"],
          ["floodOpacity", "flood-opacity"],
          ["fontFamily", "font-family"],
          ["fontSize", "font-size"],
          ["fontSizeAdjust", "font-size-adjust"],
          ["fontStretch", "font-stretch"],
          ["fontStyle", "font-style"],
          ["fontVariant", "font-variant"],
          ["fontWeight", "font-weight"],
          ["glyphName", "glyph-name"],
          ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
          ["glyphOrientationVertical", "glyph-orientation-vertical"],
          ["horizAdvX", "horiz-adv-x"],
          ["horizOriginX", "horiz-origin-x"],
          ["imageRendering", "image-rendering"],
          ["letterSpacing", "letter-spacing"],
          ["lightingColor", "lighting-color"],
          ["markerEnd", "marker-end"],
          ["markerMid", "marker-mid"],
          ["markerStart", "marker-start"],
          ["overlinePosition", "overline-position"],
          ["overlineThickness", "overline-thickness"],
          ["paintOrder", "paint-order"],
          ["panose-1", "panose-1"],
          ["pointerEvents", "pointer-events"],
          ["renderingIntent", "rendering-intent"],
          ["shapeRendering", "shape-rendering"],
          ["stopColor", "stop-color"],
          ["stopOpacity", "stop-opacity"],
          ["strikethroughPosition", "strikethrough-position"],
          ["strikethroughThickness", "strikethrough-thickness"],
          ["strokeDasharray", "stroke-dasharray"],
          ["strokeDashoffset", "stroke-dashoffset"],
          ["strokeLinecap", "stroke-linecap"],
          ["strokeLinejoin", "stroke-linejoin"],
          ["strokeMiterlimit", "stroke-miterlimit"],
          ["strokeOpacity", "stroke-opacity"],
          ["strokeWidth", "stroke-width"],
          ["textAnchor", "text-anchor"],
          ["textDecoration", "text-decoration"],
          ["textRendering", "text-rendering"],
          ["transformOrigin", "transform-origin"],
          ["underlinePosition", "underline-position"],
          ["underlineThickness", "underline-thickness"],
          ["unicodeBidi", "unicode-bidi"],
          ["unicodeRange", "unicode-range"],
          ["unitsPerEm", "units-per-em"],
          ["vAlphabetic", "v-alphabetic"],
          ["vHanging", "v-hanging"],
          ["vIdeographic", "v-ideographic"],
          ["vMathematical", "v-mathematical"],
          ["vectorEffect", "vector-effect"],
          ["vertAdvY", "vert-adv-y"],
          ["vertOriginX", "vert-origin-x"],
          ["vertOriginY", "vert-origin-y"],
          ["wordSpacing", "word-spacing"],
          ["writingMode", "writing-mode"],
          ["xmlnsXlink", "xmlns:xlink"],
          ["xHeight", "x-height"]
        ]);
        function getAttributeAlias(name) {
          return aliases.get(name) || name;
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          fetchpriority: "fetchPriority",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          transformorigin: "transformOrigin",
          "transform-origin": "transformOrigin",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties$1 = {};
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty$1(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            if (rARIACamel$1.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties$1[name] = true;
                return true;
              }
            }
            if (rARIA$1.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties$1[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function validateProperties$2(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var warnedProperties = {};
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name, value, eventRegistry) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties[name] = true;
              return true;
            }
            {
              if (typeof value === "function") {
                if (tagName === "form" && name === "action") {
                  return true;
                }
                if (tagName === "input" && name === "formAction") {
                  return true;
                }
                if (tagName === "button" && name === "formAction") {
                  return true;
                }
              }
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties[name] = true;
              return true;
            }
            if (rARIA.test(name) || rARIACamel.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            } else if (name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties[name] = true;
              return true;
            }
            switch (name) {
              case "dangerouslySetInnerHTML":
              case "children":
              case "style":
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
              case "defaultValue":
              case "defaultChecked":
              case "innerHTML": {
                return true;
              }
              case "innerText":
              case "textContent": {
                return true;
              }
            }
            switch (typeof value) {
              case "boolean": {
                switch (name) {
                  case "autoFocus":
                  case "checked":
                  case "multiple":
                  case "muted":
                  case "selected":
                  case "contentEditable":
                  case "spellCheck":
                  case "draggable":
                  case "value":
                  case "autoReverse":
                  case "externalResourcesRequired":
                  case "focusable":
                  case "preserveAlpha":
                  case "allowFullScreen":
                  case "async":
                  case "autoPlay":
                  case "controls":
                  case "default":
                  case "defer":
                  case "disabled":
                  case "disablePictureInPicture":
                  case "disableRemotePlayback":
                  case "formNoValidate":
                  case "hidden":
                  case "loop":
                  case "noModule":
                  case "noValidate":
                  case "open":
                  case "playsInline":
                  case "readOnly":
                  case "required":
                  case "reversed":
                  case "scoped":
                  case "seamless":
                  case "itemScope":
                  case "capture":
                  case "download": {
                    return true;
                  }
                  default: {
                    var prefix2 = name.toLowerCase().slice(0, 5);
                    if (prefix2 === "data-" || prefix2 === "aria-") {
                      return true;
                    }
                    if (value) {
                      error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                    } else {
                      error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                    }
                    warnedProperties[name] = true;
                    return true;
                  }
                }
              }
              case "function":
              case "symbol":
                warnedProperties[name] = true;
                return false;
              case "string": {
                if (value === "false" || value === "true") {
                  switch (name) {
                    case "checked":
                    case "selected":
                    case "multiple":
                    case "muted":
                    case "allowFullScreen":
                    case "async":
                    case "autoPlay":
                    case "controls":
                    case "default":
                    case "defer":
                    case "disabled":
                    case "disablePictureInPicture":
                    case "disableRemotePlayback":
                    case "formNoValidate":
                    case "hidden":
                    case "loop":
                    case "noModule":
                    case "noValidate":
                    case "open":
                    case "playsInline":
                    case "readOnly":
                    case "required":
                    case "reversed":
                    case "scoped":
                    case "seamless":
                    case "itemScope": {
                      break;
                    }
                    default: {
                      return true;
                    }
                  }
                  error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
        }
        function warnUnknownProperties(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props, eventRegistry) {
          if (isCustomElement(type) || typeof props.is === "string") {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          var stringifiedURL = "" + url;
          {
            if (!didWarn && isJavaScriptProtocol.test(stringifiedURL)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(stringifiedURL));
            }
          }
          return url;
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var props = getFiberCurrentPropsFromNode(stateNode);
            restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
          }
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        function get(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags$1) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a.alternate !== b) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node) {
          var tag = node.tag;
          if (tag === HostComponent || tag === HostHoistable || tag === HostSingleton || tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          var tag = node.tag;
          if (tag === HostComponent || tag === HostHoistable || tag === HostSingleton || tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var OffscreenVisible = (
          /*                     */
          1
        );
        var OffscreenDetached = (
          /*                    */
          2
        );
        var OffscreenPassiveEffectsConnected = (
          /*     */
          4
        );
        function isOffscreenManual(offscreenFiber) {
          return offscreenFiber.memoizedProps !== null && offscreenFiber.memoizedProps.mode === "manual";
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = (
          // $FlowFixMe[method-unbinding]
          typeof Object.is === "function" ? Object.is : is
        );
        function isRootDehydrated(root2) {
          var currentState = root2.current.memoizedState;
          return currentState.isDehydrated;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags$1;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index2) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index2 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        var rootOrSingletonContext = false;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          rootOrSingletonContext = true;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          rootOrSingletonContext = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostSingleton:
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(
                  returnFiber.type,
                  returnFiber.memoizedProps,
                  returnFiber.stateNode,
                  instance,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null)
                  didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostSingleton:
                  case HostComponent:
                    var type = fiber.type;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                    break;
                }
                break;
              }
              case HostSingleton:
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostSingleton:
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _type,
                      _props,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _text,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode
                    );
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null)
                  switch (fiber.tag) {
                    case HostSingleton:
                    case HostComponent:
                      var _type2 = fiber.type;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrateInstance(fiber, nextInstance) {
          var instance = canHydrateInstance(nextInstance, fiber.type, fiber.pendingProps, rootOrSingletonContext);
          if (instance !== null) {
            fiber.stateNode = instance;
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(instance);
            rootOrSingletonContext = false;
            return true;
          }
          return false;
        }
        function tryHydrateText(fiber, nextInstance) {
          var text = fiber.pendingProps;
          var textInstance = canHydrateTextInstance(nextInstance, text, rootOrSingletonContext);
          if (textInstance !== null) {
            fiber.stateNode = textInstance;
            hydrationParentFiber = fiber;
            nextHydratableInstance = null;
            return true;
          }
          return false;
        }
        function tryHydrateSuspense(fiber, nextInstance) {
          var suspenseInstance = canHydrateSuspenseInstance(nextInstance, rootOrSingletonContext);
          if (suspenseInstance !== null) {
            var suspenseState = {
              dehydrated: suspenseInstance,
              treeContext: getSuspendedTreeContext(),
              retryLane: OffscreenLane
            };
            fiber.memoizedState = suspenseState;
            var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
            dehydratedFragment.return = fiber;
            fiber.child = dehydratedFragment;
            hydrationParentFiber = fiber;
            nextHydratableInstance = null;
            return true;
          }
          return false;
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags$1;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function claimHydratableSingleton(fiber) {
          {
            if (!isHydrating) {
              return;
            }
            var currentRootContainer = getRootHostContainer();
            var currentHostContext = getHostContext();
            var instance = fiber.stateNode = resolveSingletonInstance(fiber.type, fiber.pendingProps, currentRootContainer, currentHostContext, false);
            hydrationParentFiber = fiber;
            rootOrSingletonContext = true;
            nextHydratableInstance = getFirstHydratableChild(instance);
          }
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var initialInstance = nextHydratableInstance;
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            nextHydratableInstance = initialInstance;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrateInstance(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextHydratableInstance = getNextHydratableSibling(nextInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextHydratableInstance || !tryHydrateInstance(fiber, nextHydratableInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              nextHydratableInstance = initialInstance;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function tryToClaimNextHydratableTextInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var text = fiber.pendingProps;
          var isHydratable = isHydratableText(text);
          var initialInstance = nextHydratableInstance;
          var nextInstance = nextHydratableInstance;
          if (!nextInstance || !isHydratable) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            nextHydratableInstance = initialInstance;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrateText(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextHydratableInstance = getNextHydratableSibling(nextInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextHydratableInstance || !tryHydrateText(fiber, nextHydratableInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              nextHydratableInstance = initialInstance;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function tryToClaimNextHydratableSuspenseInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var initialInstance = nextHydratableInstance;
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            nextHydratableInstance = initialInstance;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrateSuspense(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextHydratableInstance = getNextHydratableSibling(nextInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextHydratableInstance || !tryHydrateSuspense(fiber, nextHydratableInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              nextHydratableInstance = initialInstance;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, hostContext) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          hydrateInstance(instance, fiber.type, fiber.memoizedProps, hostContext, fiber, shouldWarnIfMismatchDev);
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(
                    parentContainer,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode,
                    shouldWarnIfMismatchDev
                  );
                  if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
                    return false;
                  }
                  break;
                }
                case HostSingleton:
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    _isConcurrentMode2,
                    shouldWarnIfMismatchDev
                  );
                  if (_isConcurrentMode2 && enableClientRenderFallbackOnTextMismatch) {
                    return false;
                  }
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          hydrationParentFiber = fiber.return;
          while (hydrationParentFiber) {
            switch (hydrationParentFiber.tag) {
              case HostRoot:
              case HostSingleton:
                rootOrSingletonContext = true;
                return;
              case HostComponent:
              case SuspenseComponent:
                rootOrSingletonContext = false;
                return;
              default:
                hydrationParentFiber = hydrationParentFiber.return;
            }
          }
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          var shouldClear = false;
          {
            if (fiber.tag !== HostRoot && fiber.tag !== HostSingleton && !(fiber.tag === HostComponent && (!shouldDeleteUnhydratedTailInstances(fiber.type) || shouldSetTextContent(fiber.type, fiber.memoizedProps)))) {
              shouldClear = true;
            }
          }
          if (shouldClear) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var concurrentQueues = [];
        var concurrentQueuesIndex = 0;
        var concurrentlyUpdatedLanes = NoLanes;
        function finishQueueingConcurrentUpdates() {
          var endIndex = concurrentQueuesIndex;
          concurrentQueuesIndex = 0;
          concurrentlyUpdatedLanes = NoLanes;
          var i = 0;
          while (i < endIndex) {
            var fiber = concurrentQueues[i];
            concurrentQueues[i++] = null;
            var queue = concurrentQueues[i];
            concurrentQueues[i++] = null;
            var update = concurrentQueues[i];
            concurrentQueues[i++] = null;
            var lane = concurrentQueues[i];
            concurrentQueues[i++] = null;
            if (queue !== null && update !== null) {
              var pending = queue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              queue.pending = update;
            }
            if (lane !== NoLane) {
              markUpdateLaneFromFiberToRoot(fiber, update, lane);
            }
          }
        }
        function getConcurrentlyUpdatedLanes() {
          return concurrentlyUpdatedLanes;
        }
        function enqueueUpdate$1(fiber, queue, update, lane) {
          concurrentQueues[concurrentQueuesIndex++] = fiber;
          concurrentQueues[concurrentQueuesIndex++] = queue;
          concurrentQueues[concurrentQueuesIndex++] = update;
          concurrentQueues[concurrentQueuesIndex++] = lane;
          concurrentlyUpdatedLanes = mergeLanes(concurrentlyUpdatedLanes, lane);
          fiber.lanes = mergeLanes(fiber.lanes, lane);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          var concurrentQueue = queue;
          var concurrentUpdate = update;
          enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);
          return getRootForUpdatedFiber(fiber);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update) {
          var lane = NoLane;
          var concurrentQueue = queue;
          var concurrentUpdate = update;
          enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);
          var isConcurrentlyRendering = getWorkInProgressRoot() !== null;
          if (!isConcurrentlyRendering) {
            finishQueueingConcurrentUpdates();
          }
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
          var concurrentQueue = queue;
          var concurrentUpdate = update;
          enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);
          return getRootForUpdatedFiber(fiber);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          enqueueUpdate$1(fiber, null, null, lane);
          return getRootForUpdatedFiber(fiber);
        }
        function unsafe_markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          var root2 = getRootForUpdatedFiber(sourceFiber);
          markUpdateLaneFromFiberToRoot(sourceFiber, null, lane);
          return root2;
        }
        function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          var isHidden = false;
          var parent = sourceFiber.return;
          var node = sourceFiber;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            }
            if (parent.tag === OffscreenComponent) {
              var offscreenInstance = parent.stateNode;
              if (offscreenInstance !== null && !(offscreenInstance._visibility & OffscreenVisible)) {
                isHidden = true;
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (isHidden && update !== null && node.tag === HostRoot) {
            var root2 = node.stateNode;
            markHiddenUpdate(root2, update, lane);
          }
        }
        function getRootForUpdatedFiber(sourceFiber) {
          throwIfInfiniteUpdateLoopDetected();
          detectUpdateOnUnmountedFiber(sourceFiber, sourceFiber);
          var node = sourceFiber;
          var parent = node.return;
          while (parent !== null) {
            detectUpdateOnUnmountedFiber(sourceFiber, node);
            node = parent;
            parent = node.return;
          }
          return node.tag === HostRoot ? node.stateNode : null;
        }
        function detectUpdateOnUnmountedFiber(sourceFiber, parent) {
          {
            var alternate = parent.alternate;
            if (alternate === null && (parent.flags & (Placement | Hydrating)) !== NoFlags$1) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              lanes: NoLanes,
              hiddenCallbacks: null
            },
            callbacks: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              callbacks: null
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(lane) {
          var update = {
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              var componentName = getComponentNameFromFiber(fiber);
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\n\nPlease update the following component: %s", componentName);
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
          }
        }
        function entangleTransitions(root2, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    // When this update is rebased, we should not fire its
                    // callback again.
                    callback: null,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                callbacks: currentQueue.callbacks
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = removeLanes(update.lane, OffscreenLane);
              var isHiddenUpdate = updateLane !== update.lane;
              var shouldSkipUpdate = isHiddenUpdate ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane) : !isSubsetOfLanes(renderLanes2, updateLane);
              if (shouldSkipUpdate) {
                var clone = {
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    // When this update is rebased, we should not fire its
                    // callback again.
                    callback: null,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null) {
                  workInProgress2.flags |= Callback;
                  if (isHiddenUpdate) {
                    workInProgress2.flags |= Visibility;
                  }
                  var callbacks = queue.callbacks;
                  if (callbacks === null) {
                    queue.callbacks = [callback];
                  } else {
                    callbacks.push(callback);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function deferHiddenCallbacks(updateQueue) {
          var newHiddenCallbacks = updateQueue.callbacks;
          if (newHiddenCallbacks !== null) {
            var existingHiddenCallbacks = updateQueue.shared.hiddenCallbacks;
            if (existingHiddenCallbacks === null) {
              updateQueue.shared.hiddenCallbacks = newHiddenCallbacks;
            } else {
              updateQueue.shared.hiddenCallbacks = existingHiddenCallbacks.concat(newHiddenCallbacks);
            }
          }
        }
        function commitHiddenCallbacks(updateQueue, context) {
          var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;
          if (hiddenCallbacks !== null) {
            updateQueue.shared.hiddenCallbacks = null;
            for (var i = 0; i < hiddenCallbacks.length; i++) {
              var callback = hiddenCallbacks[i];
              callCallback(callback, context);
            }
          }
        }
        function commitCallbacks(updateQueue, context) {
          var callbacks = updateQueue.callbacks;
          if (callbacks !== null) {
            updateQueue.callbacks = null;
            for (var i = 0; i < callbacks.length; i++) {
              var callback = callbacks[i];
              callCallback(callback, context);
            }
          }
        }
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            var currentKey = keysA[i];
            if (!hasOwnProperty.call(objB, currentKey) || // $FlowFixMe[incompatible-use] lost refinement of `objB`
            !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
            instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        var ReactCurrentActQueue$3 = ReactSharedInternals.ReactCurrentActQueue;
        var SuspenseException = new Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`");
        var SuspenseyCommitException = new Error("Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React.");
        var noopSuspenseyCommitThenable = {
          then: function() {
          }
        };
        function createThenableState() {
          return [];
        }
        function isThenableResolved(thenable) {
          var status = thenable.status;
          return status === "fulfilled" || status === "rejected";
        }
        function noop$2() {
        }
        function trackUsedThenable(thenableState2, thenable, index2) {
          if (ReactCurrentActQueue$3.current !== null) {
            ReactCurrentActQueue$3.didUsePromise = true;
          }
          var previous = thenableState2[index2];
          if (previous === void 0) {
            thenableState2.push(thenable);
          } else {
            if (previous !== thenable) {
              thenable.then(noop$2, noop$2);
              thenable = previous;
            }
          }
          switch (thenable.status) {
            case "fulfilled": {
              var fulfilledValue = thenable.value;
              return fulfilledValue;
            }
            case "rejected": {
              var rejectedError = thenable.reason;
              throw rejectedError;
            }
            default: {
              if (typeof thenable.status === "string") {
                thenable.then(noop$2, noop$2);
              } else {
                var pendingThenable = thenable;
                pendingThenable.status = "pending";
                pendingThenable.then(function(fulfilledValue2) {
                  if (thenable.status === "pending") {
                    var fulfilledThenable2 = thenable;
                    fulfilledThenable2.status = "fulfilled";
                    fulfilledThenable2.value = fulfilledValue2;
                  }
                }, function(error2) {
                  if (thenable.status === "pending") {
                    var rejectedThenable2 = thenable;
                    rejectedThenable2.status = "rejected";
                    rejectedThenable2.reason = error2;
                  }
                });
              }
              switch (thenable.status) {
                case "fulfilled": {
                  var fulfilledThenable = thenable;
                  return fulfilledThenable.value;
                }
                case "rejected": {
                  var rejectedThenable = thenable;
                  throw rejectedThenable.reason;
                }
              }
              suspendedThenable = thenable;
              {
                needsToResetSuspendedThenableDEV = true;
              }
              throw SuspenseException;
            }
          }
        }
        function suspendCommit() {
          suspendedThenable = noopSuspenseyCommitThenable;
          throw SuspenseyCommitException;
        }
        var suspendedThenable = null;
        var needsToResetSuspendedThenableDEV = false;
        function getSuspendedThenable() {
          if (suspendedThenable === null) {
            throw new Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
          }
          var thenable = suspendedThenable;
          suspendedThenable = null;
          {
            needsToResetSuspendedThenableDEV = false;
          }
          return thenable;
        }
        function checkIfUseWrappedInTryCatch() {
          {
            if (needsToResetSuspendedThenableDEV) {
              needsToResetSuspendedThenableDEV = false;
              return true;
            }
          }
          return false;
        }
        var thenableState$1 = null;
        var thenableIndexCounter$1 = 0;
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function isReactClass(type) {
          return type.prototype && type.prototype.isReactComponent;
        }
        function unwrapThenable(thenable) {
          var index2 = thenableIndexCounter$1;
          thenableIndexCounter$1 += 1;
          if (thenableState$1 === null) {
            thenableState$1 = createThenableState();
          }
          return trackUsedThenable(thenableState$1, thenable, index2);
        }
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if (
                // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner
              ) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = resolvedInst.refs;
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element._owner) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType._payload;
          var init = lazyType._init;
          return init(payload);
        }
        function createChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement | PlacementDEV;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement | PlacementDEV;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement | PlacementDEV;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
            }
            if (current2 !== null) {
              if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
              // We need to do this after the Hot Reloading check above,
              // because hot reloading has different semantics than prod because
              // it doesn't resuspend. So we can't let the call below suspend.
              typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return createChild(returnFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              if (typeof newChild.then === "function") {
                var thenable = newChild;
                return createChild(returnFiber, unwrapThenable(thenable), lanes);
              }
              if (newChild.$$typeof === REACT_CONTEXT_TYPE || newChild.$$typeof === REACT_SERVER_CONTEXT_TYPE) {
                var context = newChild;
                return createChild(returnFiber, readContextDuringReconcilation(returnFiber, context, lanes), lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              if (typeof newChild.then === "function") {
                var thenable = newChild;
                return updateSlot(returnFiber, oldFiber, unwrapThenable(thenable), lanes);
              }
              if (newChild.$$typeof === REACT_CONTEXT_TYPE || newChild.$$typeof === REACT_SERVER_CONTEXT_TYPE) {
                var context = newChild;
                return updateSlot(returnFiber, oldFiber, readContextDuringReconcilation(returnFiber, context, lanes), lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              if (typeof newChild.then === "function") {
                var thenable = newChild;
                return updateFromMap(existingChildren, returnFiber, newIdx, unwrapThenable(thenable), lanes);
              }
              if (newChild.$$typeof === REACT_CONTEXT_TYPE || newChild.$$typeof === REACT_SERVER_CONTEXT_TYPE) {
                var context = newChild;
                return updateFromMap(existingChildren, returnFiber, newIdx, readContextDuringReconcilation(returnFiber, context, lanes), lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init = child._init;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && // $FlowFixMe[prop-missing] Flow doesn't know about toStringTag
              newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                  isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                  // We need to do this after the Hot Reloading check above,
                  // because hot reloading has different semantics than prod because
                  // it doesn't resuspend. So we can't let the call below suspend.
                  typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element._source;
                      _existing._debugOwner = element._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
              }
              if (isArray(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (typeof newChild.then === "function") {
                var thenable = newChild;
                return reconcileChildFibersImpl(returnFiber, currentFirstChild, unwrapThenable(thenable), lanes);
              }
              if (newChild.$$typeof === REACT_CONTEXT_TYPE || newChild.$$typeof === REACT_SERVER_CONTEXT_TYPE) {
                var context = newChild;
                return reconcileChildFibersImpl(returnFiber, currentFirstChild, readContextDuringReconcilation(returnFiber, context, lanes), lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            thenableIndexCounter$1 = 0;
            var firstChildFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
            thenableState$1 = null;
            return firstChildFiber;
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = createChildReconciler(true);
        var mountChildFibers = createChildReconciler(false);
        function resetChildReconcilerOnUnwind() {
          thenableState$1 = null;
          thenableIndexCounter$1 = 0;
        }
        function cloneChildFibers(current2, workInProgress2) {
          if (current2 !== null && workInProgress2.child !== current2.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var currentTreeHiddenStackCursor = createCursor(null);
        var prevRenderLanesStackCursor = createCursor(NoLanes);
        function pushHiddenContext(fiber, context) {
          var prevRenderLanes = getRenderLanes();
          push(prevRenderLanesStackCursor, prevRenderLanes, fiber);
          push(currentTreeHiddenStackCursor, context, fiber);
          setRenderLanes(mergeLanes(prevRenderLanes, context.baseLanes));
        }
        function reuseHiddenContextOnStack(fiber) {
          push(prevRenderLanesStackCursor, getRenderLanes(), fiber);
          push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current, fiber);
        }
        function popHiddenContext(fiber) {
          setRenderLanes(prevRenderLanesStackCursor.current);
          pop(currentTreeHiddenStackCursor, fiber);
          pop(prevRenderLanesStackCursor, fiber);
        }
        function isCurrentTreeHidden() {
          return currentTreeHiddenStackCursor.current !== null;
        }
        var suspenseHandlerStackCursor = createCursor(null);
        var shellBoundary = null;
        function getShellBoundary() {
          return shellBoundary;
        }
        function pushPrimaryTreeSuspenseHandler(handler) {
          var current2 = handler.alternate;
          pushSuspenseListContext(handler, setDefaultShallowSuspenseListContext(suspenseStackCursor.current));
          push(suspenseHandlerStackCursor, handler, handler);
          if (shellBoundary === null) {
            if (current2 === null || isCurrentTreeHidden()) {
              shellBoundary = handler;
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                shellBoundary = handler;
              }
            }
          }
        }
        function pushFallbackTreeSuspenseHandler(fiber) {
          reuseSuspenseHandlerOnStack(fiber);
        }
        function pushOffscreenSuspenseHandler(fiber) {
          if (fiber.tag === OffscreenComponent) {
            pushSuspenseListContext(fiber, suspenseStackCursor.current);
            push(suspenseHandlerStackCursor, fiber, fiber);
            if (shellBoundary !== null)
              ;
            else {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  shellBoundary = fiber;
                }
              }
            }
          } else {
            reuseSuspenseHandlerOnStack(fiber);
          }
        }
        function reuseSuspenseHandlerOnStack(fiber) {
          pushSuspenseListContext(fiber, suspenseStackCursor.current);
          push(suspenseHandlerStackCursor, getSuspenseHandler(), fiber);
        }
        function getSuspenseHandler() {
          return suspenseHandlerStackCursor.current;
        }
        function popSuspenseHandler(fiber) {
          pop(suspenseHandlerStackCursor, fiber);
          if (shellBoundary === fiber) {
            shellBoundary = null;
          }
          popSuspenseListContext(fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseListContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseListContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseListContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function pushSuspenseListContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseListContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
            // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags$1;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags = (
          /*   */
          0
        );
        var HasEffect = (
          /* */
          1
        );
        var Insertion = (
          /* */
          2
        );
        var Layout = (
          /*    */
          4
        );
        var Passive = (
          /*   */
          8
        );
        var ReactCurrentActQueue$2 = ReactSharedInternals.ReactCurrentActQueue;
        var firstScheduledRoot = null;
        var lastScheduledRoot = null;
        var didScheduleMicrotask = false;
        var didScheduleMicrotask_act = false;
        var mightHavePendingSyncWork = false;
        var isFlushingWork = false;
        var currentEventTransitionLane = NoLane;
        function ensureRootIsScheduled(root2) {
          if (root2 === lastScheduledRoot || root2.next !== null)
            ;
          else {
            if (lastScheduledRoot === null) {
              firstScheduledRoot = lastScheduledRoot = root2;
            } else {
              lastScheduledRoot.next = root2;
              lastScheduledRoot = root2;
            }
          }
          mightHavePendingSyncWork = true;
          if (ReactCurrentActQueue$2.current !== null) {
            if (!didScheduleMicrotask_act) {
              didScheduleMicrotask_act = true;
              scheduleImmediateTask(processRootScheduleInMicrotask);
            }
          } else {
            if (!didScheduleMicrotask) {
              didScheduleMicrotask = true;
              scheduleImmediateTask(processRootScheduleInMicrotask);
            }
          }
          if (ReactCurrentActQueue$2.isBatchingLegacy && root2.tag === LegacyRoot) {
            ReactCurrentActQueue$2.didScheduleLegacyUpdate = true;
          }
        }
        function unscheduleAllRoots() {
          var root2 = firstScheduledRoot;
          while (root2 !== null) {
            var next = root2.next;
            root2.next = null;
            root2 = next;
          }
          firstScheduledRoot = lastScheduledRoot = null;
        }
        function flushSyncWorkOnAllRoots() {
          flushSyncWorkAcrossRoots_impl(false);
        }
        function flushSyncWorkOnLegacyRootsOnly() {
          flushSyncWorkAcrossRoots_impl(true);
        }
        function flushSyncWorkAcrossRoots_impl(onlyLegacy) {
          if (isFlushingWork) {
            return;
          }
          if (!mightHavePendingSyncWork) {
            return;
          }
          var workInProgressRoot2 = getWorkInProgressRoot();
          var workInProgressRootRenderLanes2 = getWorkInProgressRootRenderLanes();
          var didPerformSomeWork;
          var nestedUpdatePasses = 0;
          var errors = null;
          isFlushingWork = true;
          do {
            didPerformSomeWork = false;
            if (++nestedUpdatePasses > 60) {
              unscheduleAllRoots();
              var infiniteUpdateError = new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
              if (errors === null) {
                errors = [infiniteUpdateError];
              } else {
                errors.push(infiniteUpdateError);
              }
              break;
            }
            var root2 = firstScheduledRoot;
            while (root2 !== null) {
              if (onlyLegacy && root2.tag !== LegacyRoot)
                ;
              else {
                var nextLanes = getNextLanes(root2, root2 === workInProgressRoot2 ? workInProgressRootRenderLanes2 : NoLanes);
                if (includesSyncLane(nextLanes)) {
                  try {
                    didPerformSomeWork = true;
                    performSyncWorkOnRoot(root2);
                  } catch (error3) {
                    if (errors === null) {
                      errors = [error3];
                    } else {
                      errors.push(error3);
                    }
                  }
                }
              }
              root2 = root2.next;
            }
          } while (didPerformSomeWork);
          isFlushingWork = false;
          if (errors !== null) {
            if (errors.length > 1) {
              if (typeof AggregateError === "function") {
                throw new AggregateError(errors);
              } else {
                for (var i = 1; i < errors.length; i++) {
                  scheduleImmediateTask(throwError.bind(null, errors[i]));
                }
                var firstError = errors[0];
                throw firstError;
              }
            } else {
              var error2 = errors[0];
              throw error2;
            }
          }
        }
        function throwError(error2) {
          throw error2;
        }
        function processRootScheduleInMicrotask() {
          didScheduleMicrotask = false;
          {
            didScheduleMicrotask_act = false;
          }
          mightHavePendingSyncWork = false;
          var currentTime = now$1();
          var prev = null;
          var root2 = firstScheduledRoot;
          while (root2 !== null) {
            var next = root2.next;
            if (currentEventTransitionLane !== NoLane && shouldAttemptEagerTransition()) {
              markRootEntangled(root2, mergeLanes(currentEventTransitionLane, SyncLane));
            }
            var nextLanes = scheduleTaskForRootDuringMicrotask(root2, currentTime);
            if (nextLanes === NoLane) {
              root2.next = null;
              if (prev === null) {
                firstScheduledRoot = next;
              } else {
                prev.next = next;
              }
              if (next === null) {
                lastScheduledRoot = prev;
              }
            } else {
              prev = root2;
              if (includesSyncLane(nextLanes)) {
                mightHavePendingSyncWork = true;
              }
            }
            root2 = next;
          }
          currentEventTransitionLane = NoLane;
          flushSyncWorkOnAllRoots();
        }
        function scheduleTaskForRootDuringMicrotask(root2, currentTime) {
          markStarvedLanesAsExpired(root2, currentTime);
          var workInProgressRoot2 = getWorkInProgressRoot();
          var workInProgressRootRenderLanes2 = getWorkInProgressRootRenderLanes();
          var nextLanes = getNextLanes(root2, root2 === workInProgressRoot2 ? workInProgressRootRenderLanes2 : NoLanes);
          var existingCallbackNode = root2.callbackNode;
          if (
            // Check if there's nothing to work on
            nextLanes === NoLanes || // If this root is currently suspended and waiting for data to resolve, don't
            // schedule a task to render it. We'll either wait for a ping, or wait to
            // receive an update.
            //
            // Suspended render phase
            root2 === workInProgressRoot2 && isWorkLoopSuspendedOnData() || // Suspended commit phase
            root2.cancelPendingCommit !== null
          ) {
            if (existingCallbackNode !== null) {
              cancelCallback(existingCallbackNode);
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            return NoLane;
          }
          if (includesSyncLane(nextLanes)) {
            if (existingCallbackNode !== null) {
              cancelCallback(existingCallbackNode);
            }
            root2.callbackPriority = SyncLane;
            root2.callbackNode = null;
            return SyncLane;
          } else {
            var existingCallbackPriority = root2.callbackPriority;
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            if (newCallbackPriority === existingCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-schedule
            // on the `act` queue.
            !(ReactCurrentActQueue$2.current !== null && existingCallbackNode !== fakeActCallbackNode$1)) {
              return newCallbackPriority;
            } else {
              cancelCallback(existingCallbackNode);
            }
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority$1;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority$1;
                break;
            }
            var newCallbackNode = scheduleCallback$2(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
            return newCallbackPriority;
          }
        }
        function getContinuationForRoot(root2, originalCallbackNode) {
          scheduleTaskForRootDuringMicrotask(root2, now$1());
          if (root2.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root2);
          }
          return null;
        }
        var fakeActCallbackNode$1 = {};
        function scheduleCallback$2(priorityLevel, callback) {
          if (ReactCurrentActQueue$2.current !== null) {
            ReactCurrentActQueue$2.current.push(callback);
            return fakeActCallbackNode$1;
          } else {
            return scheduleCallback$3(priorityLevel, callback);
          }
        }
        function cancelCallback(callbackNode) {
          if (callbackNode === fakeActCallbackNode$1)
            ;
          else if (callbackNode !== null) {
            cancelCallback$1(callbackNode);
          }
        }
        function scheduleImmediateTask(cb) {
          if (ReactCurrentActQueue$2.current !== null) {
            ReactCurrentActQueue$2.current.push(function() {
              cb();
              return null;
            });
          }
          {
            scheduleMicrotask(function() {
              var executionContext2 = getExecutionContext();
              if ((executionContext2 & (RenderContext | CommitContext)) !== NoContext) {
                scheduleCallback$3(ImmediatePriority, cb);
                return;
              }
              cb();
            });
          }
        }
        function requestTransitionLane() {
          if (currentEventTransitionLane === NoLane) {
            currentEventTransitionLane = claimNextTransitionLane();
          }
          return currentEventTransitionLane;
        }
        var currentEntangledListeners = null;
        var currentEntangledPendingCount = 0;
        var currentEntangledLane = NoLane;
        function requestAsyncActionContext(actionReturnValue, finishedState) {
          if (actionReturnValue !== null && typeof actionReturnValue === "object" && typeof actionReturnValue.then === "function") {
            var thenable = actionReturnValue;
            var entangledListeners;
            if (currentEntangledListeners === null) {
              entangledListeners = currentEntangledListeners = [];
              currentEntangledPendingCount = 0;
              currentEntangledLane = requestTransitionLane();
            } else {
              entangledListeners = currentEntangledListeners;
            }
            currentEntangledPendingCount++;
            var resultStatus = "pending";
            var rejectedReason;
            thenable.then(function() {
              resultStatus = "fulfilled";
              pingEngtangledActionScope();
            }, function(error2) {
              resultStatus = "rejected";
              rejectedReason = error2;
              pingEngtangledActionScope();
            });
            var resultThenable = createResultThenable(entangledListeners);
            entangledListeners.push(function() {
              switch (resultStatus) {
                case "fulfilled": {
                  var fulfilledThenable = resultThenable;
                  fulfilledThenable.status = "fulfilled";
                  fulfilledThenable.value = finishedState;
                  break;
                }
                case "rejected": {
                  var rejectedThenable = resultThenable;
                  rejectedThenable.status = "rejected";
                  rejectedThenable.reason = rejectedReason;
                  break;
                }
                case "pending":
                default: {
                  throw new Error("Thenable should have already resolved. This is a bug in React.");
                }
              }
            });
            return resultThenable;
          } else {
            if (currentEntangledListeners === null) {
              return finishedState;
            } else {
              var _entangledListeners = currentEntangledListeners;
              var _resultThenable = createResultThenable(_entangledListeners);
              _entangledListeners.push(function() {
                var fulfilledThenable = _resultThenable;
                fulfilledThenable.status = "fulfilled";
                fulfilledThenable.value = finishedState;
              });
              return _resultThenable;
            }
          }
        }
        function pingEngtangledActionScope() {
          if (currentEntangledListeners !== null && --currentEntangledPendingCount === 0) {
            var listeners = currentEntangledListeners;
            currentEntangledListeners = null;
            currentEntangledLane = NoLane;
            for (var i = 0; i < listeners.length; i++) {
              var listener = listeners[i];
              listener();
            }
          }
        }
        function createResultThenable(entangledListeners) {
          var resultThenable = {
            status: "pending",
            value: null,
            reason: null,
            then: function(resolve) {
              var ping = resolve;
              entangledListeners.push(ping);
            }
          };
          return resultThenable;
        }
        function peekEntangledActionLane() {
          return currentEntangledLane;
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        var didWarnAboutUseWrappedInTryCatch;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUseWrappedInTryCatch = /* @__PURE__ */ new Set();
        }
        var renderLanes$1 = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var shouldDoubleInvokeUserFnsInHooksDEV = false;
        var localIdCounter = 0;
        var thenableIndexCounter = 0;
        var thenableState = null;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes$1 = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var shouldDoubleRenderDEV = (workInProgress2.mode & StrictLegacyMode) !== NoMode;
          shouldDoubleInvokeUserFnsInHooksDEV = shouldDoubleRenderDEV;
          var children = Component(props, secondArg);
          shouldDoubleInvokeUserFnsInHooksDEV = false;
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            children = renderWithHooksAgain(workInProgress2, Component, props, secondArg);
          }
          if (shouldDoubleRenderDEV) {
            setIsStrictModeForDevtools(true);
            try {
              children = renderWithHooksAgain(workInProgress2, Component, props, secondArg);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          finishRenderingHooks(current2, workInProgress2);
          return children;
        }
        function finishRenderingHooks(current2, workInProgress2) {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes$1 = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
            // and creates false positives. To make this work in legacy mode, we'd
            // need to mark fibers that commit in an incomplete state, somehow. For
            // now I'll disable the warning that most of the bugs that would trigger
            // it are either exclusive to concurrent mode or exist in both.
            (current2.mode & ConcurrentMode) !== NoMode) {
              error("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          thenableIndexCounter = 0;
          thenableState = null;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          {
            if (checkIfUseWrappedInTryCatch()) {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Unknown";
              if (!didWarnAboutUseWrappedInTryCatch.has(componentName)) {
                didWarnAboutUseWrappedInTryCatch.add(componentName);
                error("`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary.");
              }
            }
          }
        }
        function replaySuspendedComponentWithHooks(current2, workInProgress2, Component, props, secondArg) {
          {
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          var children = renderWithHooksAgain(workInProgress2, Component, props, secondArg);
          finishRenderingHooks(current2, workInProgress2);
          return children;
        }
        function renderWithHooksAgain(workInProgress2, Component, props, secondArg) {
          currentlyRenderingFiber$1 = workInProgress2;
          var numberOfReRenders = 0;
          var children;
          do {
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              thenableState = null;
            }
            thenableIndexCounter = 0;
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            if (numberOfReRenders >= RE_RENDER_LIMIT) {
              throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }
            numberOfReRenders += 1;
            {
              ignorePreviousDependencies = false;
            }
            currentHook = null;
            workInProgressHook = null;
            workInProgress2.updateQueue = null;
            {
              hookTypesUpdateIndexDev = -1;
            }
            ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
            children = Component(props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
          return children;
        }
        function renderTransitionAwareHostComponentWithHooks(current2, workInProgress2, lanes) {
          return renderWithHooks(current2, workInProgress2, TransitionAwareHostComponent, null, null, lanes);
        }
        function TransitionAwareHostComponent() {
          var dispatcher = ReactCurrentDispatcher$1.current;
          var _dispatcher$useState = dispatcher.useState(), maybeThenable = _dispatcher$useState[0];
          if (typeof maybeThenable.then === "function") {
            var thenable = maybeThenable;
            return useThenable(thenable);
          } else {
            var status = maybeThenable;
            return status;
          }
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive$1 | Update);
          } else {
            workInProgress2.flags &= ~(Passive$1 | Update);
          }
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          currentlyRenderingFiber$1 = null;
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        }
        function resetHooksOnUnwind(workInProgress2) {
          if (didScheduleRenderPhaseUpdate) {
            var hook = workInProgress2.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes$1 = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
          thenableIndexCounter = 0;
          thenableState = null;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              var currentFiber = currentlyRenderingFiber$1.alternate;
              if (currentFiber === null) {
                throw new Error("Update hook called on initial render. This is likely a bug in React. Please file an issue.");
              } else {
                throw new Error("Rendered more hooks than during the previous render.");
              }
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        var createFunctionComponentUpdateQueue;
        {
          createFunctionComponentUpdateQueue = function() {
            return {
              lastEffect: null,
              events: null,
              stores: null,
              memoCache: null
            };
          };
        }
        function useThenable(thenable) {
          var index2 = thenableIndexCounter;
          thenableIndexCounter += 1;
          if (thenableState === null) {
            thenableState = createThenableState();
          }
          var result = trackUsedThenable(thenableState, thenable, index2);
          if (currentlyRenderingFiber$1.alternate === null && (workInProgressHook === null ? currentlyRenderingFiber$1.memoizedState === null : workInProgressHook.next === null)) {
            {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          return result;
        }
        function use2(usable) {
          if (usable !== null && typeof usable === "object") {
            if (typeof usable.then === "function") {
              var thenable = usable;
              return useThenable(thenable);
            } else if (usable.$$typeof === REACT_CONTEXT_TYPE || usable.$$typeof === REACT_SERVER_CONTEXT_TYPE) {
              var context = usable;
              return readContext(context);
            }
          }
          throw new Error("An unsupported type was passed to use(): " + String(usable));
        }
        function useMemoCache(size) {
          var memoCache = null;
          var updateQueue = currentlyRenderingFiber$1.updateQueue;
          if (updateQueue !== null) {
            memoCache = updateQueue.memoCache;
          }
          if (memoCache == null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              var currentUpdateQueue = current2.updateQueue;
              if (currentUpdateQueue !== null) {
                var currentMemoCache = currentUpdateQueue.memoCache;
                if (currentMemoCache != null) {
                  memoCache = {
                    data: currentMemoCache.data.map(function(array) {
                      return array.slice();
                    }),
                    index: 0
                  };
                }
              }
            }
          }
          if (memoCache == null) {
            memoCache = {
              data: [],
              index: 0
            };
          }
          if (updateQueue === null) {
            updateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = updateQueue;
          }
          updateQueue.memoCache = memoCache;
          var data = memoCache.data[memoCache.index];
          if (data === void 0) {
            data = memoCache.data[memoCache.index] = new Array(size);
            for (var i = 0; i < size; i++) {
              data[i] = REACT_MEMO_CACHE_SENTINEL;
            }
          } else if (data.length !== size) {
            {
              error("Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.", data.length, size);
            }
          }
          memoCache.index++;
          return data;
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          return updateReducerImpl(hook, currentHook, reducer);
        }
        function updateReducerImpl(hook, current2, reducer) {
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var baseQueue = hook.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = hook.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = removeLanes(update.lane, OffscreenLane);
              var isHiddenUpdate = updateLane !== update.lane;
              var shouldSkipUpdate = isHiddenUpdate ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane) : !isSubsetOfLanes(renderLanes$1, updateLane);
              if (shouldSkipUpdate) {
                var clone = {
                  lane: updateLane,
                  revertLane: update.revertLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                var revertLane = update.revertLane;
                if (revertLane === NoLane) {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      revertLane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                } else {
                  if (isSubsetOfLanes(renderLanes$1, revertLane)) {
                    update = update.next;
                    continue;
                  } else {
                    var _clone2 = {
                      // Once we commit an optimistic update, we shouldn't uncommit it
                      // until the transition it is associated with has finished
                      // (represented by revertLane). Using NoLane here works because 0
                      // is a subset of all bitmasks, so this will never be skipped by
                      // the check above.
                      lane: NoLane,
                      // Reuse the same revertLane so we know when the transition
                      // has finished.
                      revertLane: update.revertLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    if (newBaseQueueLast === null) {
                      newBaseQueueFirst = newBaseQueueLast = _clone2;
                      newBaseState = newState;
                    } else {
                      newBaseQueueLast = newBaseQueueLast.next = _clone2;
                    }
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, revertLane);
                    markSkippedUpdateLanes(revertLane);
                  }
                }
                var action = update.action;
                if (shouldDoubleInvokeUserFnsInHooksDEV) {
                  reducer(newState, action);
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes$1)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          fiber.flags |= Passive$1;
          pushEffect(HasEffect | Passive, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), createEffectInstance(), null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          }
          var prevSnapshot = (currentHook || hook).memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the subscribe function changed. We can save some memory by
          // checking whether we scheduled a subscription effect above.
          workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive$1;
            pushEffect(HasEffect | Passive, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), createEffectInstance(), null);
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!isHydrating2 && !includesBlockingLane(root2, renderLanes$1)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane);
          }
        }
        function mountStateImpl(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          return hook;
        }
        function mountState(initialState) {
          var hook = mountStateImpl(initialState);
          var queue = hook.queue;
          var dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          queue.dispatch = dispatch;
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function mountOptimistic(passthrough, reducer) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = hook.baseState = passthrough;
          var queue = {
            pending: null,
            lanes: NoLanes,
            dispatch: null,
            // Optimistic state does not use the eager update optimization.
            lastRenderedReducer: null,
            lastRenderedState: null
          };
          hook.queue = queue;
          var dispatch = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, true, queue);
          queue.dispatch = dispatch;
          return [passthrough, dispatch];
        }
        function updateOptimistic(passthrough, reducer) {
          var hook = updateWorkInProgressHook();
          hook.baseState = hook.memoizedState = passthrough;
          var resolvedReducer = typeof reducer === "function" ? reducer : basicStateReducer;
          return updateReducerImpl(hook, currentHook, resolvedReducer);
        }
        function rerenderOptimistic(passthrough, reducer) {
          if (currentHook !== null) {
            return updateOptimistic(passthrough, reducer);
          }
          var hook = updateWorkInProgressHook();
          hook.baseState = hook.memoizedState = passthrough;
          var dispatch = hook.queue.dispatch;
          return [passthrough, dispatch];
        }
        function pushEffect(tag, create, inst, deps) {
          var effect = {
            tag,
            create,
            inst,
            deps,
            // Circular
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function createEffectInstance() {
          return {
            destroy: void 0
          };
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, createEffectInstance(), nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var effect = hook.memoizedState;
          var inst = effect.inst;
          if (currentHook !== null) {
            if (nextDeps !== null) {
              var prevEffect = currentHook.memoizedState;
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create, inst, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, inst, nextDeps);
        }
        function mountEffect(create, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode && (currentlyRenderingFiber$1.mode & NoStrictPassiveEffectsMode) === NoMode) {
            mountEffectImpl(MountPassiveDev | Passive$1 | PassiveStatic, Passive, create, deps);
          } else {
            mountEffectImpl(Passive$1 | PassiveStatic, Passive, create, deps);
          }
        }
        function updateEffect(create, deps) {
          updateEffectImpl(Passive$1, Passive, create, deps);
        }
        function useEffectEventImpl(payload) {
          currentlyRenderingFiber$1.flags |= Update;
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.events = [payload];
          } else {
            var events = componentUpdateQueue.events;
            if (events === null) {
              componentUpdateQueue.events = [payload];
            } else {
              events.push(payload);
            }
          }
        }
        function mountEvent(callback) {
          var hook = mountWorkInProgressHook();
          var ref = {
            impl: callback
          };
          hook.memoizedState = ref;
          return function eventFn() {
            if (isInvalidExecutionContextForEventFunction()) {
              throw new Error("A function wrapped in useEffectEvent can't be called during rendering.");
            }
            return ref.impl.apply(void 0, arguments);
          };
        }
        function updateEvent(callback) {
          var hook = updateWorkInProgressHook();
          var ref = hook.memoizedState;
          useEffectEventImpl({
            ref,
            nextImpl: callback
          });
          return function eventFn() {
            if (isInvalidExecutionContextForEventFunction()) {
              throw new Error("A function wrapped in useEffectEvent can't be called during rendering.");
            }
            return ref.impl.apply(void 0, arguments);
          };
        }
        function mountInsertionEffect(create, deps) {
          mountEffectImpl(Update, Insertion, create, deps);
        }
        function updateInsertionEffect(create, deps) {
          return updateEffectImpl(Update, Insertion, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          var fiberFlags = Update | LayoutStatic;
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var inst = create();
            refCallback(inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst = create();
            refObject.current = _inst;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update | LayoutStatic;
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          if (shouldDoubleInvokeUserFnsInHooksDEV) {
            nextCreate();
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
          if (shouldDoubleInvokeUserFnsInHooksDEV) {
            nextCreate();
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes$1);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(fiber, queue, pendingState, finishedState, callback, options2) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          {
            dispatchOptimisticSetState(fiber, false, queue, pendingState);
          }
          var currentTransition = ReactCurrentBatchConfig$3.transition = {};
          {
            ReactCurrentBatchConfig$3.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            if (enableAsyncActions) {
              var returnValue = callback();
              var maybeThenable = requestAsyncActionContext(returnValue, finishedState);
              dispatchSetState(fiber, queue, maybeThenable);
            }
          } catch (error2) {
            {
              var rejectedThenable = {
                then: function() {
                },
                status: "rejected",
                reason: error2
              };
              dispatchSetState(fiber, queue, rejectedThenable);
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                currentTransition._updatedFibers.clear();
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
              }
            }
          }
        }
        function startHostTransition(formFiber, pendingState, callback, formData) {
          if (formFiber.tag !== HostComponent) {
            throw new Error("Expected the form instance to be a HostComponent. This is a bug in React.");
          }
          var queue;
          if (formFiber.memoizedState === null) {
            var newQueue = {
              pending: null,
              lanes: NoLanes,
              // We're going to cheat and intentionally not create a bound dispatch
              // method, because we can call it directly in startTransition.
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: NotPendingTransition
            };
            queue = newQueue;
            var stateHook = {
              memoizedState: NotPendingTransition,
              baseState: NotPendingTransition,
              baseQueue: null,
              queue: newQueue,
              next: null
            };
            formFiber.memoizedState = stateHook;
            var alternate = formFiber.alternate;
            if (alternate !== null) {
              alternate.memoizedState = stateHook;
            }
          } else {
            var _stateHook = formFiber.memoizedState;
            queue = _stateHook.queue;
          }
          startTransition(
            formFiber,
            queue,
            pendingState,
            NotPendingTransition,
            // TODO: We can avoid this extra wrapper, somehow. Figure out layering
            // once more of this function is implemented.
            function() {
              return callback(formData);
            }
          );
        }
        function mountTransition() {
          var stateHook = mountStateImpl(false);
          var start = startTransition.bind(null, currentlyRenderingFiber$1, stateHook.queue, true, false);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start;
          return [false, start];
        }
        function updateTransition() {
          var _updateState = updateState(), booleanOrThenable = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          var isPending = typeof booleanOrThenable === "boolean" ? booleanOrThenable : (
            // This will suspend until the async action scope has finished.
            useThenable(booleanOrThenable)
          );
          return [isPending, start];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), booleanOrThenable = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          var isPending = typeof booleanOrThenable === "boolean" ? booleanOrThenable : (
            // This will suspend until the async action scope has finished.
            useThenable(booleanOrThenable)
          );
          return [isPending, start];
        }
        function useHostTransitionStatus() {
          var status = readContext(HostTransitionContext);
          return status !== null ? status : NotPendingTransition;
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root2 = getWorkInProgressRoot();
          var identifierPrefix = root2.identifierPrefix;
          var id;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            id += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id;
          return id;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id = hook.memoizedState;
          return id;
        }
        function mountRefresh() {
          var hook = mountWorkInProgressHook();
          var refresh = hook.memoizedState = refreshCache.bind(null, currentlyRenderingFiber$1);
          return refresh;
        }
        function updateRefresh() {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function refreshCache(fiber, seedKey, seedValue) {
          var provider = fiber.return;
          while (provider !== null) {
            switch (provider.tag) {
              case CacheComponent:
              case HostRoot: {
                var lane = requestUpdateLane(provider);
                var refreshUpdate = createUpdate(lane);
                var root2 = enqueueUpdate(provider, refreshUpdate, lane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, provider, lane);
                  entangleTransitions(root2, provider, lane);
                }
                var seededCache = createCache();
                if (seedKey !== null && seedKey !== void 0 && root2 !== null) {
                  {
                    seededCache.data.set(seedKey, seedValue);
                  }
                }
                var payload = {
                  cache: seededCache
                };
                refreshUpdate.payload = payload;
                return;
              }
            }
            provider = provider.return;
          }
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            revertLane: NoLane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            revertLane: NoLane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update);
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
          var update = {
            // An optimistic update commits synchronously.
            lane: SyncLane,
            // After committing, the optimistic update is "reverted" using the same
            // lane as the transition it's associated with.
            //
            // TODO: Warn if there's no transition/action associated with this
            // optimistic update.
            revertLane: requestTransitionLane(),
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            if (throwIfDuringRender) {
              throw new Error("Cannot update optimistic state while rendering.");
            } else {
              {
                error("Cannot call startTransition while rendering.");
              }
            }
          } else {
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane);
            }
          }
          markUpdateInDevTools(fiber, SyncLane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function entangleTransitionUpdate(root2, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          use: use2,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError
        };
        {
          ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;
        }
        {
          ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;
        }
        {
          ContextOnlyDispatcher.useEffectEvent = throwInvalidHookError;
        }
        {
          ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;
        }
        {
          ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;
        }
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            use: use2,
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            }
          };
          {
            HooksDispatcherOnMountInDEV.useCacheRefresh = function useCacheRefresh() {
              currentHookNameInDev = "useCacheRefresh";
              mountHookTypesDev();
              return mountRefresh();
            };
          }
          {
            HooksDispatcherOnMountInDEV.useMemoCache = useMemoCache;
          }
          {
            HooksDispatcherOnMountInDEV.useEffectEvent = function useEffectEvent(callback) {
              currentHookNameInDev = "useEffectEvent";
              mountHookTypesDev();
              return mountEvent(callback);
            };
          }
          {
            HooksDispatcherOnMountInDEV.useHostTransitionStatus = useHostTransitionStatus;
          }
          {
            HooksDispatcherOnMountInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {
              currentHookNameInDev = "useOptimistic";
              mountHookTypesDev();
              return mountOptimistic(passthrough);
            };
          }
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            use: use2,
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            }
          };
          {
            HooksDispatcherOnMountWithHookTypesInDEV.useCacheRefresh = function useCacheRefresh() {
              currentHookNameInDev = "useCacheRefresh";
              updateHookTypesDev();
              return mountRefresh();
            };
          }
          {
            HooksDispatcherOnMountWithHookTypesInDEV.useMemoCache = useMemoCache;
          }
          {
            HooksDispatcherOnMountWithHookTypesInDEV.useEffectEvent = function useEffectEvent(callback) {
              currentHookNameInDev = "useEffectEvent";
              updateHookTypesDev();
              return mountEvent(callback);
            };
          }
          {
            HooksDispatcherOnMountWithHookTypesInDEV.useHostTransitionStatus = useHostTransitionStatus;
          }
          {
            HooksDispatcherOnMountWithHookTypesInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {
              currentHookNameInDev = "useOptimistic";
              updateHookTypesDev();
              return mountOptimistic(passthrough);
            };
          }
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            use: use2,
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            }
          };
          {
            HooksDispatcherOnUpdateInDEV.useCacheRefresh = function useCacheRefresh() {
              currentHookNameInDev = "useCacheRefresh";
              updateHookTypesDev();
              return updateRefresh();
            };
          }
          {
            HooksDispatcherOnUpdateInDEV.useMemoCache = useMemoCache;
          }
          {
            HooksDispatcherOnUpdateInDEV.useEffectEvent = function useEffectEvent(callback) {
              currentHookNameInDev = "useEffectEvent";
              updateHookTypesDev();
              return updateEvent(callback);
            };
          }
          {
            HooksDispatcherOnUpdateInDEV.useHostTransitionStatus = useHostTransitionStatus;
          }
          {
            HooksDispatcherOnUpdateInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {
              currentHookNameInDev = "useOptimistic";
              updateHookTypesDev();
              return updateOptimistic(passthrough, reducer);
            };
          }
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            use: use2,
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            }
          };
          {
            HooksDispatcherOnRerenderInDEV.useCacheRefresh = function useCacheRefresh() {
              currentHookNameInDev = "useCacheRefresh";
              updateHookTypesDev();
              return updateRefresh();
            };
          }
          {
            HooksDispatcherOnRerenderInDEV.useMemoCache = useMemoCache;
          }
          {
            HooksDispatcherOnRerenderInDEV.useEffectEvent = function useEffectEvent(callback) {
              currentHookNameInDev = "useEffectEvent";
              updateHookTypesDev();
              return updateEvent(callback);
            };
          }
          {
            HooksDispatcherOnRerenderInDEV.useHostTransitionStatus = useHostTransitionStatus;
          }
          {
            HooksDispatcherOnRerenderInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {
              currentHookNameInDev = "useOptimistic";
              updateHookTypesDev();
              return rerenderOptimistic(passthrough, reducer);
            };
          }
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            use: function(usable) {
              warnInvalidHookAccess();
              return use2(usable);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            }
          };
          {
            InvalidNestedHooksDispatcherOnMountInDEV.useCacheRefresh = function useCacheRefresh() {
              currentHookNameInDev = "useCacheRefresh";
              mountHookTypesDev();
              return mountRefresh();
            };
          }
          {
            InvalidNestedHooksDispatcherOnMountInDEV.useMemoCache = function(size) {
              warnInvalidHookAccess();
              return useMemoCache(size);
            };
          }
          {
            InvalidNestedHooksDispatcherOnMountInDEV.useEffectEvent = function useEffectEvent(callback) {
              currentHookNameInDev = "useEffectEvent";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEvent(callback);
            };
          }
          {
            InvalidNestedHooksDispatcherOnMountInDEV.useHostTransitionStatus = useHostTransitionStatus;
          }
          {
            InvalidNestedHooksDispatcherOnMountInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {
              currentHookNameInDev = "useOptimistic";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountOptimistic(passthrough);
            };
          }
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            use: function(usable) {
              warnInvalidHookAccess();
              return use2(usable);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            }
          };
          {
            InvalidNestedHooksDispatcherOnUpdateInDEV.useCacheRefresh = function useCacheRefresh() {
              currentHookNameInDev = "useCacheRefresh";
              updateHookTypesDev();
              return updateRefresh();
            };
          }
          {
            InvalidNestedHooksDispatcherOnUpdateInDEV.useMemoCache = function(size) {
              warnInvalidHookAccess();
              return useMemoCache(size);
            };
          }
          {
            InvalidNestedHooksDispatcherOnUpdateInDEV.useEffectEvent = function useEffectEvent(callback) {
              currentHookNameInDev = "useEffectEvent";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEvent(callback);
            };
          }
          {
            InvalidNestedHooksDispatcherOnUpdateInDEV.useHostTransitionStatus = useHostTransitionStatus;
          }
          {
            InvalidNestedHooksDispatcherOnUpdateInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {
              currentHookNameInDev = "useOptimistic";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateOptimistic(passthrough, reducer);
            };
          }
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            use: function(usable) {
              warnInvalidHookAccess();
              return use2(usable);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            }
          };
          {
            InvalidNestedHooksDispatcherOnRerenderInDEV.useCacheRefresh = function useCacheRefresh() {
              currentHookNameInDev = "useCacheRefresh";
              updateHookTypesDev();
              return updateRefresh();
            };
          }
          {
            InvalidNestedHooksDispatcherOnRerenderInDEV.useMemoCache = function(size) {
              warnInvalidHookAccess();
              return useMemoCache(size);
            };
          }
          {
            InvalidNestedHooksDispatcherOnRerenderInDEV.useEffectEvent = function useEffectEvent(callback) {
              currentHookNameInDev = "useEffectEvent";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEvent(callback);
            };
          }
          {
            InvalidNestedHooksDispatcherOnRerenderInDEV.useHostTransitionStatus = useHostTransitionStatus;
          }
          {
            InvalidNestedHooksDispatcherOnRerenderInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {
              currentHookNameInDev = "useOptimistic";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderOptimistic(passthrough, reducer);
            };
          }
        }
        var now = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  root2.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  if (root2 !== null) {
                    root2.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var fakeInternalInstance = {};
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        var didWarnOnInvalidCallback;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function warnOnUndefinedDerivedState(type, partialState) {
          {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          }
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          // $FlowFixMe[missing-local-annot]
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback$1(callback, "setState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback$1(callback, "replaceState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          // $FlowFixMe[missing-local-annot]
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback$1(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var state = instance.state;
            if (state && (typeof state !== "object" || isArray(state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = {};
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.flags |= Update | LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags |= MountLayoutDev;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update | LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags |= MountLayoutDev;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update | LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags |= MountLayoutDev;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update | LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags |= MountLayoutDev;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
          // both before and after `shouldComponentUpdate` has been called. Not ideal,
          // but I'm loath to refactor this function. This only happens for memoized
          // components so it's not that common.
          enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
          };
        }
        function createCapturedValue(value, digest, stack) {
          return {
            value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            }
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update;
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, rootRenderLanes);
            }
          }
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getSuspenseHandler();
            if (suspenseBoundary !== null) {
              switch (suspenseBoundary.tag) {
                case SuspenseComponent: {
                  if (sourceFiber.mode & ConcurrentMode) {
                    if (getShellBoundary() === null) {
                      renderDidSuspendDelayIfPossible();
                    } else {
                      var current2 = suspenseBoundary.alternate;
                      if (current2 === null) {
                        renderDidSuspend();
                      }
                    }
                  }
                  suspenseBoundary.flags &= ~ForceClientRender;
                  markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  var isSuspenseyResource = wakeable === noopSuspenseyCommitThenable;
                  if (isSuspenseyResource) {
                    suspenseBoundary.flags |= ScheduleRetry;
                  } else {
                    var retryQueue = suspenseBoundary.updateQueue;
                    if (retryQueue === null) {
                      suspenseBoundary.updateQueue = /* @__PURE__ */ new Set([wakeable]);
                    } else {
                      retryQueue.add(wakeable);
                    }
                  }
                  break;
                }
                case OffscreenComponent: {
                  if (suspenseBoundary.mode & ConcurrentMode) {
                    suspenseBoundary.flags |= ShouldCapture;
                    var _isSuspenseyResource = wakeable === noopSuspenseyCommitThenable;
                    if (_isSuspenseyResource) {
                      suspenseBoundary.flags |= ScheduleRetry;
                    } else {
                      var offscreenQueue = suspenseBoundary.updateQueue;
                      if (offscreenQueue === null) {
                        var newOffscreenQueue = {
                          transitions: null,
                          markerInstances: null,
                          retryQueue: /* @__PURE__ */ new Set([wakeable])
                        };
                        suspenseBoundary.updateQueue = newOffscreenQueue;
                      } else {
                        var _retryQueue = offscreenQueue.retryQueue;
                        if (_retryQueue === null) {
                          offscreenQueue.retryQueue = /* @__PURE__ */ new Set([wakeable]);
                        } else {
                          _retryQueue.add(wakeable);
                        }
                      }
                    }
                    break;
                  }
                }
                default: {
                  throw new Error("Unexpected Suspense handler tag (" + suspenseBoundary.tag + "). This is a bug in React.");
                }
              }
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root2, wakeable, rootRenderLanes);
              }
              return;
            } else {
              if (root2.tag === ConcurrentRoot) {
                attachPingListener(root2, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              } else {
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getSuspenseHandler();
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags$1) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags$1 && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
        var SelectiveHydrationException = new Error("This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue.");
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        var didWarnAboutDefaultPropsOnFunctionComponent;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
          didWarnAboutDefaultPropsOnFunctionComponent = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$2.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (current2 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
            Component.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(type)
                );
              }
              if (Component.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(
                _innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(_type)
              );
            }
          }
          var currentChild = current2.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    nextProps,
                    // Resolved (SimpleMemoComponent has no defaultProps)
                    "prop",
                    getComponentNameFromType(outerMemoType)
                  );
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
            workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags$1) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var nextIsDetached = (workInProgress2.stateNode._pendingVisibility & OffscreenDetached) !== 0;
          var prevState = current2 !== null ? current2.memoizedState : null;
          markRef$1(current2, workInProgress2);
          if (nextProps.mode === "hidden" || enableLegacyHidden || nextIsDetached) {
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags$1;
            if (didSuspend) {
              var nextBaseLanes = prevState !== null ? mergeLanes(prevState.baseLanes, renderLanes2) : renderLanes2;
              if (current2 !== null) {
                var currentChild = workInProgress2.child = current2.child;
                var currentChildLanes = NoLanes;
                while (currentChild !== null) {
                  currentChildLanes = mergeLanes(mergeLanes(currentChildLanes, currentChild.lanes), currentChild.childLanes);
                  currentChild = currentChild.sibling;
                }
                var lanesWeJustAttempted = nextBaseLanes;
                var remainingChildLanes = removeLanes(currentChildLanes, lanesWeJustAttempted);
                workInProgress2.childLanes = remainingChildLanes;
              } else {
                workInProgress2.childLanes = NoLanes;
                workInProgress2.child = null;
              }
              return deferHiddenOffscreenComponent(current2, workInProgress2, nextBaseLanes);
            }
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null
              };
              workInProgress2.memoizedState = nextState;
              {
                if (current2 !== null) {
                  pushTransition(workInProgress2, null);
                }
              }
              reuseHiddenContextOnStack(workInProgress2);
              pushOffscreenSuspenseHandler(workInProgress2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextBaseLanes = prevState !== null ? mergeLanes(prevState.baseLanes, renderLanes2) : renderLanes2;
              return deferHiddenOffscreenComponent(current2, workInProgress2, _nextBaseLanes);
            } else {
              var _nextState = {
                baseLanes: NoLanes,
                cachePool: null
              };
              workInProgress2.memoizedState = _nextState;
              if (current2 !== null) {
                var prevCachePool = prevState !== null ? prevState.cachePool : null;
                pushTransition(workInProgress2, prevCachePool);
              }
              if (prevState !== null) {
                pushHiddenContext(workInProgress2, prevState);
              } else {
                reuseHiddenContextOnStack(workInProgress2);
              }
              pushOffscreenSuspenseHandler(workInProgress2);
            }
          } else {
            if (prevState !== null) {
              var _prevCachePool = null;
              {
                _prevCachePool = prevState.cachePool;
              }
              pushTransition(workInProgress2, _prevCachePool);
              pushHiddenContext(workInProgress2, prevState);
              reuseSuspenseHandlerOnStack(workInProgress2);
              workInProgress2.memoizedState = null;
            } else {
              {
                if (current2 !== null) {
                  pushTransition(workInProgress2, null);
                }
              }
              reuseHiddenContextOnStack(workInProgress2);
              reuseSuspenseHandlerOnStack(workInProgress2);
            }
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function deferHiddenOffscreenComponent(current2, workInProgress2, nextBaseLanes, renderLanes2) {
          var nextState = {
            baseLanes: nextBaseLanes,
            // Save the cache pool so we can resume later.
            cachePool: getOffscreenDeferredCache()
          };
          workInProgress2.memoizedState = nextState;
          {
            if (current2 !== null) {
              pushTransition(workInProgress2, null);
            }
          }
          reuseHiddenContextOnStack(workInProgress2);
          pushOffscreenSuspenseHandler(workInProgress2);
          return null;
        }
        function updateCacheComponent(current2, workInProgress2, renderLanes2) {
          prepareToReadContext(workInProgress2, renderLanes2);
          var parentCache = readContext(CacheContext);
          if (current2 === null) {
            var freshCache = requestCacheFromPool(renderLanes2);
            var initialState = {
              parent: parentCache,
              cache: freshCache
            };
            workInProgress2.memoizedState = initialState;
            initializeUpdateQueue(workInProgress2);
            pushCacheProvider(workInProgress2, freshCache);
          } else {
            if (includesSomeLane(current2.lanes, renderLanes2)) {
              cloneUpdateQueue(current2, workInProgress2);
              processUpdateQueue(workInProgress2, null, null, renderLanes2);
            }
            var prevState = current2.memoizedState;
            var nextState = workInProgress2.memoizedState;
            if (prevState.parent !== parentCache) {
              var derivedState = {
                parent: parentCache,
                cache: parentCache
              };
              workInProgress2.memoizedState = derivedState;
              if (workInProgress2.lanes === NoLanes) {
                var updateQueue = workInProgress2.updateQueue;
                workInProgress2.memoizedState = updateQueue.baseState = derivedState;
              }
              pushCacheProvider(workInProgress2, parentCache);
            } else {
              var nextCache = nextState.cache;
              pushCacheProvider(workInProgress2, nextCache);
              if (nextCache !== prevState.cache) {
                propagateContextChange(workInProgress2, CacheContext, renderLanes2);
              }
            }
          }
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef$1(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
            workInProgress2.flags |= RefStatic;
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$2.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function replayFunctionComponent(current2, workInProgress2, nextProps, Component, secondArg, renderLanes2) {
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var nextChildren = replaySuspendedComponentWithHooks(current2, workInProgress2, Component, nextProps, secondArg);
          var hasId = checkDidRenderIdHook();
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef$1(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags$1;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$2.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current2 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          {
            var nextCache = nextState.cache;
            pushCacheProvider(workInProgress2, nextCache);
            if (nextCache !== prevState.cache) {
              propagateContextChange(workInProgress2, CacheContext, renderLanes2);
            }
          }
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent$1(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          {
            var memoizedState = workInProgress2.memoizedState;
            if (memoizedState !== null) {
              var newState = renderTransitionAwareHostComponentWithHooks(current2, workInProgress2, renderLanes2);
              {
                HostTransitionContext._currentValue = newState;
              }
              {
                if (didReceiveUpdate) {
                  if (current2 !== null) {
                    var oldStateHook = current2.memoizedState;
                    var oldState = oldStateHook.memoizedState;
                    if (oldState !== newState) {
                      propagateContextChange(workInProgress2, HostTransitionContext, renderLanes2);
                    }
                  }
                }
              }
            }
          }
          markRef$1(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostHoistable(current2, workInProgress2, renderLanes2) {
          markRef$1(current2, workInProgress2);
          var currentProps = current2 === null ? null : current2.memoizedProps;
          var resource = workInProgress2.memoizedState = getResource(workInProgress2.type, currentProps, workInProgress2.pendingProps);
          if (current2 === null) {
            if (!getIsHydrating() && resource === null) {
              workInProgress2.stateNode = createHoistableInstance(workInProgress2.type, workInProgress2.pendingProps, getRootHostContainer(), workInProgress2);
            }
          }
          return null;
        }
        function updateHostSingleton(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            claimHydratableSingleton(workInProgress2);
          }
          var nextChildren = workInProgress2.pendingProps.children;
          if (current2 === null && !getIsHydrating()) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          markRef$1(current2, workInProgress2);
          return workInProgress2.child;
        }
        function updateHostText$1(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableTextInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      resolvedProps,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(Component)
                    );
                  }
                }
              }
              child = updateMemoComponent(
                null,
                workInProgress2,
                Component,
                resolveDefaultProps(Component.type, resolvedProps),
                // The inner type can have defaults too
                renderLanes2
              );
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$2.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (Component.defaultProps !== void 0) {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache()
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          {
            var prevCachePool = prevOffscreenState.cachePool;
            if (prevCachePool !== null) {
              var parentCache = CacheContext._currentValue;
              if (prevCachePool.parent !== parentCache) {
                cachePool = {
                  parent: parentCache,
                  pool: parentCache
                };
              } else {
                cachePool = prevCachePool;
              }
            } else {
              cachePool = getSuspendedCache();
            }
          }
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool
          };
        }
        function shouldRemainOnFallback(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          return hasSuspenseListContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags$1;
          if (didSuspend || shouldRemainOnFallback(current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          }
          if (current2 === null) {
            if (getIsHydrating()) {
              if (showFallback) {
                pushPrimaryTreeSuspenseHandler(workInProgress2);
              } else {
                pushFallbackTreeSuspenseHandler(workInProgress2);
              }
              tryToClaimNextHydratableSuspenseInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              popSuspenseHandler(workInProgress2);
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              pushFallbackTreeSuspenseHandler(workInProgress2);
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
              pushFallbackTreeSuspenseHandler(workInProgress2);
              var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment = workInProgress2.child;
              _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              workInProgress2.lanes = SomeRetryLane;
              return _fallbackFragment;
            } else {
              pushPrimaryTreeSuspenseHandler(workInProgress2);
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
              }
            }
            if (showFallback) {
              pushFallbackTreeSuspenseHandler(workInProgress2);
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              pushPrimaryTreeSuspenseHandler(workInProgress2);
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if (
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
            // already cloned. In legacy mode, the only case where this isn't true is
            // when DevTools forces us to display a fallback; we skip the first render
            // pass entirely and go straight to rendering the fallback. (In Concurrent
            // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
            // only codepath.)
            workInProgress2.child !== currentPrimaryChildFragment
          ) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
          if (!didSuspend) {
            pushPrimaryTreeSuspenseHandler(workInProgress2);
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack;
              {
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
              }
              error2.digest = digest;
              var capturedValue = createCapturedValue(error2, digest, stack);
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root2 = getWorkInProgressRoot();
              if (root2 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                  scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane);
                  throw SelectiveHydrationException;
                }
              }
              renderDidSuspendDelayIfPossible();
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              pushPrimaryTreeSuspenseHandler(workInProgress2);
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
            } else if (workInProgress2.memoizedState !== null) {
              pushFallbackTreeSuspenseHandler(workInProgress2);
              workInProgress2.child = current2.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              pushFallbackTreeSuspenseHandler(workInProgress2);
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isAnArray = isArray(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type = isAnArray ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseListContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseListContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags$1;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);
          }
          pushSuspenseListContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  tail,
                  lastContentRow,
                  tailMode
                );
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  true,
                  // isBackwards
                  _tail,
                  null,
                  // last
                  tailMode
                );
                break;
              }
              case "together": {
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  null,
                  // tail
                  null,
                  // last
                  void 0
                );
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$2.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current2];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current2);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          var updateLanes = current2.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              {
                var cache = current2.memoizedState.cache;
                pushCacheProvider(workInProgress2, cache);
              }
              resetHydrationState();
              break;
            case HostSingleton:
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushPrimaryTreeSuspenseHandler(workInProgress2);
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                } else {
                  pushPrimaryTreeSuspenseHandler(workInProgress2);
                  var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushPrimaryTreeSuspenseHandler(workInProgress2);
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags$1;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseListContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
            case CacheComponent: {
              {
                var _cache = current2.memoizedState.cache;
                pushCacheProvider(workInProgress2, _cache);
              }
              break;
            }
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork$1(current2, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
            workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
              if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
              // may not be work scheduled on `current`, so we check for this flag.
              (workInProgress2.flags & DidCapture) === NoFlags$1) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
              }
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags$1) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostHoistable: {
              return updateHostHoistable(current2, workInProgress2);
            }
            case HostSingleton: {
              return updateHostSingleton(current2, workInProgress2, renderLanes2);
            }
            case HostComponent:
              return updateHostComponent$1(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText$1(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      _resolvedProps3,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(_type2)
                    );
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
            case LegacyHiddenComponent: {
              break;
            }
            case CacheComponent: {
              {
                return updateCacheComponent(current2, workInProgress2, renderLanes2);
              }
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        var valueCursor = createCursor(null);
        var rendererCursorDEV;
        {
          rendererCursorDEV = createCursor(null);
        }
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              push(rendererCursorDEV, context._currentRenderer, providerFiber);
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          {
            if (currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
              context._currentValue = context._defaultValue;
            } else {
              context._currentValue = currentValue;
            }
            {
              var currentRenderer = rendererCursorDEV.current;
              pop(rendererCursorDEV, providerFiber);
              context._currentRenderer = currentRenderer;
            }
          }
          pop(valueCursor, providerFiber);
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            } else
              ;
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null)
                      ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          return readContextForConsumer(currentlyRenderingFiber, context);
        }
        function readContextDuringReconcilation(consumer, context, renderLanes2) {
          if (currentlyRenderingFiber === null) {
            prepareToReadContext(consumer, renderLanes2);
          }
          return readContextForConsumer(consumer, context);
        }
        function readContextForConsumer(consumer, context) {
          var value = context._currentValue;
          if (lastFullyObservedContext === context)
            ;
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null
            };
            if (lastContextDependency === null) {
              if (consumer === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              consumer.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var AbortControllerLocal = typeof AbortController !== "undefined" ? AbortController : (
          // $FlowFixMe[missing-this-annot]
          // $FlowFixMe[prop-missing]
          function AbortControllerShim() {
            var listeners = [];
            var signal = this.signal = {
              aborted: false,
              addEventListener: function(type, listener) {
                listeners.push(listener);
              }
            };
            this.abort = function() {
              signal.aborted = true;
              listeners.forEach(function(listener) {
                return listener();
              });
            };
          }
        );
        var scheduleCallback$1 = Scheduler.unstable_scheduleCallback, NormalPriority = Scheduler.unstable_NormalPriority;
        var CacheContext = {
          $$typeof: REACT_CONTEXT_TYPE,
          // We don't use Consumer/Provider for Cache components. So we'll cheat.
          Consumer: null,
          Provider: null,
          // We'll initialize these at the root.
          _currentValue: null,
          _currentValue2: null,
          _threadCount: 0,
          _defaultValue: null,
          _globalName: null
        };
        {
          CacheContext._currentRenderer = null;
          CacheContext._currentRenderer2 = null;
        }
        function createCache() {
          var cache = {
            controller: new AbortControllerLocal(),
            data: /* @__PURE__ */ new Map(),
            refCount: 0
          };
          return cache;
        }
        function retainCache(cache) {
          {
            if (cache.controller.signal.aborted) {
              warn("A cache instance was retained after it was already freed. This likely indicates a bug in React.");
            }
          }
          cache.refCount++;
        }
        function releaseCache(cache) {
          cache.refCount--;
          {
            if (cache.refCount < 0) {
              warn("A cache instance was released after it was already freed. This likely indicates a bug in React.");
            }
          }
          if (cache.refCount === 0) {
            scheduleCallback$1(NormalPriority, function() {
              cache.controller.abort();
            });
          }
        }
        function pushCacheProvider(workInProgress2, cache) {
          pushProvider(workInProgress2, CacheContext, cache);
        }
        function popCacheProvider(workInProgress2, cache) {
          popProvider(CacheContext, workInProgress2);
        }
        var ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$2.transition;
        }
        var resumedCache = createCursor(null);
        function peekCacheFromPool() {
          var cacheResumedFromPreviousRender = resumedCache.current;
          if (cacheResumedFromPreviousRender !== null) {
            return cacheResumedFromPreviousRender;
          }
          var root2 = getWorkInProgressRoot();
          var cacheFromRootCachePool = root2.pooledCache;
          return cacheFromRootCachePool;
        }
        function requestCacheFromPool(renderLanes2) {
          var cacheFromPool = peekCacheFromPool();
          if (cacheFromPool !== null) {
            return cacheFromPool;
          }
          var root2 = getWorkInProgressRoot();
          var freshCache = createCache();
          root2.pooledCache = freshCache;
          retainCache(freshCache);
          if (freshCache !== null) {
            root2.pooledCacheLanes |= renderLanes2;
          }
          return freshCache;
        }
        function pushTransition(offscreenWorkInProgress, prevCachePool, newTransitions) {
          {
            if (prevCachePool === null) {
              push(resumedCache, resumedCache.current, offscreenWorkInProgress);
            } else {
              push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);
            }
          }
        }
        function popTransition(workInProgress2, current2) {
          if (current2 !== null) {
            {
              pop(resumedCache, workInProgress2);
            }
          }
        }
        function getSuspendedCache() {
          var cacheFromPool = peekCacheFromPool();
          if (cacheFromPool === null) {
            return null;
          }
          return {
            // We must also save the parent, so that when we resume we can detect
            // a refresh.
            parent: CacheContext._currentValue,
            pool: cacheFromPool
          };
        }
        function getOffscreenDeferredCache() {
          var cacheFromPool = peekCacheFromPool();
          if (cacheFromPool === null) {
            return null;
          }
          return {
            // We must also store the parent, so that when we resume we can detect
            // a refresh.
            parent: CacheContext._currentValue,
            pool: cacheFromPool
          };
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef(workInProgress2) {
          workInProgress2.flags |= Ref | RefStatic;
        }
        function appendAllChildren(parent, workInProgress2, needsVisibilityToggle, isHidden) {
          {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal || node.tag === HostSingleton)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function updateHostComponent(current2, workInProgress2, type, newProps, renderLanes2) {
          {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            {
              markUpdate(workInProgress2);
            }
          }
        }
        function preloadInstanceAndSuspendIfNeeded(workInProgress2, type, props, renderLanes2) {
          {
            workInProgress2.flags &= ~MaySuspendCommit;
            return;
          }
        }
        function preloadResourceAndSuspendIfNeeded(workInProgress2, resource, type, props, renderLanes2) {
          if (!mayResourceSuspendCommit(resource)) {
            workInProgress2.flags &= ~MaySuspendCommit;
            return;
          }
          workInProgress2.flags |= MaySuspendCommit;
          var rootRenderLanes = getWorkInProgressRootRenderLanes();
          if (!includesOnlyNonUrgentLanes(rootRenderLanes))
            ;
          else {
            var isReady = preloadResource(resource);
            if (!isReady) {
              if (shouldRemainOnPreviousScreen()) {
                workInProgress2.flags |= ShouldSuspendCommit;
              } else {
                suspendCommit();
              }
            }
          }
        }
        function scheduleRetryEffect(workInProgress2, retryQueue) {
          var wakeables = retryQueue;
          if (wakeables !== null) {
            workInProgress2.flags |= Update;
          } else {
            if (workInProgress2.flags & ScheduleRetry) {
              var retryLane = (
                // TODO: This check should probably be moved into claimNextRetryLane
                // I also suspect that we need some further consolidation of offscreen
                // and retry lanes.
                workInProgress2.tag !== OffscreenComponent ? claimNextRetryLane() : OffscreenLane
              );
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, retryLane);
            }
          }
        }
        function updateHostText(current2, workInProgress2, oldText, newText) {
          {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          }
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags$1;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
          if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags$1) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |= ForceClientRender | DidCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current2 === null) {
              if (!wasHydrated) {
                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags$1) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              {
                var previousCache = null;
                if (current2 !== null) {
                  previousCache = current2.memoizedState.cache;
                }
                var cache = workInProgress2.memoizedState.cache;
                if (cache !== previousCache) {
                  workInProgress2.flags |= Passive$1;
                }
                popCacheProvider(workInProgress2);
              }
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current2 !== null) {
                    var prevState = current2.memoizedState;
                    if (
                      // Check if this is a client root
                      !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                      (workInProgress2.flags & ForceClientRender) !== NoFlags$1
                    ) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostHoistable: {
              {
                var nextResource = workInProgress2.memoizedState;
                if (current2 === null) {
                  markUpdate(workInProgress2);
                  if (workInProgress2.ref !== null) {
                    markRef(workInProgress2);
                  }
                  if (nextResource !== null) {
                    bubbleProperties(workInProgress2);
                    preloadResourceAndSuspendIfNeeded(workInProgress2, nextResource);
                    return null;
                  } else {
                    bubbleProperties(workInProgress2);
                    preloadInstanceAndSuspendIfNeeded(workInProgress2);
                    return null;
                  }
                } else {
                  var currentResource = current2.memoizedState;
                  if (nextResource !== currentResource) {
                    markUpdate(workInProgress2);
                  }
                  if (current2.ref !== workInProgress2.ref) {
                    markRef(workInProgress2);
                  }
                  if (nextResource !== null) {
                    bubbleProperties(workInProgress2);
                    if (nextResource === currentResource) {
                      workInProgress2.flags &= ~MaySuspendCommit;
                    } else {
                      preloadResourceAndSuspendIfNeeded(workInProgress2, nextResource);
                    }
                    return null;
                  } else {
                    {
                      var oldProps = current2.memoizedProps;
                      if (oldProps !== newProps) {
                        markUpdate(workInProgress2);
                      }
                    }
                    bubbleProperties(workInProgress2);
                    preloadInstanceAndSuspendIfNeeded(workInProgress2);
                    return null;
                  }
                }
              }
            }
            case HostSingleton: {
              {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var _type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  {
                    var _oldProps2 = current2.memoizedProps;
                    if (_oldProps2 !== newProps) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (current2.ref !== workInProgress2.ref) {
                    markRef(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  var instance;
                  if (_wasHydrated) {
                    prepareToHydrateHostInstance(workInProgress2, currentHostContext);
                    instance = workInProgress2.stateNode;
                  } else {
                    instance = resolveSingletonInstance(_type, newProps, rootContainerInstance, currentHostContext, true);
                    workInProgress2.stateNode = instance;
                    markUpdate(workInProgress2);
                  }
                  if (workInProgress2.ref !== null) {
                    markRef(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var _type2 = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent(current2, workInProgress2, _type2, newProps);
                if (current2.ref !== workInProgress2.ref) {
                  markRef(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var _currentHostContext2 = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostInstance(workInProgress2, _currentHostContext2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var _rootContainerInstance = getRootHostContainer();
                  var _instance3 = createInstance(_type2, newProps, _rootContainerInstance, _currentHostContext2, workInProgress2);
                  appendAllChildren(_instance3, workInProgress2);
                  workInProgress2.stateNode = _instance3;
                  if (finalizeInitialChildren(_instance3, _type2, newProps)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              preloadInstanceAndSuspendIfNeeded(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance2 = getRootHostContainer();
                var _currentHostContext3 = getHostContext();
                var _wasHydrated3 = popHydrationState(workInProgress2);
                if (_wasHydrated3) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance2, _currentHostContext3, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseHandler(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ForceClientRender) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags$1) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
              if (nextDidTimeout) {
                var offscreenFiber = workInProgress2.child;
                var _previousCache = null;
                if (offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null && offscreenFiber.alternate.memoizedState.cachePool !== null) {
                  _previousCache = offscreenFiber.alternate.memoizedState.cachePool.pool;
                }
                var _cache = null;
                if (offscreenFiber.memoizedState !== null && offscreenFiber.memoizedState.cachePool !== null) {
                  _cache = offscreenFiber.memoizedState.cachePool.pool;
                }
                if (_cache !== _previousCache) {
                  offscreenFiber.flags |= Passive$1;
                }
              }
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                }
              }
              var retryQueue = workInProgress2.updateQueue;
              scheduleRetryEffect(workInProgress2, retryQueue);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseListContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags$1;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags$1);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var _retryQueue = suspended.updateQueue;
                        workInProgress2.updateQueue = _retryQueue;
                        scheduleRetryEffect(workInProgress2, _retryQueue);
                        workInProgress2.subtreeFlags = NoFlags$1;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseListContext(workInProgress2, setShallowSuspenseListContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now$1() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _retryQueue2 = _suspended.updateQueue;
                    workInProgress2.updateQueue = _retryQueue2;
                    scheduleRetryEffect(workInProgress2, _retryQueue2);
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (
                    // The time it took to render last row is greater than the remaining
                    // time we have to render. So rendering one more row would likely
                    // exceed it.
                    now$1() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                  ) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now$1();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseListContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);
                }
                pushSuspenseListContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popSuspenseHandler(workInProgress2);
              popHiddenContext(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              {
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                } else {
                  if (nextIsHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(renderLanes2, OffscreenLane) && // Also don't bubble if the tree suspended
                (workInProgress2.flags & DidCapture) === NoLanes) {
                  bubbleProperties(workInProgress2);
                  if (workInProgress2.subtreeFlags & (Placement | Update)) {
                    workInProgress2.flags |= Visibility;
                  }
                }
              }
              var offscreenQueue = workInProgress2.updateQueue;
              if (offscreenQueue !== null) {
                var _retryQueue3 = offscreenQueue.retryQueue;
                scheduleRetryEffect(workInProgress2, _retryQueue3);
              }
              {
                var _previousCache2 = null;
                if (current2 !== null && current2.memoizedState !== null && current2.memoizedState.cachePool !== null) {
                  _previousCache2 = current2.memoizedState.cachePool.pool;
                }
                var _cache2 = null;
                if (workInProgress2.memoizedState !== null && workInProgress2.memoizedState.cachePool !== null) {
                  _cache2 = workInProgress2.memoizedState.cachePool.pool;
                }
                if (_cache2 !== _previousCache2) {
                  workInProgress2.flags |= Passive$1;
                }
              }
              popTransition(workInProgress2, current2);
              return null;
            }
            case CacheComponent: {
              {
                var _previousCache3 = null;
                if (current2 !== null) {
                  _previousCache3 = current2.memoizedState.cache;
                }
                var _cache3 = workInProgress2.memoizedState.cache;
                if (_cache3 !== _previousCache3) {
                  workInProgress2.flags |= Passive$1;
                }
                popCacheProvider(workInProgress2);
                bubbleProperties(workInProgress2);
              }
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current2, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              {
                popCacheProvider(workInProgress2);
              }
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags$1 && (_flags & DidCapture) === NoFlags$1) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostHoistable:
            case HostSingleton:
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseHandler(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseListContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popSuspenseHandler(workInProgress2);
              popHiddenContext(workInProgress2);
              popTransition(workInProgress2, current2);
              var _flags3 = workInProgress2.flags;
              if (_flags3 & ShouldCapture) {
                workInProgress2.flags = _flags3 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case CacheComponent:
              {
                popCacheProvider(workInProgress2);
              }
              return null;
            case TracingMarkerComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              {
                popCacheProvider(interruptedWork);
              }
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              break;
            }
            case HostHoistable:
            case HostSingleton:
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseHandler(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseListContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popSuspenseHandler(interruptedWork);
              popHiddenContext(interruptedWork);
              popTransition(interruptedWork, current2);
              break;
            case CacheComponent:
              {
                popCacheProvider(interruptedWork);
              }
              break;
          }
        }
        var fakeNode = null;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && // $FlowFixMe[method-unbinding]
          typeof document.createEvent === "function") {
            fakeNode = document.createElement("react");
          }
        }
        function invokeGuardedCallbackImpl(name, func, context) {
          {
            if (fakeNode) {
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              var restoreAfterDispatch = function() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              };
              var _funcArgs = Array.prototype.slice.call(arguments, 3);
              var callCallback2 = function() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, _funcArgs);
                didError = false;
              };
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              var handleWindowError = function(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              };
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (didCall) {
                return;
              } else {
                restoreAfterDispatch();
              }
            }
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error3) {
              this.onError(error3);
            }
          }
        }
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function shouldProfile(current2) {
          return (current2.mode & ProfileMode) !== NoMode && (getExecutionContext() & CommitContext) !== NoContext;
        }
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function() {
              throw error2;
            });
            clearCaughtError();
          }
        }
        function callComponentWillUnmountWithTimer(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          if (shouldProfile(current2)) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current2);
            }
          } else {
            instance.componentWillUnmount();
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current2, instance);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            commitAttachRef(current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref;
          var refCleanup = current2.refCleanup;
          if (ref !== null) {
            if (typeof refCleanup === "function") {
              try {
                if (shouldProfile(current2)) {
                  try {
                    startLayoutEffectTimer();
                    refCleanup();
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  refCleanup();
                }
              } catch (error2) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error2);
              } finally {
                current2.refCleanup = null;
                var finishedWork = current2.alternate;
                if (finishedWork != null) {
                  finishedWork.refCleanup = null;
                }
              }
            } else if (typeof ref === "function") {
              var retVal;
              try {
                if (shouldProfile(current2)) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error2) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error2);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root2, firstChild) {
          prepareForCommit();
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags$1 && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags$1) {
            setCurrentFiber(finishedWork);
          }
          switch (finishedWork.tag) {
            case FunctionComponent: {
              {
                if ((flags & Update) !== NoFlags$1) {
                  commitUseEffectEventMount(finishedWork);
                }
              }
              break;
            }
            case ForwardRef:
            case SimpleMemoComponent: {
              break;
            }
            case ClassComponent: {
              if ((flags & Snapshot) !== NoFlags$1) {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
              }
              break;
            }
            case HostRoot: {
              if ((flags & Snapshot) !== NoFlags$1) {
                {
                  var root2 = finishedWork.stateNode;
                  clearContainer(root2.containerInfo);
                }
              }
              break;
            }
            case HostComponent:
            case HostHoistable:
            case HostSingleton:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              break;
            default: {
              if ((flags & Snapshot) !== NoFlags$1) {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if ((flags & Snapshot) !== NoFlags$1) {
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                var inst = effect.inst;
                var destroy = inst.destroy;
                if (destroy !== void 0) {
                  inst.destroy = void 0;
                  {
                    if ((flags & Passive) !== NoFlags) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                  {
                    if ((flags & Insertion) !== NoFlags) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive) !== NoFlags) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                {
                  if ((flags & Passive) !== NoFlags) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create = effect.create;
                {
                  if ((flags & Insertion) !== NoFlags) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                var inst = effect.inst;
                var destroy = create();
                inst.destroy = destroy;
                {
                  if ((flags & Insertion) !== NoFlags) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive) !== NoFlags) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect.tag & Layout) !== NoFlags$1) {
                      hookName = "useLayoutEffect";
                    } else if ((effect.tag & Insertion) !== NoFlags$1) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitUseEffectEventMount(finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var eventPayloads = updateQueue !== null ? updateQueue.events : null;
          if (eventPayloads !== null) {
            for (var ii = 0; ii < eventPayloads.length; ii++) {
              var _eventPayloads$ii = eventPayloads[ii], ref = _eventPayloads$ii.ref, nextImpl = _eventPayloads$ii.nextImpl;
              ref.impl = nextImpl;
            }
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          if (getExecutionContext() & CommitContext) {
            if ((finishedWork.flags & Update) !== NoFlags$1) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  break;
                }
              }
            }
          }
        }
        function commitHookLayoutEffects(finishedWork, hookFlags) {
          if (shouldProfile(finishedWork)) {
            try {
              startLayoutEffectTimer();
              commitHookEffectListMount(hookFlags, finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            recordLayoutEffectDuration(finishedWork);
          } else {
            try {
              commitHookEffectListMount(hookFlags, finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
          }
        }
        function commitClassLayoutLifecycles(finishedWork, current2) {
          var instance = finishedWork.stateNode;
          if (current2 === null) {
            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                }
                if (instance.state !== finishedWork.memoizedState) {
                  error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                }
              }
            }
            if (shouldProfile(finishedWork)) {
              try {
                startLayoutEffectTimer();
                instance.componentDidMount();
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              recordLayoutEffectDuration(finishedWork);
            } else {
              try {
                instance.componentDidMount();
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
          } else {
            var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
            var prevState = current2.memoizedState;
            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                }
                if (instance.state !== finishedWork.memoizedState) {
                  error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                }
              }
            }
            if (shouldProfile(finishedWork)) {
              try {
                startLayoutEffectTimer();
                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              recordLayoutEffectDuration(finishedWork);
            } else {
              try {
                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
          }
        }
        function commitClassCallbacks(finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          if (updateQueue !== null) {
            var instance = finishedWork.stateNode;
            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                }
                if (instance.state !== finishedWork.memoizedState) {
                  error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                }
              }
            }
            try {
              commitCallbacks(updateQueue, instance);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
          }
        }
        function commitHostComponentMount(finishedWork) {
          var type = finishedWork.type;
          var props = finishedWork.memoizedProps;
          var instance = finishedWork.stateNode;
          try {
            commitMount(instance, type, props, finishedWork);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
        }
        function commitProfilerUpdate(finishedWork, current2) {
          if (getExecutionContext() & CommitContext) {
            try {
              var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
              var effectDuration = finishedWork.stateNode.effectDuration;
              var commitTime2 = getCommitTime();
              var phase = current2 === null ? "mount" : "update";
              if (enableProfilerNestedUpdatePhase) {
                if (isCurrentUpdateNested()) {
                  phase = "nested-update";
                }
              }
              if (typeof onRender === "function") {
                onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
              }
              if (enableProfilerCommitHooks) {
                if (typeof onCommit === "function") {
                  onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                }
                enqueuePendingPassiveProfilerEffect(finishedWork);
                var parentFiber = finishedWork.return;
                outer:
                  while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root2 = parentFiber.stateNode;
                        root2.effectDuration += effectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.effectDuration += effectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
              }
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              if (flags & Update) {
                commitHookLayoutEffects(finishedWork, Layout | HasEffect);
              }
              break;
            }
            case ClassComponent: {
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              if (flags & Update) {
                commitClassLayoutLifecycles(finishedWork, current2);
              }
              if (flags & Callback) {
                commitClassCallbacks(finishedWork);
              }
              if (flags & Ref) {
                safelyAttachRef(finishedWork, finishedWork.return);
              }
              break;
            }
            case HostRoot: {
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              if (flags & Callback) {
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  var instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostSingleton:
                      case HostComponent:
                        instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  try {
                    commitCallbacks(updateQueue, instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              break;
            }
            case HostHoistable: {
              {
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                if (flags & Ref) {
                  safelyAttachRef(finishedWork, finishedWork.return);
                }
                break;
              }
            }
            case HostSingleton:
            case HostComponent: {
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              if (current2 === null && flags & Update) {
                commitHostComponentMount(finishedWork);
              }
              if (flags & Ref) {
                safelyAttachRef(finishedWork, finishedWork.return);
              }
              break;
            }
            case Profiler: {
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              if (flags & Update) {
                commitProfilerUpdate(finishedWork, current2);
              }
              break;
            }
            case SuspenseComponent: {
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              if (flags & Update) {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              }
              break;
            }
            case OffscreenComponent: {
              var isModernRoot = (finishedWork.mode & ConcurrentMode) !== NoMode;
              if (isModernRoot) {
                var isHidden = finishedWork.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden)
                  ;
                else {
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    var includeWorkInProgressEffects = (finishedWork.subtreeFlags & LayoutMask) !== NoFlags$1;
                    recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                  } else {
                    recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                  }
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                }
              } else {
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              }
              if (flags & Ref) {
                var props = finishedWork.memoizedProps;
                if (props.mode === "manual") {
                  safelyAttachRef(finishedWork, finishedWork.return);
                } else {
                  safelyDetachRef(finishedWork, finishedWork.return);
                }
              }
              break;
            }
            default: {
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          var hostSubtreeRoot = null;
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostHoistable || node.tag === HostSingleton) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance);
                    } else {
                      unhideTextInstance(_instance, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostHoistable:
              case HostSingleton:
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              if (shouldProfile(finishedWork)) {
                try {
                  startLayoutEffectTimer();
                  finishedWork.refCleanup = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                finishedWork.refCleanup = ref(instanceToUse);
              }
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          fiber.child = null;
          fiber.deletions = null;
          fiber.sibling = null;
          if (fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            if (hostInstance !== null) {
              detachDeletedInstance(hostInstance);
            }
          }
          fiber.stateNode = null;
          {
            fiber._debugOwner = null;
          }
          fiber.return = null;
          fiber.dependencies = null;
          fiber.memoizedProps = null;
          fiber.memoizedState = null;
          fiber.pendingProps = null;
          fiber.stateNode = null;
          fiber.updateQueue = null;
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostHoistable || fiber.tag === HostSingleton || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== HostSingleton && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          {
            if (finishedWork.tag === HostSingleton) {
              return;
            }
          }
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostSingleton: {
              {
                var parent = parentFiber.stateNode;
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
            }
            case HostComponent: {
              var _parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(_parent);
                parentFiber.flags &= ~ContentReset;
              }
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, _before, _parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent2 = parentFiber.stateNode.containerInfo;
              var _before2 = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before2, _parent2);
              break;
            }
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal || tag === HostSingleton)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal || tag === HostSingleton)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root2, returnFiber, deletedFiber) {
          {
            var parent = returnFiber;
            findParent:
              while (parent !== null) {
                switch (parent.tag) {
                  case HostSingleton:
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostHoistable: {
              {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                if (deletedFiber.memoizedState) {
                  releaseResource(deletedFiber.memoizedState);
                } else if (deletedFiber.stateNode) {
                  unmountHoistable(deletedFiber.stateNode);
                }
                return;
              }
            }
            case HostSingleton: {
              {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                releaseSingletonInstance(deletedFiber.stateNode);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                return;
              }
            }
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            case HostText: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent2 = hostParent;
                var _prevHostParentIsContainer2 = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent2;
                hostParentIsContainer = _prevHostParentIsContainer2;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var tag = effect.tag;
                      var inst = effect.inst;
                      var destroy = inst.destroy;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags) {
                          inst.destroy = void 0;
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout) !== NoFlags) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (shouldProfile(deletedFiber)) {
                            startLayoutEffectTimer();
                            inst.destroy = void 0;
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            inst.destroy = void 0;
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
              if (deletedFiber.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  try {
                    commitHydratedSuspenseInstance(suspenseInstance);
                    var hydrationCallbacks, onHydrated;
                    if (enableSuspenseCallback)
                      ;
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
            }
          }
        }
        function getRetryCache(finishedWork) {
          switch (finishedWork.tag) {
            case SuspenseComponent:
            case SuspenseListComponent: {
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              return retryCache;
            }
            case OffscreenComponent: {
              var instance = finishedWork.stateNode;
              var _retryCache = instance._retryCache;
              if (_retryCache === null) {
                _retryCache = instance._retryCache = new PossiblyWeakSet();
              }
              return _retryCache;
            }
            default: {
              throw new Error("Unexpected Suspense handler tag (" + finishedWork.tag + "). This is a bug in React.");
            }
          }
        }
        function detachOffscreenInstance(instance) {
          var fiber = instance._current;
          if (fiber === null) {
            throw new Error("Calling Offscreen.detach before instance handle has been set.");
          }
          if ((instance._pendingVisibility & OffscreenDetached) !== NoFlags$1) {
            return;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            instance._pendingVisibility |= OffscreenDetached;
            scheduleUpdateOnFiber(root2, fiber, SyncLane);
          }
        }
        function attachOffscreenInstance(instance) {
          var fiber = instance._current;
          if (fiber === null) {
            throw new Error("Calling Offscreen.detach before instance handle has been set.");
          }
          if ((instance._pendingVisibility & OffscreenDetached) === NoFlags$1) {
            return;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            instance._pendingVisibility &= ~OffscreenDetached;
            scheduleUpdateOnFiber(root2, fiber, SyncLane);
          }
        }
        function attachSuspenseRetryListeners(finishedWork, wakeables) {
          var retryCache = getRetryCache(finishedWork);
          wakeables.forEach(function(wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
              retryCache.add(wakeable);
              {
                if (isDevToolsPresent) {
                  if (inProgressLanes !== null && inProgressRoot !== null) {
                    restorePendingUpdaters(inProgressRoot, inProgressLanes);
                  } else {
                    throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                  }
                }
              }
              wakeable.then(retry, retry);
            }
          });
        }
        function commitMutationEffects(root2, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root2);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              try {
                commitDeletionEffects(root2, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root2);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        var currentHoistableRoot = null;
        function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                if (shouldProfile(finishedWork)) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              if (flags & Callback && offscreenSubtreeIsHidden) {
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  deferHiddenCallbacks(updateQueue);
                }
              }
              return;
            }
            case HostHoistable: {
              {
                var hoistableRoot = currentHoistableRoot;
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                if (flags & Update) {
                  var currentResource = current2 !== null ? current2.memoizedState : null;
                  var newResource = finishedWork.memoizedState;
                  if (current2 === null) {
                    if (newResource === null) {
                      if (finishedWork.stateNode === null) {
                        finishedWork.stateNode = hydrateHoistable(hoistableRoot, finishedWork.type, finishedWork.memoizedProps, finishedWork);
                      } else {
                        mountHoistable(hoistableRoot, finishedWork.type, finishedWork.stateNode);
                      }
                    } else {
                      finishedWork.stateNode = acquireResource(hoistableRoot, newResource, finishedWork.memoizedProps);
                    }
                  } else if (currentResource !== newResource) {
                    if (currentResource === null) {
                      if (current2.stateNode !== null) {
                        unmountHoistable(current2.stateNode);
                      }
                    } else {
                      releaseResource(currentResource);
                    }
                    if (newResource === null) {
                      mountHoistable(hoistableRoot, finishedWork.type, finishedWork.stateNode);
                    } else {
                      acquireResource(hoistableRoot, newResource, finishedWork.memoizedProps);
                    }
                  } else if (newResource === null && finishedWork.stateNode !== null) {
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null || diffInCommitPhase) {
                      try {
                        commitUpdate(finishedWork.stateNode, updatePayload, finishedWork.type, current2.memoizedProps, finishedWork.memoizedProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
                return;
              }
            }
            case HostSingleton: {
              {
                if (flags & Update) {
                  var previousWork = finishedWork.alternate;
                  if (previousWork === null) {
                    var singleton = finishedWork.stateNode;
                    var props = finishedWork.memoizedProps;
                    clearSingleton(singleton);
                    acquireSingletonInstance(finishedWork.type, props, singleton, finishedWork);
                  }
                }
              }
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
                if (flags & Update) {
                  var _instance2 = finishedWork.stateNode;
                  if (_instance2 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                    var type = finishedWork.type;
                    var _updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (_updatePayload !== null || diffInCommitPhase) {
                      try {
                        commitUpdate(_instance2, _updatePayload, type, oldProps, newProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current2 !== null ? current2.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              {
                prepareToCommitHoistables();
                var previousHoistableRoot = currentHoistableRoot;
                currentHoistableRoot = getHoistableRoot(root2.containerInfo);
                recursivelyTraverseMutationEffects(root2, finishedWork);
                currentHoistableRoot = previousHoistableRoot;
                commitReconciliationEffects(finishedWork);
              }
              if (flags & Update) {
                {
                  if (current2 !== null) {
                    var prevRootState = current2.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root2.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _previousHoistableRoot = currentHoistableRoot;
                currentHoistableRoot = getHoistableRoot(finishedWork.stateNode.containerInfo);
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                currentHoistableRoot = _previousHoistableRoot;
              }
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var isShowingFallback = finishedWork.memoizedState !== null;
                var wasShowingFallback = current2 !== null && current2.memoizedState !== null;
                {
                  if (isShowingFallback !== wasShowingFallback) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                var retryQueue = finishedWork.updateQueue;
                if (retryQueue !== null) {
                  finishedWork.updateQueue = null;
                  attachSuspenseRetryListeners(finishedWork, retryQueue);
                }
              }
              return;
            }
            case OffscreenComponent: {
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              var newState = finishedWork.memoizedState;
              var isHidden = newState !== null;
              var wasHidden = current2 !== null && current2.memoizedState !== null;
              if (finishedWork.mode & ConcurrentMode) {
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || isHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;
                recursivelyTraverseMutationEffects(root2, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
              } else {
                recursivelyTraverseMutationEffects(root2, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              var offscreenInstance = finishedWork.stateNode;
              offscreenInstance._current = finishedWork;
              offscreenInstance._visibility &= ~OffscreenDetached;
              offscreenInstance._visibility |= offscreenInstance._pendingVisibility & OffscreenDetached;
              if (flags & Visibility) {
                if (isHidden) {
                  offscreenInstance._visibility &= ~OffscreenVisible;
                } else {
                  offscreenInstance._visibility |= OffscreenVisible;
                }
                if (isHidden) {
                  var isUpdate = current2 !== null;
                  var wasHiddenByAncestorOffscreen = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden;
                  if (isUpdate && !wasHidden && !wasHiddenByAncestorOffscreen) {
                    if ((finishedWork.mode & ConcurrentMode) !== NoMode) {
                      recursivelyTraverseDisappearLayoutEffects(finishedWork);
                    }
                  }
                }
                if (!isOffscreenManual(finishedWork)) {
                  hideOrUnhideAllChildren(finishedWork, isHidden);
                }
              }
              if (flags & Update) {
                var offscreenQueue = finishedWork.updateQueue;
                if (offscreenQueue !== null) {
                  var _retryQueue = offscreenQueue.retryQueue;
                  if (_retryQueue !== null) {
                    offscreenQueue.retryQueue = null;
                    attachSuspenseRetryListeners(finishedWork, _retryQueue);
                  }
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                var _retryQueue2 = finishedWork.updateQueue;
                if (_retryQueue2 !== null) {
                  finishedWork.updateQueue = null;
                  attachSuspenseRetryListeners(finishedWork, _retryQueue2);
                }
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root2, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          var current2 = finishedWork.alternate;
          commitLayoutEffectOnFiber(root2, current2, finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseLayoutEffects(root2, parentFiber, lanes) {
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & LayoutMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              var current2 = child.alternate;
              commitLayoutEffectOnFiber(root2, current2, child);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function disappearLayoutEffects(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (shouldProfile(finishedWork)) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListUnmount(Layout, finishedWork, finishedWork.return);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListUnmount(Layout, finishedWork, finishedWork.return);
              }
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            }
            case ClassComponent: {
              safelyDetachRef(finishedWork, finishedWork.return);
              var instance = finishedWork.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(finishedWork, finishedWork.return, instance);
              }
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            }
            case HostHoistable:
            case HostSingleton:
            case HostComponent: {
              safelyDetachRef(finishedWork, finishedWork.return);
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            }
            case OffscreenComponent: {
              safelyDetachRef(finishedWork, finishedWork.return);
              var isHidden = finishedWork.memoizedState !== null;
              if (isHidden)
                ;
              else {
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
              }
              break;
            }
            default: {
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            }
          }
        }
        function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
          var child = parentFiber.child;
          while (child !== null) {
            disappearLayoutEffects(child);
            child = child.sibling;
          }
        }
        function reappearLayoutEffects(finishedRoot, current2, finishedWork, includeWorkInProgressEffects) {
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
              commitHookLayoutEffects(finishedWork, Layout);
              break;
            }
            case ClassComponent: {
              recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
              var instance = finishedWork.stateNode;
              if (typeof instance.componentDidMount === "function") {
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                commitHiddenCallbacks(updateQueue, instance);
              }
              if (includeWorkInProgressEffects && flags & Callback) {
                commitClassCallbacks(finishedWork);
              }
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            }
            case HostHoistable:
            case HostSingleton:
            case HostComponent: {
              recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
              if (includeWorkInProgressEffects && current2 === null && flags & Update) {
                commitHostComponentMount(finishedWork);
              }
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            }
            case Profiler: {
              recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
              if (includeWorkInProgressEffects && flags & Update) {
                commitProfilerUpdate(finishedWork, current2);
              }
              break;
            }
            case SuspenseComponent: {
              recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
              if (includeWorkInProgressEffects && flags & Update) {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              }
              break;
            }
            case OffscreenComponent: {
              var offscreenState = finishedWork.memoizedState;
              var isHidden = offscreenState !== null;
              if (isHidden)
                ;
              else {
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
              }
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            }
            default: {
              recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
              break;
            }
          }
        }
        function recursivelyTraverseReappearLayoutEffects(finishedRoot, parentFiber, includeWorkInProgressEffects) {
          var childShouldIncludeWorkInProgressEffects = includeWorkInProgressEffects && (parentFiber.subtreeFlags & LayoutMask) !== NoFlags$1;
          var prevDebugFiber = getCurrentFiber();
          var child = parentFiber.child;
          while (child !== null) {
            var current2 = child.alternate;
            reappearLayoutEffects(finishedRoot, current2, child, childShouldIncludeWorkInProgressEffects);
            child = child.sibling;
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitHookPassiveMountEffects(finishedWork, hookFlags) {
          if (shouldProfile(finishedWork)) {
            startPassiveEffectTimer();
            try {
              commitHookEffectListMount(hookFlags, finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            recordPassiveEffectDuration(finishedWork);
          } else {
            try {
              commitHookEffectListMount(hookFlags, finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
          }
        }
        function commitOffscreenPassiveMountEffects(current2, finishedWork, instance) {
          {
            var previousCache = null;
            if (current2 !== null && current2.memoizedState !== null && current2.memoizedState.cachePool !== null) {
              previousCache = current2.memoizedState.cachePool.pool;
            }
            var nextCache = null;
            if (finishedWork.memoizedState !== null && finishedWork.memoizedState.cachePool !== null) {
              nextCache = finishedWork.memoizedState.cachePool.pool;
            }
            if (nextCache !== previousCache) {
              if (nextCache != null) {
                retainCache(nextCache);
              }
              if (previousCache != null) {
                releaseCache(previousCache);
              }
            }
          }
        }
        function commitCachePassiveMountEffect(current2, finishedWork) {
          {
            var previousCache = null;
            if (finishedWork.alternate !== null) {
              previousCache = finishedWork.alternate.memoizedState.cache;
            }
            var nextCache = finishedWork.memoizedState.cache;
            if (nextCache !== previousCache) {
              retainCache(nextCache);
              if (previousCache != null) {
                releaseCache(previousCache);
              }
            }
          }
        }
        function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
          setCurrentFiber(finishedWork);
          commitPassiveMountOnFiber(root2, finishedWork, committedLanes, committedTransitions);
          resetCurrentFiber();
        }
        function recursivelyTraversePassiveMountEffects(root2, parentFiber, committedLanes, committedTransitions) {
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & PassiveMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitPassiveMountOnFiber(root2, child, committedLanes, committedTransitions);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
              if (flags & Passive$1) {
                commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);
              }
              break;
            }
            case HostRoot: {
              recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
              if (flags & Passive$1) {
                {
                  var previousCache = null;
                  if (finishedWork.alternate !== null) {
                    previousCache = finishedWork.alternate.memoizedState.cache;
                  }
                  var nextCache = finishedWork.memoizedState.cache;
                  if (nextCache !== previousCache) {
                    retainCache(nextCache);
                    if (previousCache != null) {
                      releaseCache(previousCache);
                    }
                  }
                }
              }
              break;
            }
            case LegacyHiddenComponent: {
              break;
            }
            case OffscreenComponent: {
              var _instance3 = finishedWork.stateNode;
              var nextState = finishedWork.memoizedState;
              var isHidden = nextState !== null;
              if (isHidden) {
                if (_instance3._visibility & OffscreenPassiveEffectsConnected) {
                  recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
                } else {
                  if (finishedWork.mode & ConcurrentMode) {
                    {
                      recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                    }
                  } else {
                    _instance3._visibility |= OffscreenPassiveEffectsConnected;
                    recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
                  }
                }
              } else {
                if (_instance3._visibility & OffscreenPassiveEffectsConnected) {
                  recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
                } else {
                  _instance3._visibility |= OffscreenPassiveEffectsConnected;
                  var includeWorkInProgressEffects = (finishedWork.subtreeFlags & PassiveMask) !== NoFlags$1;
                  recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
                }
              }
              if (flags & Passive$1) {
                var _current = finishedWork.alternate;
                commitOffscreenPassiveMountEffects(_current, finishedWork);
              }
              break;
            }
            case CacheComponent: {
              recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
              if (flags & Passive$1) {
                var _current2 = finishedWork.alternate;
                commitCachePassiveMountEffect(_current2, finishedWork);
              }
              break;
            }
            case TracingMarkerComponent:
            default: {
              recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
              break;
            }
          }
        }
        function recursivelyTraverseReconnectPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions, includeWorkInProgressEffects) {
          var childShouldIncludeWorkInProgressEffects = includeWorkInProgressEffects && (parentFiber.subtreeFlags & PassiveMask) !== NoFlags$1;
          var prevDebugFiber = getCurrentFiber();
          var child = parentFiber.child;
          while (child !== null) {
            reconnectPassiveEffects(finishedRoot, child, committedLanes, committedTransitions, childShouldIncludeWorkInProgressEffects);
            child = child.sibling;
          }
          setCurrentFiber(prevDebugFiber);
        }
        function reconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) {
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
              commitHookPassiveMountEffects(finishedWork, Passive);
              break;
            }
            case LegacyHiddenComponent: {
              break;
            }
            case OffscreenComponent: {
              var _instance4 = finishedWork.stateNode;
              var nextState = finishedWork.memoizedState;
              var isHidden = nextState !== null;
              if (isHidden) {
                if (_instance4._visibility & OffscreenPassiveEffectsConnected) {
                  recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
                } else {
                  if (finishedWork.mode & ConcurrentMode) {
                    {
                      recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                    }
                  } else {
                    _instance4._visibility |= OffscreenPassiveEffectsConnected;
                    recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
                  }
                }
              } else {
                _instance4._visibility |= OffscreenPassiveEffectsConnected;
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
              }
              if (includeWorkInProgressEffects && flags & Passive$1) {
                var _current3 = finishedWork.alternate;
                commitOffscreenPassiveMountEffects(_current3, finishedWork);
              }
              break;
            }
            case CacheComponent: {
              recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
              if (includeWorkInProgressEffects && flags & Passive$1) {
                var _current4 = finishedWork.alternate;
                commitCachePassiveMountEffect(_current4, finishedWork);
              }
              break;
            }
            case TracingMarkerComponent:
            default: {
              recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
              break;
            }
          }
        }
        function recursivelyTraverseAtomicPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions) {
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & PassiveMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitAtomicPassiveEffects(finishedRoot, child);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitAtomicPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case OffscreenComponent: {
              recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
              if (flags & Passive$1) {
                var current2 = finishedWork.alternate;
                commitOffscreenPassiveMountEffects(current2, finishedWork);
              }
              break;
            }
            case CacheComponent: {
              recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
              if (flags & Passive$1) {
                var _current5 = finishedWork.alternate;
                commitCachePassiveMountEffect(_current5, finishedWork);
              }
              break;
            }
            default: {
              recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(finishedWork) {
          setCurrentFiber(finishedWork);
          commitPassiveUnmountOnFiber(finishedWork);
          resetCurrentFiber();
        }
        var suspenseyCommitFlag = ShouldSuspendCommit;
        function accumulateSuspenseyCommit(finishedWork) {
          accumulateSuspenseyCommitOnFiber(finishedWork);
        }
        function recursivelyAccumulateSuspenseyCommit(parentFiber) {
          if (parentFiber.subtreeFlags & suspenseyCommitFlag) {
            var child = parentFiber.child;
            while (child !== null) {
              accumulateSuspenseyCommitOnFiber(child);
              child = child.sibling;
            }
          }
        }
        function accumulateSuspenseyCommitOnFiber(fiber) {
          switch (fiber.tag) {
            case HostHoistable: {
              recursivelyAccumulateSuspenseyCommit(fiber);
              if (fiber.flags & suspenseyCommitFlag) {
                if (fiber.memoizedState !== null) {
                  suspendResource(
                    // This should always be set by visiting HostRoot first
                    currentHoistableRoot,
                    fiber.memoizedState,
                    fiber.memoizedProps
                  );
                }
              }
              break;
            }
            case HostComponent: {
              recursivelyAccumulateSuspenseyCommit(fiber);
              break;
            }
            case HostRoot:
            case HostPortal: {
              {
                var previousHoistableRoot = currentHoistableRoot;
                var container = fiber.stateNode.containerInfo;
                currentHoistableRoot = getHoistableRoot(container);
                recursivelyAccumulateSuspenseyCommit(fiber);
                currentHoistableRoot = previousHoistableRoot;
              }
              break;
            }
            case OffscreenComponent: {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden)
                ;
              else {
                var current2 = fiber.alternate;
                var wasHidden = current2 !== null && current2.memoizedState !== null;
                if (wasHidden) {
                  var prevFlags = suspenseyCommitFlag;
                  suspenseyCommitFlag = MaySuspendCommit;
                  recursivelyAccumulateSuspenseyCommit(fiber);
                  suspenseyCommitFlag = prevFlags;
                } else {
                  recursivelyAccumulateSuspenseyCommit(fiber);
                }
              }
              break;
            }
            default: {
              recursivelyAccumulateSuspenseyCommit(fiber);
            }
          }
        }
        function detachAlternateSiblings(parentFiber) {
          var previousFiber = parentFiber.alternate;
          if (previousFiber !== null) {
            var detachedChild = previousFiber.child;
            if (detachedChild !== null) {
              previousFiber.child = null;
              do {
                var detachedSibling = detachedChild.sibling;
                detachedChild.sibling = null;
                detachedChild = detachedSibling;
              } while (detachedChild !== null);
            }
          }
        }
        function commitHookPassiveUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {
          if (shouldProfile(finishedWork)) {
            startPassiveEffectTimer();
            commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor);
            recordPassiveEffectDuration(finishedWork);
          } else {
            commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor);
          }
        }
        function recursivelyTraversePassiveUnmountEffects(parentFiber) {
          var deletions = parentFiber.deletions;
          if ((parentFiber.flags & ChildDeletion) !== NoFlags$1) {
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                nextEffect = childToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
              }
            }
            detachAlternateSiblings(parentFiber);
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & PassiveMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitPassiveUnmountOnFiber(child);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              recursivelyTraversePassiveUnmountEffects(finishedWork);
              if (finishedWork.flags & Passive$1) {
                commitHookPassiveUnmountEffects(finishedWork, finishedWork.return, Passive | HasEffect);
              }
              break;
            }
            case OffscreenComponent: {
              var instance = finishedWork.stateNode;
              var nextState = finishedWork.memoizedState;
              var isHidden = nextState !== null;
              if (isHidden && instance._visibility & OffscreenPassiveEffectsConnected && // For backwards compatibility, don't unmount when a tree suspends. In
              // the future we may change this to unmount after a delay.
              (finishedWork.return === null || finishedWork.return.tag !== SuspenseComponent)) {
                instance._visibility &= ~OffscreenPassiveEffectsConnected;
                recursivelyTraverseDisconnectPassiveEffects(finishedWork);
              } else {
                recursivelyTraversePassiveUnmountEffects(finishedWork);
              }
              break;
            }
            default: {
              recursivelyTraversePassiveUnmountEffects(finishedWork);
              break;
            }
          }
        }
        function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
          var deletions = parentFiber.deletions;
          if ((parentFiber.flags & ChildDeletion) !== NoFlags$1) {
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                nextEffect = childToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
              }
            }
            detachAlternateSiblings(parentFiber);
          }
          var prevDebugFiber = getCurrentFiber();
          var child = parentFiber.child;
          while (child !== null) {
            setCurrentFiber(child);
            disconnectPassiveEffect(child);
            child = child.sibling;
          }
          setCurrentFiber(prevDebugFiber);
        }
        function disconnectPassiveEffect(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              commitHookPassiveUnmountEffects(finishedWork, finishedWork.return, Passive);
              recursivelyTraverseDisconnectPassiveEffects(finishedWork);
              break;
            }
            case OffscreenComponent: {
              var instance = finishedWork.stateNode;
              if (instance._visibility & OffscreenPassiveEffectsConnected) {
                instance._visibility &= ~OffscreenPassiveEffectsConnected;
                recursivelyTraverseDisconnectPassiveEffects(finishedWork);
              }
              break;
            }
            default: {
              recursivelyTraverseDisconnectPassiveEffects(finishedWork);
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            detachFiberAfterEffects(fiber);
            if (fiber === deletedSubtreeRoot) {
              nextEffect = null;
              return;
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              commitHookPassiveUnmountEffects(current2, nearestMountedAncestor, Passive);
              break;
            }
            case LegacyHiddenComponent:
            case OffscreenComponent: {
              {
                if (current2.memoizedState !== null && current2.memoizedState.cachePool !== null) {
                  var cache = current2.memoizedState.cachePool.pool;
                  if (cache != null) {
                    retainCache(cache);
                  }
                }
              }
              break;
            }
            case SuspenseComponent: {
              break;
            }
            case CacheComponent: {
              {
                var _cache = current2.memoizedState.cache;
                releaseCache(_cache);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        function getCacheSignal() {
          var cache = readContext(CacheContext);
          return cache.controller.signal;
        }
        function getCacheForType(resourceType) {
          var cache = readContext(CacheContext);
          var cacheForType = cache.data.get(resourceType);
          if (cacheForType === void 0) {
            cacheForType = resourceType();
            cache.data.set(resourceType, cacheForType);
          }
          return cacheForType;
        }
        var DefaultCacheDispatcher = {
          getCacheSignal,
          getCacheForType
        };
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          symbolFor("selector.component");
          symbolFor("selector.has_pseudo_class");
          symbolFor("selector.role");
          symbolFor("selector.test_id");
          symbolFor("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowFixMe[cannot-resolve-name] Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? (
                // $FlowFixMe[cannot-resolve-name]
                IS_REACT_ACT_ENVIRONMENT
              ) : void 0
            );
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowFixMe[cannot-resolve-name] Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? (
                // $FlowFixMe[cannot-resolve-name]
                IS_REACT_ACT_ENVIRONMENT
              ) : void 0
            );
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue$1.current !== null) {
              error("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentCache = ReactSharedInternals.ReactCurrentCache, ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = (
          /*             */
          0
        );
        var BatchedContext = (
          /*               */
          1
        );
        var RenderContext = (
          /*         */
          2
        );
        var CommitContext = (
          /*         */
          4
        );
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var NotSuspended = 0;
        var SuspendedOnError = 1;
        var SuspendedOnData = 2;
        var SuspendedOnImmediate = 3;
        var SuspendedOnInstance = 4;
        var SuspendedOnInstanceAndReadyToContinue = 5;
        var SuspendedOnDeprecatedThrowPromise = 6;
        var SuspendedAndReadyToContinue = 7;
        var SuspendedOnHydration = 8;
        var workInProgressSuspendedReason = NotSuspended;
        var workInProgressThrownValue = null;
        var workInProgressRootDidAttachPingListener = false;
        var renderLanes = NoLanes;
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var workInProgressRootDidIncludeRecursiveRenderUpdate = false;
        var didIncludeCommitPhaseUpdate = false;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 300;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveEffectsRemainingLanes = NoLanes;
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function getWorkInProgressRootRenderLanes() {
          return workInProgressRootRenderLanes;
        }
        function isWorkLoopSuspendedOnData() {
          return workInProgressSuspendedReason === SuspendedOnData;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$1.transition !== null) {
              var transition = ReactCurrentBatchConfig$1.transition;
              if (!transition._updatedFibers) {
                transition._updatedFibers = /* @__PURE__ */ new Set();
              }
              transition._updatedFibers.add(fiber);
            }
            var actionScopeLane = peekEntangledActionLane();
            return actionScopeLane !== NoLane ? (
              // We're inside an async action scope. Reuse the same lane.
              actionScopeLane
            ) : (
              // We may or may not be inside an async action scope. If we are, this
              // is the first update in that scope. Either way, we need to get a
              // fresh transition lane.
              requestTransitionLane()
            );
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root2, fiber, lane) {
          {
            if (isRunningInsertionEffect) {
              error("useInsertionEffect must not schedule updates.");
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          if (
            // Suspended render phase
            root2 === workInProgressRoot && workInProgressSuspendedReason === SuspendedOnData || // Suspended commit phase
            root2.cancelPendingCommit !== null
          ) {
            prepareFreshStack(root2, NoLanes);
            markRootSuspended(root2, workInProgressRootRenderLanes);
          }
          markRootUpdated(root2, lane);
          if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root2, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root2 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended(root2, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root2);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode) {
              if (ReactCurrentActQueue.isBatchingLegacy)
                ;
              else {
                resetRenderTimer();
                flushSyncWorkOnLegacyRootsOnly();
              }
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root2, lane) {
          var current2 = root2.current;
          current2.lanes = lane;
          markRootUpdated(root2, lane);
          ensureRootIsScheduled(root2);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (executionContext & RenderContext) !== NoContext;
        }
        function performConcurrentWorkOnRoot(root2, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root2.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root2.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var originallyAttemptedLanes = lanes;
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2, originallyAttemptedLanes);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, originallyAttemptedLanes, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended(root2, lanes);
              ensureRootIsScheduled(root2);
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended(root2, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root2, lanes);
              var finishedWork = root2.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root2, lanes);
                if (exitStatus === RootErrored) {
                  var _originallyAttemptedLanes = lanes;
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2, _originallyAttemptedLanes);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root2, _originallyAttemptedLanes, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root2, NoLanes);
                  markRootSuspended(root2, lanes);
                  ensureRootIsScheduled(root2);
                  throw _fatalError;
                }
              }
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, finishedWork, lanes);
            }
          }
          ensureRootIsScheduled(root2);
          return getContinuationForRoot(root2, originalCallbackNode);
        }
        function recoverFromConcurrentError(root2, originallyAttemptedLanes, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          var wasRootDehydrated = isRootDehydrated(root2);
          if (wasRootDehydrated) {
            var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root2.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root2, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {
              root2.errorRecoveryDisabledLanes = mergeLanes(root2.errorRecoveryDisabledLanes, originallyAttemptedLanes);
              workInProgressRootInterleavedUpdatedLanes |= originallyAttemptedLanes;
              return RootSuspendedWithDelay;
            }
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
          }
        }
        function finishConcurrentRender(root2, exitStatus, finishedWork, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            case RootSuspendedWithDelay: {
              if (includesOnlyTransitions(lanes)) {
                markRootSuspended(root2, lanes);
                return;
              }
              break;
            }
            case RootErrored:
            case RootSuspended:
            case RootCompleted: {
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
          if (shouldForceFlushFallbacksInDEV()) {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate);
          } else {
            if (includesOnlyRetries(lanes) && alwaysThrottleRetries) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1();
              if (msUntilTimeout > 10) {
                markRootSuspended(root2, lanes);
                var nextLanes = getNextLanes(root2, NoLanes);
                if (nextLanes !== NoLanes) {
                  return;
                }
                root2.timeoutHandle = scheduleTimeout(commitRootWhenReady.bind(null, root2, finishedWork, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes), msUntilTimeout);
                return;
              }
            }
            commitRootWhenReady(root2, finishedWork, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes);
          }
        }
        function commitRootWhenReady(root2, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes) {
          if (includesOnlyNonUrgentLanes(lanes)) {
            startSuspendingCommit();
            accumulateSuspenseyCommit(finishedWork);
            var schedulePendingCommit = waitForCommitToBeReady();
            if (schedulePendingCommit !== null) {
              root2.cancelPendingCommit = schedulePendingCommit(commitRoot.bind(null, root2, recoverableErrors, transitions, didIncludeRenderPhaseUpdate));
              markRootSuspended(root2, lanes);
              return;
            }
          }
          commitRoot(root2, recoverableErrors, transitions, didIncludeRenderPhaseUpdate);
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i = 0; i < checks.length; i++) {
                    var check = checks[i];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootUpdated(root2, updatedLanes) {
          markRootUpdated$1(root2, updatedLanes);
          if (executionContext & RenderContext) {
            workInProgressRootDidIncludeRecursiveRenderUpdate = true;
          } else if (executionContext & CommitContext) {
            didIncludeCommitPhaseUpdate = true;
          }
          throwIfInfiniteUpdateLoopDetected();
        }
        function markRootPinged(root2, pingedLanes) {
          markRootPinged$1(root2, pingedLanes);
          if (executionContext & RenderContext) {
            workInProgressRootDidIncludeRecursiveRenderUpdate = true;
          } else if (executionContext & CommitContext) {
            didIncludeCommitPhaseUpdate = true;
          }
          throwIfInfiniteUpdateLoopDetected();
        }
        function markRootSuspended(root2, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended$1(root2, suspendedLanes);
        }
        function performSyncWorkOnRoot(root2) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root2, NoLanes);
          if (!includesSyncLane(lanes)) {
            ensureRootIsScheduled(root2);
            return null;
          }
          var exitStatus = renderRootSync(root2, lanes);
          if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
            var originallyAttemptedLanes = lanes;
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2, originallyAttemptedLanes);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, originallyAttemptedLanes, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended(root2, lanes);
            ensureRootIsScheduled(root2);
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            markRootSuspended(root2, lanes);
            ensureRootIsScheduled(root2);
            return null;
          }
          var finishedWork = root2.current.alternate;
          root2.finishedWork = finishedWork;
          root2.finishedLanes = lanes;
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate);
          ensureRootIsScheduled(root2);
          return null;
        }
        function flushRoot(root2, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root2, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root2);
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncWorkOnAllRoots();
            }
          }
        }
        function getExecutionContext() {
          return executionContext;
        }
        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncWorkOnLegacyRootsOnly();
            }
          }
        }
        function flushSync$1(fn) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$1.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$1.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncWorkOnAllRoots();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function isInvalidExecutionContextForEventFunction() {
          return (executionContext & RenderContext) !== NoContext;
        }
        function setRenderLanes(subtreeRenderLanes) {
          renderLanes = subtreeRenderLanes;
        }
        function getRenderLanes() {
          return renderLanes;
        }
        function resetWorkInProgressStack() {
          if (workInProgress === null)
            return;
          var interruptedWork;
          if (workInProgressSuspendedReason === NotSuspended) {
            interruptedWork = workInProgress.return;
          } else {
            resetSuspendedWorkLoopOnUnwind(workInProgress);
            interruptedWork = workInProgress;
          }
          while (interruptedWork !== null) {
            var current2 = interruptedWork.alternate;
            unwindInterruptedWork(current2, interruptedWork);
            interruptedWork = interruptedWork.return;
          }
          workInProgress = null;
        }
        function prepareFreshStack(root2, lanes) {
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          var cancelPendingCommit = root2.cancelPendingCommit;
          if (cancelPendingCommit !== null) {
            root2.cancelPendingCommit = null;
            cancelPendingCommit();
          }
          resetWorkInProgressStack();
          workInProgressRoot = root2;
          var rootWorkInProgress = createWorkInProgress(root2.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = renderLanes = lanes;
          workInProgressSuspendedReason = NotSuspended;
          workInProgressThrownValue = null;
          workInProgressRootDidAttachPingListener = false;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          workInProgressRootDidIncludeRecursiveRenderUpdate = false;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function resetSuspendedWorkLoopOnUnwind(fiber) {
          resetContextDependencies();
          resetHooksOnUnwind(fiber);
          resetChildReconcilerOnUnwind();
        }
        function handleThrow(root2, thrownValue) {
          resetHooksAfterThrow();
          resetCurrentFiber();
          ReactCurrentOwner$1.current = null;
          if (thrownValue === SuspenseException) {
            thrownValue = getSuspendedThenable();
            workInProgressSuspendedReason = shouldRemainOnPreviousScreen() && // Check if there are other pending updates that might possibly unblock this
            // component from suspending. This mirrors the check in
            // renderDidSuspendDelayIfPossible. We should attempt to unify them somehow.
            // TODO: Consider unwinding immediately, using the
            // SuspendedOnHydration mechanism.
            !includesNonIdleWork(workInProgressRootSkippedLanes) && !includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes) ? (
              // Suspend work loop until data resolves
              SuspendedOnData
            ) : (
              // Don't suspend work loop, except to check if the data has
              // immediately resolved (i.e. in a microtask). Otherwise, trigger the
              // nearest Suspense fallback.
              SuspendedOnImmediate
            );
          } else if (thrownValue === SuspenseyCommitException) {
            thrownValue = getSuspendedThenable();
            workInProgressSuspendedReason = SuspendedOnInstance;
          } else if (thrownValue === SelectiveHydrationException) {
            workInProgressSuspendedReason = SuspendedOnHydration;
          } else {
            var isWakeable = thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function";
            workInProgressSuspendedReason = isWakeable ? (
              // A wakeable object was thrown by a legacy Suspense implementation.
              // This has slightly different behavior than suspending with `use`.
              SuspendedOnDeprecatedThrowPromise
            ) : (
              // This is a regular error. If something earlier in the component already
              // suspended, we must clear the thenable state to unblock the work loop.
              SuspendedOnError
            );
          }
          workInProgressThrownValue = thrownValue;
          var erroredWork = workInProgress;
          if (erroredWork === null) {
            workInProgressRootExitStatus = RootFatalErrored;
            workInProgressRootFatalError = thrownValue;
            return;
          }
          if (erroredWork.mode & ProfileMode) {
            stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
          }
          {
            markComponentRenderStopped();
            switch (workInProgressSuspendedReason) {
              case SuspendedOnError: {
                markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                break;
              }
              case SuspendedOnData:
              case SuspendedOnImmediate:
              case SuspendedOnDeprecatedThrowPromise:
              case SuspendedAndReadyToContinue: {
                var wakeable = thrownValue;
                markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                break;
              }
            }
          }
        }
        function shouldRemainOnPreviousScreen() {
          if (includesOnlyTransitions(workInProgressRootRenderLanes)) {
            if (getShellBoundary() === null) {
              return true;
            } else {
              return false;
            }
          }
          var handler = getSuspenseHandler();
          if (handler === null)
            ;
          else {
            if (includesOnlyRetries(workInProgressRootRenderLanes) || // In this context, an OffscreenLane counts as a Retry
            // TODO: It's become increasingly clear that Retries and Offscreen are
            // deeply connected. They probably can be unified further.
            includesSomeLane(workInProgressRootRenderLanes, OffscreenLane)) {
              return handler === getShellBoundary();
            }
          }
          return false;
        }
        function pushDispatcher(container) {
          var prevDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher.current = prevDispatcher;
        }
        function pushCacheDispatcher() {
          {
            var prevCacheDispatcher = ReactCurrentCache.current;
            ReactCurrentCache.current = DefaultCacheDispatcher;
            return prevCacheDispatcher;
          }
        }
        function popCacheDispatcher(prevCacheDispatcher) {
          {
            ReactCurrentCache.current = prevCacheDispatcher;
          }
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now$1();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          var prevCacheDispatcher = pushCacheDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          outer:
            do {
              try {
                if (workInProgressSuspendedReason !== NotSuspended && workInProgress !== null) {
                  var unitOfWork = workInProgress;
                  var thrownValue = workInProgressThrownValue;
                  switch (workInProgressSuspendedReason) {
                    case SuspendedOnHydration: {
                      resetWorkInProgressStack();
                      workInProgressRootExitStatus = RootDidNotComplete;
                      break outer;
                    }
                    default: {
                      workInProgressSuspendedReason = NotSuspended;
                      workInProgressThrownValue = null;
                      throwAndUnwindWorkLoop(unitOfWork, thrownValue);
                      break;
                    }
                  }
                }
                workLoopSync();
                break;
              } catch (thrownValue2) {
                handleThrow(root2, thrownValue2);
              }
            } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          popCacheDispatcher(prevCacheDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          finishQueueingConcurrentUpdates();
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          var prevCacheDispatcher = pushCacheDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          outer:
            do {
              try {
                if (workInProgressSuspendedReason !== NotSuspended && workInProgress !== null) {
                  var unitOfWork = workInProgress;
                  var thrownValue = workInProgressThrownValue;
                  resumeOrUnwind:
                    switch (workInProgressSuspendedReason) {
                      case SuspendedOnError: {
                        workInProgressSuspendedReason = NotSuspended;
                        workInProgressThrownValue = null;
                        throwAndUnwindWorkLoop(unitOfWork, thrownValue);
                        break;
                      }
                      case SuspendedOnData: {
                        var thenable = thrownValue;
                        if (isThenableResolved(thenable)) {
                          workInProgressSuspendedReason = NotSuspended;
                          workInProgressThrownValue = null;
                          replaySuspendedUnitOfWork(unitOfWork);
                          break;
                        }
                        var onResolution = function() {
                          if (workInProgressSuspendedReason === SuspendedOnData && workInProgressRoot === root2) {
                            workInProgressSuspendedReason = SuspendedAndReadyToContinue;
                          }
                          ensureRootIsScheduled(root2);
                        };
                        thenable.then(onResolution, onResolution);
                        break outer;
                      }
                      case SuspendedOnImmediate: {
                        workInProgressSuspendedReason = SuspendedAndReadyToContinue;
                        break outer;
                      }
                      case SuspendedOnInstance: {
                        workInProgressSuspendedReason = SuspendedOnInstanceAndReadyToContinue;
                        break outer;
                      }
                      case SuspendedAndReadyToContinue: {
                        var _thenable = thrownValue;
                        if (isThenableResolved(_thenable)) {
                          workInProgressSuspendedReason = NotSuspended;
                          workInProgressThrownValue = null;
                          replaySuspendedUnitOfWork(unitOfWork);
                        } else {
                          workInProgressSuspendedReason = NotSuspended;
                          workInProgressThrownValue = null;
                          throwAndUnwindWorkLoop(unitOfWork, thrownValue);
                        }
                        break;
                      }
                      case SuspendedOnInstanceAndReadyToContinue: {
                        switch (workInProgress.tag) {
                          case HostComponent:
                          case HostHoistable:
                          case HostSingleton: {
                            var hostFiber = workInProgress;
                            var type = hostFiber.type;
                            var props = hostFiber.pendingProps;
                            var isReady = preloadInstance(type, props);
                            if (isReady) {
                              workInProgressSuspendedReason = NotSuspended;
                              workInProgressThrownValue = null;
                              var sibling = hostFiber.sibling;
                              if (sibling !== null) {
                                workInProgress = sibling;
                              } else {
                                var returnFiber = hostFiber.return;
                                if (returnFiber !== null) {
                                  workInProgress = returnFiber;
                                  completeUnitOfWork(returnFiber);
                                } else {
                                  workInProgress = null;
                                }
                              }
                              break resumeOrUnwind;
                            }
                            break;
                          }
                          default: {
                            if (true) {
                              error("Unexpected type of fiber triggered a suspensey commit. This is a bug in React.");
                            }
                            break;
                          }
                        }
                        workInProgressSuspendedReason = NotSuspended;
                        workInProgressThrownValue = null;
                        throwAndUnwindWorkLoop(unitOfWork, thrownValue);
                        break;
                      }
                      case SuspendedOnDeprecatedThrowPromise: {
                        workInProgressSuspendedReason = NotSuspended;
                        workInProgressThrownValue = null;
                        throwAndUnwindWorkLoop(unitOfWork, thrownValue);
                        break;
                      }
                      case SuspendedOnHydration: {
                        resetWorkInProgressStack();
                        workInProgressRootExitStatus = RootDidNotComplete;
                        break outer;
                      }
                      default: {
                        throw new Error("Unexpected SuspendedReason. This is a bug in React.");
                      }
                    }
                }
                if (ReactCurrentActQueue.current !== null) {
                  workLoopSync();
                } else {
                  workLoopConcurrent();
                }
                break;
              } catch (thrownValue2) {
                handleThrow(root2, thrownValue2);
              }
            } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          popCacheDispatcher(prevCacheDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            finishQueueingConcurrentUpdates();
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork(current2, unitOfWork, renderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork(current2, unitOfWork, renderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$1.current = null;
        }
        function replaySuspendedUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          setCurrentFiber(unitOfWork);
          var isProfilingMode = (unitOfWork.mode & ProfileMode) !== NoMode;
          if (isProfilingMode) {
            startProfilerTimer(unitOfWork);
          }
          switch (unitOfWork.tag) {
            case IndeterminateComponent: {
              unitOfWork.tag = FunctionComponent;
            }
            case SimpleMemoComponent:
            case FunctionComponent: {
              var Component = unitOfWork.type;
              var unresolvedProps = unitOfWork.pendingProps;
              var resolvedProps = unitOfWork.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
              var context;
              {
                var unmaskedContext = getUnmaskedContext(unitOfWork, Component, true);
                context = getMaskedContext(unitOfWork, unmaskedContext);
              }
              next = replayFunctionComponent(current2, unitOfWork, resolvedProps, Component, context, workInProgressRootRenderLanes);
              break;
            }
            case ForwardRef: {
              var _Component = unitOfWork.type.render;
              var _unresolvedProps = unitOfWork.pendingProps;
              var _resolvedProps = unitOfWork.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              next = replayFunctionComponent(current2, unitOfWork, _resolvedProps, _Component, unitOfWork.ref, workInProgressRootRenderLanes);
              break;
            }
            case HostComponent: {
              resetHooksOnUnwind(unitOfWork);
            }
            default: {
              unwindInterruptedWork(current2, unitOfWork);
              unitOfWork = workInProgress = resetWorkInProgress(unitOfWork, renderLanes);
              next = beginWork(current2, unitOfWork, renderLanes);
              break;
            }
          }
          if (isProfilingMode) {
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$1.current = null;
        }
        function throwAndUnwindWorkLoop(unitOfWork, thrownValue) {
          resetSuspendedWorkLoopOnUnwind(unitOfWork);
          var returnFiber = unitOfWork.return;
          if (returnFiber === null || workInProgressRoot === null) {
            workInProgressRootExitStatus = RootFatalErrored;
            workInProgressRootFatalError = thrownValue;
            workInProgress = null;
            return;
          }
          try {
            throwException(workInProgressRoot, returnFiber, unitOfWork, thrownValue, workInProgressRootRenderLanes);
          } catch (error2) {
            workInProgress = returnFiber;
            throw error2;
          }
          if (unitOfWork.flags & Incomplete) {
            unwindUnitOfWork(unitOfWork);
          } else {
            completeUnitOfWork(unitOfWork);
          }
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            {
              if ((completedWork.flags & Incomplete) !== NoFlags$1) {
                error("Internal React error: Expected this fiber to be complete, but it isn't. It should have been unwound. This is a bug in React.");
              }
            }
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            setCurrentFiber(completedWork);
            var next = void 0;
            if ((completedWork.mode & ProfileMode) === NoMode) {
              next = completeWork(current2, completedWork, renderLanes);
            } else {
              startProfilerTimer(completedWork);
              next = completeWork(current2, completedWork, renderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            }
            resetCurrentFiber();
            if (next !== null) {
              workInProgress = next;
              return;
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function unwindUnitOfWork(unitOfWork) {
          var incompleteWork = unitOfWork;
          do {
            var current2 = incompleteWork.alternate;
            var next = unwindWork(current2, incompleteWork);
            if (next !== null) {
              next.flags &= HostEffectMask;
              workInProgress = next;
              return;
            }
            if ((incompleteWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(incompleteWork, false);
              var actualDuration = incompleteWork.actualDuration;
              var child = incompleteWork.child;
              while (child !== null) {
                actualDuration += child.actualDuration;
                child = child.sibling;
              }
              incompleteWork.actualDuration = actualDuration;
            }
            var returnFiber = incompleteWork.return;
            if (returnFiber !== null) {
              returnFiber.flags |= Incomplete;
              returnFiber.subtreeFlags = NoFlags$1;
              returnFiber.deletions = null;
            }
            incompleteWork = returnFiber;
            workInProgress = incompleteWork;
          } while (incompleteWork !== null);
          workInProgressRootExitStatus = RootDidNotComplete;
          workInProgress = null;
        }
        function commitRoot(root2, recoverableErrors, transitions, didIncludeRenderPhaseUpdate) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          try {
            ReactCurrentBatchConfig$1.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root2, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$1.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root2, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root2.finishedWork;
          var lanes = root2.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          if (finishedWork === root2.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          root2.cancelPendingCommit = null;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          var concurrentlyUpdatedLanes2 = getConcurrentlyUpdatedLanes();
          remainingLanes = mergeLanes(remainingLanes, concurrentlyUpdatedLanes2);
          markRootFinished(root2, remainingLanes);
          didIncludeCommitPhaseUpdate = false;
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags$1 || (finishedWork.flags & PassiveMask) !== NoFlags$1) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveEffectsRemainingLanes = remainingLanes;
              pendingPassiveTransitions = transitions;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags$1;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags$1;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$1.current = null;
            commitBeforeMutationEffects(root2, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root2, finishedWork, lanes);
            resetAfterCommit();
            root2.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root2, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$1.transition = prevTransition;
          } else {
            root2.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsLanes = lanes;
          } else {
            releaseRootPooledCache(root2, remainingLanes);
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root2.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root2, false);
            }
          }
          onCommitRoot$1(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root2.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot();
          }
          ensureRootIsScheduled(root2);
          if (recoverableErrors !== null) {
            var onRecoverableError = root2.onRecoverableError;
            for (var i = 0; i < recoverableErrors.length; i++) {
              var recoverableError = recoverableErrors[i];
              var errorInfo = makeErrorInfo(recoverableError.digest, recoverableError.stack);
              onRecoverableError(recoverableError.value, errorInfo);
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSyncLane(pendingPassiveEffectsLanes) && root2.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root2.pendingLanes;
          if (
            // Check if there was a recursive update spawned by this render, in either
            // the render phase or the commit phase. We track these explicitly because
            // we can't infer from the remaining lanes alone.
            didIncludeCommitPhaseUpdate || didIncludeRenderPhaseUpdate || // As an additional precaution, we also check if there's any remaining sync
            // work. Theoretically this should be unreachable but if there's a mistake
            // in React it helps to be overly defensive given how hard it is to debug
            // those scenarios otherwise. This won't catch recursive async updates,
            // though, which is why we check the flags above first.
            includesSyncLane(remainingLanes)
          ) {
            {
              markNestedUpdateScheduled();
            }
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncWorkOnAllRoots();
          {
            markCommitStopped();
          }
          return null;
        }
        function makeErrorInfo(digest, componentStack) {
          {
            var errorInfo = {
              componentStack,
              digest
            };
            Object.defineProperty(errorInfo, "digest", {
              configurable: false,
              enumerable: true,
              get: function() {
                error('You are accessing "digest" from the errorInfo object passed to onRecoverableError. This property is deprecated and will be removed in a future version of React. To access the digest of an Error look for this property on the Error instance itself.');
                return digest;
              }
            });
            return errorInfo;
          }
        }
        function releaseRootPooledCache(root2, remainingLanes) {
          {
            var pooledCacheLanes = root2.pooledCacheLanes &= remainingLanes;
            if (pooledCacheLanes === NoLanes) {
              var pooledCache = root2.pooledCache;
              if (pooledCache != null) {
                root2.pooledCache = null;
                releaseCache(pooledCache);
              }
            }
          }
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var root2 = rootWithPendingPassiveEffects;
            var remainingLanes = pendingPassiveEffectsRemainingLanes;
            pendingPassiveEffectsRemainingLanes = NoLanes;
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$1.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$1.transition = prevTransition;
              releaseRootPooledCache(root2, remainingLanes);
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root2 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root2.current);
          commitPassiveMountEffects(root2, root2.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i = 0; i < profilerEffects.length; i++) {
              var fiber = profilerEffects[i];
              commitPassiveEffectDurations(root2, fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root2, true);
          }
          executionContext = prevExecutionContext;
          flushSyncWorkOnAllRoots();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root2 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root2;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root2);
          {
            var stateNode = root2.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root2 = enqueueUpdate(rootFiber, update, SyncLane);
          if (root2 !== null) {
            markRootUpdated(root2, SyncLane);
            ensureRootIsScheduled(root2);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = nearestMountedAncestor;
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root2 = enqueueUpdate(fiber, update, SyncLane);
                if (root2 !== null) {
                  markRootUpdated(root2, SyncLane);
                  ensureRootIsScheduled(root2);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function attachPingListener(root2, wakeable, lanes) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            workInProgressRootDidAttachPingListener = true;
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function pingSuspendedRoot(root2, wakeable, pingedLanes) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          markRootPinged(root2, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
          if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              if ((executionContext & RenderContext) === NoContext) {
                prepareFreshStack(root2, NoLanes);
              }
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root2);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root2 !== null) {
            markRootUpdated(root2, retryLane);
            ensureRootIsScheduled(root2);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            case OffscreenComponent: {
              var instance = boundaryFiber.stateNode;
              retryCache = instance._retryCache;
              break;
            }
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function throwIfInfiniteUpdateLoopDetected() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            nestedPassiveUpdateCount = 0;
            rootWithNestedUpdates = null;
            rootWithPassiveNestedUpdates = null;
            if (executionContext & RenderContext && workInProgressRoot !== null) {
              workInProgressRoot.errorRecoveryDisabledLanes = mergeLanes(workInProgressRoot.errorRecoveryDisabledLanes, workInProgressRootRenderLanes);
            }
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
        }
        function commitDoubleInvokeEffectsInDEV(root2, hasPassiveEffects) {
          {
            {
              legacyCommitDoubleInvokeEffectsInDEV(root2.current, hasPassiveEffects);
            }
          }
        }
        function legacyCommitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          setCurrentFiber(fiber);
          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
          if (hasPassiveEffects) {
            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
          }
          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
          if (hasPassiveEffects) {
            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
          }
          resetCurrentFiber();
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          var current2 = firstChild;
          var subtreeRoot = null;
          while (current2 != null) {
            var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
            if (current2 !== subtreeRoot && current2.child != null && primarySubtreeFlag !== NoFlags$1) {
              current2 = current2.child;
            } else {
              if ((current2.flags & fiberFlags) !== NoFlags$1) {
                invokeEffectFn(current2);
              }
              if (current2.sibling !== null) {
                current2 = current2.sibling;
              } else {
                current2 = subtreeRoot = current2.return;
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork;
        {
          var dummyFiber = null;
          beginWork = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork$1(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (didSuspendOrErrorWhileHydratingDEV() || originalError === SuspenseException || originalError === SelectiveHydrationException || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetSuspendedWorkLoopOnUnwind(unitOfWork);
              unwindInterruptedWork(current2, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork$1, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root2, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root2, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback$3(priorityLevel, callback);
            }
          }
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
          {
            if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue.current === null) {
              error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root2, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync$1(function() {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root2, element) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync$1(function() {
              updateContainer(element, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || // $FlowFixMe[incompatible-use] found when upgrading Flow
              alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root2, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostSingleton:
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostHoistable || node.tag === HostSingleton) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.refCleanup = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags$1;
          this.subtreeFlags = NoFlags$1;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        function createFiber(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags$1;
            workInProgress2.subtreeFlags = NoFlags$1;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current2.flags & StaticMask;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          workInProgress2.refCleanup = current2.refCleanup;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags$1;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.subtreeFlags = NoFlags$1;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true || createRootStrictEffectsByDefault) {
              mode |= StrictLegacyMode | StrictEffectsMode;
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            {
              var hostContext = getHostContext();
              fiberTag = isHostHoistableType(type, pendingProps, hostContext) ? HostHoistable : isHostSingletonType(type) ? HostSingleton : HostComponent;
            }
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                case REACT_SCOPE_TYPE:
                case REACT_CACHE_TYPE: {
                  return createFiberFromCache(pendingProps, mode, lanes, key);
                }
                case REACT_TRACING_MARKER_TYPE:
                case REACT_DEBUG_TRACING_MODE_TYPE:
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            _visibility: OffscreenVisible,
            _pendingVisibility: OffscreenVisible,
            _pendingMarkers: null,
            _retryCache: null,
            _transitions: null,
            _current: null,
            detach: function() {
              return detachOffscreenInstance(primaryChildInstance);
            },
            attach: function() {
              return attachOffscreenInstance(primaryChildInstance);
            }
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromCache(pendingProps, mode, lanes, key) {
          var fiber = createFiber(CacheComponent, pendingProps, key, mode);
          fiber.elementType = REACT_CACHE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.refCleanup = source.refCleanup;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.cancelPendingCommit = null;
          this.context = null;
          this.pendingContext = null;
          this.next = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.errorRecoveryDisabledLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.hiddenUpdates = createLaneMap(null);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.pooledCache = null;
            this.pooledCacheLanes = NoLanes;
          }
          this.incompleteTransitions = /* @__PURE__ */ new Map();
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = /* @__PURE__ */ new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i = 0; _i < TotalLanes; _i++) {
              pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          {
            var initialCache = createCache();
            retainCache(initialCache);
            root2.pooledCache = initialCache;
            retainCache(initialCache);
            var initialState = {
              element: initialChildren,
              isDehydrated: hydrate2,
              cache: initialCache
            };
            uninitializedFiber.memoizedState = initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        var ReactVersion = "18.3.0-experimental-a1c62b8a7-20230627";
        function createPortal$1(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return getPublicInstance(hostFiber.stateNode);
          }
        }
        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = true;
          var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root2.context = getContextForSubtree(null);
          var current2 = root2.current;
          var lane = requestUpdateLane(current2);
          var update = createUpdate(lane);
          update.callback = callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current2, update, lane);
          scheduleInitialHydrationOnRoot(root2, lane);
          return root2;
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
            }
          }
          var update = createUpdate(lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(current$1, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, current$1, lane);
            entangleTransitions(root2, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostSingleton:
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root2 = fiber.stateNode;
              if (isRootDehydrated(root2)) {
                var lanes = getHighestPriorityPendingLanes(root2);
                flushRoot(root2, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync$1(function() {
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return getPublicInstance(hostFiber.stateNode);
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index2) {
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === path.length) {
              if (isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(
                // $FlowFixMe[incompatible-use] number or string is fine here
                obj[oldKey],
                oldPath,
                newPath,
                index2 + 1
              );
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++) {
                if (oldPath[i] !== newPath[i]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index2, value) {
            if (index2 >= path.length) {
              return value;
            }
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane);
              }
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane);
              }
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane);
              }
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane);
            }
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane);
            }
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane);
            }
          };
          scheduleUpdate = function(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane);
            }
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
            // Enables DevTools to detect reconciler version rather than renderer version
            // which may not match for third party renderers.
            reconcilerVersion: ReactVersion
          });
        }
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSync$1();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, a, b) {
          if (isInsideEventHandler) {
            return fn(a, b);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdates$1(fn, a, b);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener && typeof listener !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var propName in Interface) {
              if (!Interface.hasOwnProperty(propName)) {
                continue;
              }
              var normalize = Interface[propName];
              if (normalize) {
                this[propName] = normalize(nativeEvent);
              } else {
                this[propName] = nativeEvent[propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            // $FlowFixMe[missing-this-annot]
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            // $FlowFixMe[missing-this-annot]
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
             * We release all dispatched `SyntheticEvent`s after each event loop, adding
             * them back into the pool. This allows a way to hold onto a reference that
             * won't be added back into the pool.
             */
            persist: function() {
            },
            /**
             * Checks if this event should be released back into the pool.
             *
             * @return {boolean} True if this should not be released, false otherwise.
             */
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = (
              // $FlowFixMe[invalid-computed-prop] unable to index with a `mixed` value
              normalizeKey[nativeEvent.key] || nativeEvent.key
            );
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(
              // $FlowFixMe[incompatible-call] unable to narrow to `KeyboardEvent`
              nativeEvent
            );
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          // Legacy Interface
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(
                // $FlowFixMe[incompatible-call] unable to narrow to `KeyboardEvent`
                event
              );
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(
                // $FlowFixMe[incompatible-call] unable to narrow to `KeyboardEvent`
                event
              );
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : (
              // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
              "wheelDeltaX" in event ? (
                // $FlowFixMe[unsafe-arithmetic] assuming this is a number
                -event.wheelDeltaX
              ) : 0
            );
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : (
              // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
              "wheelDeltaY" in event ? (
                // $FlowFixMe[unsafe-arithmetic] assuming this is a number
                -event.wheelDeltaY
              ) : (
                // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                "wheelDelta" in event ? (
                  // $FlowFixMe[unsafe-arithmetic] assuming this is a number
                  -event.wheelDelta
                ) : 0
              )
            );
          },
          deltaZ: 0,
          // Browsers without "deltaMode" is reporting in raw wheel delta where one
          // notch on the scroll is always +/- 120, roughly equivalent to pixels.
          // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
          // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        function extractEvents$6(dispatchQueue, domEventName, maybeTargetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          if (domEventName !== "submit") {
            return;
          }
          if (!maybeTargetInst || maybeTargetInst.stateNode !== nativeEventTarget) {
            return;
          }
          var formInst = maybeTargetInst;
          var form = nativeEventTarget;
          var action = getFiberCurrentPropsFromNode(form).action;
          var submitter = nativeEvent.submitter;
          var submitterAction;
          if (submitter) {
            var submitterProps = getFiberCurrentPropsFromNode(submitter);
            submitterAction = submitterProps ? submitterProps.formAction : submitter.getAttribute("formAction");
            if (submitterAction != null) {
              action = submitterAction;
              submitter = null;
            }
          }
          if (typeof action !== "function") {
            return;
          }
          var event = new SyntheticEvent("action", "action", null, nativeEvent, nativeEventTarget);
          function submitForm() {
            if (nativeEvent.defaultPrevented) {
              return;
            }
            event.preventDefault();
            var formData;
            if (submitter) {
              var temp = submitter.ownerDocument.createElement("input");
              temp.name = submitter.name;
              temp.value = submitter.value;
              submitter.parentNode.insertBefore(temp, submitter);
              formData = new FormData(form);
              temp.parentNode.removeChild(temp);
            } else {
              formData = new FormData(form);
            }
            var pendingState = {
              pending: true,
              data: formData,
              method: form.method,
              action
            };
            {
              Object.freeze(pendingState);
            }
            startHostTransition(formInst, pendingState, action, formData);
          }
          dispatchQueue.push({
            event,
            listeners: [{
              instance: null,
              listener: submitForm,
              currentTarget: form
            }]
          });
        }
        function dispatchReplayedFormAction(formInst, form, action, formData) {
          var pendingState = {
            pending: true,
            data: formData,
            method: form.method,
            action
          };
          {
            Object.freeze(pendingState);
          }
          startHostTransition(formInst, pendingState, action, formData);
        }
        var hasScheduledReplayAttempt = false;
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          // Intentionally camelCase
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset"
          // 'submit', // stopPropagation blocks the replay mechanism
        ];
        function isDiscreteEventThatRequiresHydration(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptContinuousHydration(fiber);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  runWithPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target) {
          var updatePriority = getCurrentUpdatePriority();
          var queuedTarget = {
            blockedOn: null,
            target,
            priority: updatePriority
          };
          var i = 0;
          for (; i < queuedExplicitHydrationTargets.length; i++) {
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
          if (i === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
              var nativeEvent = queuedEvent.nativeEvent;
              var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
              setReplayingEvent(nativeEventClone);
              nativeEvent.target.dispatchEvent(nativeEventClone);
              resetReplayingEvent();
            } else {
              var fiber = getInstanceFromNode(nextBlockedOn);
              if (fiber !== null) {
                attemptContinuousHydration(fiber);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        var lastScheduledReplayQueue = null;
        function replayUnblockedFormActions(formReplayingQueue) {
          if (lastScheduledReplayQueue === formReplayingQueue) {
            lastScheduledReplayQueue = null;
          }
          for (var i = 0; i < formReplayingQueue.length; i += 3) {
            var form = formReplayingQueue[i];
            var submitterOrAction = formReplayingQueue[i + 1];
            var formData = formReplayingQueue[i + 2];
            if (typeof submitterOrAction !== "function") {
              var blockedOn = findInstanceBlockingTarget(submitterOrAction || form);
              if (blockedOn === null) {
                continue;
              } else {
                break;
              }
            }
            var formInst = getInstanceFromNode(form);
            if (formInst !== null) {
              formReplayingQueue.splice(i, 3);
              i -= 3;
              dispatchReplayedFormAction(formInst, form, submitterOrAction, formData);
              continue;
            }
          }
        }
        function scheduleReplayQueueIfNeeded(formReplayingQueue) {
          if (lastScheduledReplayQueue !== formReplayingQueue) {
            lastScheduledReplayQueue = formReplayingQueue;
            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, function() {
              return replayUnblockedFormActions(formReplayingQueue);
            });
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var i = 0; i < queuedExplicitHydrationTargets.length; i++) {
            var queuedTarget = queuedExplicitHydrationTargets[i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
          {
            var root2 = unblocked.getRootNode();
            var formReplayingQueue = root2.$$reactFormReplay;
            if (formReplayingQueue != null) {
              for (var _i = 0; _i < formReplayingQueue.length; _i += 3) {
                var form = formReplayingQueue[_i];
                var submitterOrAction = formReplayingQueue[_i + 1];
                var formProps = getFiberCurrentPropsFromNode(form);
                if (typeof submitterOrAction === "function") {
                  if (!formProps) {
                    scheduleReplayQueueIfNeeded(formReplayingQueue);
                  }
                  continue;
                }
                var target = form;
                if (formProps) {
                  var action = null;
                  var submitter = submitterOrAction;
                  if (submitter && submitter.hasAttribute("formAction")) {
                    target = submitter;
                    var submitterProps = getFiberCurrentPropsFromNode(submitter);
                    if (submitterProps) {
                      action = submitterProps.formAction;
                    } else {
                      var blockedOn = findInstanceBlockingTarget(target);
                      if (blockedOn !== null) {
                        continue;
                      }
                    }
                  } else {
                    action = formProps.action;
                  }
                  if (typeof action === "function") {
                    formReplayingQueue[_i + 1] = action;
                  } else {
                    formReplayingQueue.splice(_i, 3);
                    _i -= 3;
                  }
                  scheduleReplayQueueIfNeeded(formReplayingQueue);
                  continue;
                }
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          var blockedOn = findInstanceBlockingEvent(nativeEvent);
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(nativeEvent);
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        function findInstanceBlockingEvent(nativeEvent) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          return findInstanceBlockingTarget(nativeEventTarget);
        }
        var return_targetInst = null;
        function findInstanceBlockingTarget(targetNode) {
          return_targetInst = null;
          var targetInst = getClosestInstanceFromNode(targetNode);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message": {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority$1:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive
          });
          return listener;
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root) {
            return root.value;
          }
          return root.textContent;
        }
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents$3() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
          !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$2() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst$1, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement$1 = target;
          activeElementInst$1 = targetInst;
          activeElement$1.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement$1) {
            return;
          }
          activeElement$1.detachEvent("onpropertychange", handlePropertyChange);
          activeElement$1 = null;
          activeElementInst$1 = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst$1)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst$1);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node, props) {
          if (node.type !== "number") {
            return;
          }
          {
            var isControlled = props.value != null;
            if (isControlled) {
              setDefaultValue(node, "number", node.value);
            }
          }
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          } else if (targetInst && isCustomElement(targetInst.elementType)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout" && targetInst) {
            var props = targetInst.memoizedProps;
            handleControlledInputBlur(targetNode, props);
          }
        }
        function registerEvents$1() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              var tag = to.tag;
              if (to !== nearestMounted || tag !== HostComponent && tag !== HostSingleton && tag !== HostText) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset) {
          var node = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection$1(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement = null;
        var activeElementInst = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement == null || activeElement !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection(activeElement);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement;
            }
          }
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement = targetNode;
                activeElementInst = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement = null;
              activeElementInst = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes = {};
          prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes["Webkit" + styleProp] = "webkit" + eventName;
          prefixes["Moz" + styleProp] = "moz" + eventName;
          return prefixes;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i = 0; i < simpleEventPluginEvents.length; i++) {
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
            // nonDelegatedEvents list in DOMPluginEventSystem.
            // Then we can remove this special list.
            // This is a breaking change that can wait until React 18.
            domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$1();
        registerEvents$2();
        registerEvents();
        registerEvents$3();
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            {
              extractEvents$6(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
              error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (domEventName !== "selectionchange") {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
              if (!ownerDocument[listeningMarker]) {
                ownerDocument[listeningMarker] = true;
                listenToNativeEvent("selectionchange", false, ownerDocument);
              }
            }
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop:
                while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText || parentTag === HostHoistable || parentTag === HostSingleton) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
            }
          }
          batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if ((tag === HostComponent || tag === HostHoistable || tag === HostSingleton) && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if ((tag === HostComponent || tag === HostHoistable || tag === HostSingleton) && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent && inst.tag !== HostSingleton);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if ((tag === HostComponent || tag === HostHoistable || tag === HostSingleton) && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        var didWarnInvalidHydration = false;
        var didWarnFormActionType = false;
        var didWarnFormActionName = false;
        var didWarnFormActionTarget = false;
        var didWarnFormActionMethod = false;
        var canDiffStyleForHydrationWarning;
        {
          canDiffStyleForHydrationWarning = disableIEWorkarounds;
        }
        function validatePropertiesInDevelopment(type, props) {
          {
            validateProperties$2(type, props);
            validateProperties$1(type, props);
            validateProperties(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
            if (props.contentEditable && !props.suppressContentEditableWarning && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
        }
        function validateFormActionInDevelopment(tag, key, value, props) {
          {
            if (value == null) {
              return;
            }
            if (tag === "form") {
              if (key === "formAction") {
                error("You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>.");
              } else if (typeof value === "function") {
                if ((props.encType != null || props.method != null) && !didWarnFormActionMethod) {
                  didWarnFormActionMethod = true;
                  error("Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden.");
                }
                if (props.target != null && !didWarnFormActionTarget) {
                  didWarnFormActionTarget = true;
                  error("Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window.");
                }
              }
            } else if (tag === "input" || tag === "button") {
              if (key === "action") {
                error("You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>.");
              } else if (tag === "input" && props.type !== "submit" && props.type !== "image" && !didWarnFormActionType) {
                didWarnFormActionType = true;
                error('An input can only specify a formAction along with type="submit" or type="image".');
              } else if (tag === "button" && props.type != null && props.type !== "submit" && !didWarnFormActionType) {
                didWarnFormActionType = true;
                error('A button can only specify a formAction along with type="submit" or no type.');
              } else if (typeof value === "function") {
                if (props.name != null && !didWarnFormActionName) {
                  didWarnFormActionName = true;
                  error('Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.');
                }
                if ((props.formEncType != null || props.formMethod != null) && !didWarnFormActionMethod) {
                  didWarnFormActionMethod = true;
                  error("Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden.");
                }
                if (props.formTarget != null && !didWarnFormActionTarget) {
                  didWarnFormActionTarget = true;
                  error("Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window.");
                }
              }
            } else {
              if (key === "action") {
                error("You can only pass the action prop to <form>.");
              } else {
                error("You can only pass the formAction prop to <input> or <button>.");
              }
            }
          }
        }
        function warnForPropDifference(propName, serverValue, clientValue) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            if (serverValue === clientValue) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          }
        }
        function warnForExtraAttributes(attributeNames) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          }
        }
        function warnForInvalidEventListener(registrationName, listener) {
          {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          }
        }
        function normalizeHTML(parent, html) {
          {
            var testElement = parent.namespaceURI === MATH_NAMESPACE || parent.namespaceURI === SVG_NAMESPACE ? parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName) : parent.ownerDocument.createElement(parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          }
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error("Text content does not match server-rendered HTML.");
          }
        }
        function noop$1() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop$1;
        }
        var xlinkNamespace = "http://www.w3.org/1999/xlink";
        var xmlNamespace = "http://www.w3.org/XML/1998/namespace";
        function setProp(domElement, tag, key, value, props, prevValue) {
          switch (key) {
            case "children": {
              if (typeof value === "string") {
                {
                  validateTextNesting(value, tag);
                }
                var canSetTextContent = tag !== "body" && (tag !== "textarea" || value !== "");
                if (canSetTextContent) {
                  setTextContent(domElement, value);
                }
              } else if (typeof value === "number") {
                {
                  validateTextNesting("" + value, tag);
                }
                var _canSetTextContent = tag !== "body";
                if (_canSetTextContent) {
                  setTextContent(domElement, "" + value);
                }
              }
              break;
            }
            case "className":
              setValueForKnownAttribute(domElement, "class", value);
              break;
            case "tabIndex":
              setValueForKnownAttribute(domElement, "tabindex", value);
              break;
            case "dir":
            case "role":
            case "viewBox":
            case "width":
            case "height": {
              setValueForKnownAttribute(domElement, key, value);
              break;
            }
            case "style": {
              setValueForStyles(domElement, value, prevValue);
              break;
            }
            case "src":
            case "href": {
              {
                if (value === "") {
                  {
                    if (key === "src") {
                      error('An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', key, key);
                    } else {
                      error('An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', key, key);
                    }
                  }
                  domElement.removeAttribute(key);
                  break;
                }
              }
              if (value == null || typeof value === "function" || typeof value === "symbol" || typeof value === "boolean") {
                domElement.removeAttribute(key);
                break;
              }
              {
                checkAttributeStringCoercion(value, key);
              }
              var sanitizedValue = sanitizeURL("" + value);
              domElement.setAttribute(key, sanitizedValue);
              break;
            }
            case "action":
            case "formAction": {
              {
                validateFormActionInDevelopment(tag, key, value, props);
              }
              {
                if (typeof value === "function") {
                  domElement.setAttribute(
                    key,
                    // eslint-disable-next-line no-script-url
                    "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you're trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
                  );
                  break;
                } else if (typeof prevValue === "function") {
                  if (key === "formAction") {
                    if (tag !== "input") {
                      setProp(domElement, tag, "name", props.name, props, null);
                    }
                    setProp(domElement, tag, "formEncType", props.formEncType, props, null);
                    setProp(domElement, tag, "formMethod", props.formMethod, props, null);
                    setProp(domElement, tag, "formTarget", props.formTarget, props, null);
                  } else {
                    setProp(domElement, tag, "encType", props.encType, props, null);
                    setProp(domElement, tag, "method", props.method, props, null);
                    setProp(domElement, tag, "target", props.target, props, null);
                  }
                }
              }
              if (value == null || !enableFormActions || typeof value === "symbol" || typeof value === "boolean") {
                domElement.removeAttribute(key);
                break;
              }
              {
                checkAttributeStringCoercion(value, key);
              }
              var _sanitizedValue = sanitizeURL("" + value);
              domElement.setAttribute(key, _sanitizedValue);
              break;
            }
            case "onClick": {
              if (value != null) {
                if (typeof value !== "function") {
                  warnForInvalidEventListener(key, value);
                }
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
            }
            case "onScroll": {
              if (value != null) {
                if (typeof value !== "function") {
                  warnForInvalidEventListener(key, value);
                }
                listenToNonDelegatedEvent("scroll", domElement);
              }
              break;
            }
            case "dangerouslySetInnerHTML": {
              if (value != null) {
                if (typeof value !== "object" || !("__html" in value)) {
                  throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
                var nextHtml = value.__html;
                if (nextHtml != null) {
                  if (props.children != null) {
                    throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                  }
                  {
                    domElement.innerHTML = nextHtml;
                  }
                }
              }
              break;
            }
            case "multiple": {
              domElement.multiple = value && typeof value !== "function" && typeof value !== "symbol";
              break;
            }
            case "muted": {
              domElement.muted = value && typeof value !== "function" && typeof value !== "symbol";
              break;
            }
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML": {
              break;
            }
            case "autoFocus": {
              break;
            }
            case "xlinkHref": {
              if (value == null || typeof value === "function" || typeof value === "boolean" || typeof value === "symbol") {
                domElement.removeAttribute("xlink:href");
                break;
              }
              {
                checkAttributeStringCoercion(value, key);
              }
              var _sanitizedValue2 = sanitizeURL("" + value);
              domElement.setAttributeNS(xlinkNamespace, "xlink:href", _sanitizedValue2);
              break;
            }
            case "contentEditable":
            case "spellCheck":
            case "draggable":
            case "value":
            case "autoReverse":
            case "externalResourcesRequired":
            case "focusable":
            case "preserveAlpha": {
              if (value != null && typeof value !== "function" && typeof value !== "symbol") {
                {
                  checkAttributeStringCoercion(value, key);
                }
                domElement.setAttribute(key, "" + value);
              } else {
                domElement.removeAttribute(key);
              }
              break;
            }
            case "allowFullScreen":
            case "async":
            case "autoPlay":
            case "controls":
            case "default":
            case "defer":
            case "disabled":
            case "disablePictureInPicture":
            case "disableRemotePlayback":
            case "formNoValidate":
            case "hidden":
            case "loop":
            case "noModule":
            case "noValidate":
            case "open":
            case "playsInline":
            case "readOnly":
            case "required":
            case "reversed":
            case "scoped":
            case "seamless":
            case "itemScope": {
              if (value && typeof value !== "function" && typeof value !== "symbol") {
                domElement.setAttribute(key, "");
              } else {
                domElement.removeAttribute(key);
              }
              break;
            }
            case "capture":
            case "download": {
              if (value === true) {
                domElement.setAttribute(key, "");
              } else if (value !== false && value != null && typeof value !== "function" && typeof value !== "symbol") {
                {
                  checkAttributeStringCoercion(value, key);
                }
                domElement.setAttribute(key, value);
              } else {
                domElement.removeAttribute(key);
              }
              break;
            }
            case "cols":
            case "rows":
            case "size":
            case "span": {
              if (value != null && typeof value !== "function" && typeof value !== "symbol" && !isNaN(value) && value >= 1) {
                {
                  checkAttributeStringCoercion(value, key);
                }
                domElement.setAttribute(key, value);
              } else {
                domElement.removeAttribute(key);
              }
              break;
            }
            case "rowSpan":
            case "start": {
              if (value != null && typeof value !== "function" && typeof value !== "symbol" && !isNaN(value)) {
                {
                  checkAttributeStringCoercion(value, key);
                }
                domElement.setAttribute(key, value);
              } else {
                domElement.removeAttribute(key);
              }
              break;
            }
            case "xlinkActuate":
              setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:actuate", value);
              break;
            case "xlinkArcrole":
              setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:arcrole", value);
              break;
            case "xlinkRole":
              setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:role", value);
              break;
            case "xlinkShow":
              setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:show", value);
              break;
            case "xlinkTitle":
              setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:title", value);
              break;
            case "xlinkType":
              setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:type", value);
              break;
            case "xmlBase":
              setValueForNamespacedAttribute(domElement, xmlNamespace, "xml:base", value);
              break;
            case "xmlLang":
              setValueForNamespacedAttribute(domElement, xmlNamespace, "xml:lang", value);
              break;
            case "xmlSpace":
              setValueForNamespacedAttribute(domElement, xmlNamespace, "xml:space", value);
              break;
            case "is": {
              {
                if (prevValue != null) {
                  error('Cannot update the "is" prop after it has been initialized.');
                }
              }
              setValueForAttribute(domElement, "is", value);
              break;
            }
            case "innerText":
            case "textContent": {
              break;
            }
            default: {
              if (key.length > 2 && (key[0] === "o" || key[0] === "O") && (key[1] === "n" || key[1] === "N")) {
                if (registrationNameDependencies.hasOwnProperty(key) && value != null && typeof value !== "function") {
                  warnForInvalidEventListener(key, value);
                }
              } else {
                var attributeName = getAttributeAlias(key);
                setValueForAttribute(domElement, attributeName, value);
              }
            }
          }
        }
        function setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {
          switch (key) {
            case "style": {
              setValueForStyles(domElement, value, prevValue);
              break;
            }
            case "dangerouslySetInnerHTML": {
              if (value != null) {
                if (typeof value !== "object" || !("__html" in value)) {
                  throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
                var nextHtml = value.__html;
                if (nextHtml != null) {
                  if (props.children != null) {
                    throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                  }
                  {
                    domElement.innerHTML = nextHtml;
                  }
                }
              }
              break;
            }
            case "children": {
              if (typeof value === "string") {
                setTextContent(domElement, value);
              } else if (typeof value === "number") {
                setTextContent(domElement, "" + value);
              }
              break;
            }
            case "onScroll": {
              if (value != null) {
                if (typeof value !== "function") {
                  warnForInvalidEventListener(key, value);
                }
                listenToNonDelegatedEvent("scroll", domElement);
              }
              break;
            }
            case "onClick": {
              if (value != null) {
                if (typeof value !== "function") {
                  warnForInvalidEventListener(key, value);
                }
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
            }
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "innerHTML": {
              break;
            }
            case "innerText":
            case "textContent": {
              break;
            }
            default: {
              if (registrationNameDependencies.hasOwnProperty(key)) {
                if (value != null && typeof value !== "function") {
                  warnForInvalidEventListener(key, value);
                }
              } else {
                {
                  setValueForPropertyOnCustomComponent(domElement, key, value);
                }
              }
            }
          }
        }
        function setInitialProperties(domElement, tag, props) {
          {
            validatePropertiesInDevelopment(tag, props);
          }
          switch (tag) {
            case "div":
            case "span":
            case "svg":
            case "path":
            case "a":
            case "g":
            case "p":
            case "li": {
              break;
            }
            case "input": {
              {
                checkControlledValueProps("input", props);
              }
              listenToNonDelegatedEvent("invalid", domElement);
              var name = null;
              var type = null;
              var value = null;
              var defaultValue = null;
              var checked = null;
              var defaultChecked = null;
              for (var propKey in props) {
                if (!props.hasOwnProperty(propKey)) {
                  continue;
                }
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "name": {
                    name = propValue;
                    break;
                  }
                  case "type": {
                    type = propValue;
                    break;
                  }
                  case "checked": {
                    checked = propValue;
                    break;
                  }
                  case "defaultChecked": {
                    defaultChecked = propValue;
                    break;
                  }
                  case "value": {
                    value = propValue;
                    break;
                  }
                  case "defaultValue": {
                    defaultValue = propValue;
                    break;
                  }
                  case "children":
                  case "dangerouslySetInnerHTML": {
                    if (propValue != null) {
                      throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                    }
                    break;
                  }
                  default: {
                    setProp(domElement, tag, propKey, propValue, props, null);
                  }
                }
              }
              validateInputProps(domElement, props);
              initInput(domElement, value, defaultValue, checked, defaultChecked, type, name, false);
              track(domElement);
              return;
            }
            case "select": {
              {
                checkControlledValueProps("select", props);
              }
              listenToNonDelegatedEvent("invalid", domElement);
              var _value = null;
              var _defaultValue = null;
              var multiple = null;
              for (var _propKey in props) {
                if (!props.hasOwnProperty(_propKey)) {
                  continue;
                }
                var _propValue = props[_propKey];
                if (_propValue == null) {
                  continue;
                }
                switch (_propKey) {
                  case "value": {
                    _value = _propValue;
                    break;
                  }
                  case "defaultValue": {
                    _defaultValue = _propValue;
                    break;
                  }
                  case "multiple": {
                    multiple = _propValue;
                  }
                  default: {
                    setProp(domElement, tag, _propKey, _propValue, props, null);
                  }
                }
              }
              validateSelectProps(domElement, props);
              initSelect(domElement, _value, _defaultValue, multiple);
              return;
            }
            case "textarea": {
              {
                checkControlledValueProps("textarea", props);
              }
              listenToNonDelegatedEvent("invalid", domElement);
              var _value2 = null;
              var _defaultValue2 = null;
              var children = null;
              for (var _propKey2 in props) {
                if (!props.hasOwnProperty(_propKey2)) {
                  continue;
                }
                var _propValue2 = props[_propKey2];
                if (_propValue2 == null) {
                  continue;
                }
                switch (_propKey2) {
                  case "value": {
                    _value2 = _propValue2;
                    break;
                  }
                  case "defaultValue": {
                    _defaultValue2 = _propValue2;
                    break;
                  }
                  case "children": {
                    children = _propValue2;
                    break;
                  }
                  case "dangerouslySetInnerHTML": {
                    if (_propValue2 != null) {
                      throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                    }
                    break;
                  }
                  default: {
                    setProp(domElement, tag, _propKey2, _propValue2, props, null);
                  }
                }
              }
              validateTextareaProps(domElement, props);
              initTextarea(domElement, _value2, _defaultValue2, children);
              track(domElement);
              return;
            }
            case "option": {
              validateOptionProps(domElement, props);
              for (var _propKey3 in props) {
                if (!props.hasOwnProperty(_propKey3)) {
                  continue;
                }
                var _propValue3 = props[_propKey3];
                if (_propValue3 == null) {
                  continue;
                }
                switch (_propKey3) {
                  case "selected": {
                    domElement.selected = _propValue3 && typeof _propValue3 !== "function" && typeof _propValue3 !== "symbol";
                    break;
                  }
                  default: {
                    setProp(domElement, tag, _propKey3, _propValue3, props, null);
                  }
                }
              }
              return;
            }
            case "dialog": {
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            }
            case "iframe":
            case "object": {
              listenToNonDelegatedEvent("load", domElement);
              break;
            }
            case "video":
            case "audio": {
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              break;
            }
            case "image": {
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            }
            case "details": {
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            }
            case "embed":
            case "source":
            case "img":
            case "link": {
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
            }
            case "area":
            case "base":
            case "br":
            case "col":
            case "hr":
            case "keygen":
            case "meta":
            case "param":
            case "track":
            case "wbr":
            case "menuitem": {
              for (var _propKey4 in props) {
                if (!props.hasOwnProperty(_propKey4)) {
                  continue;
                }
                var _propValue4 = props[_propKey4];
                if (_propValue4 == null) {
                  continue;
                }
                switch (_propKey4) {
                  case "children":
                  case "dangerouslySetInnerHTML": {
                    throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                  }
                  default: {
                    setProp(domElement, tag, _propKey4, _propValue4, props, null);
                  }
                }
              }
              return;
            }
            default: {
              if (isCustomElement(tag)) {
                for (var _propKey5 in props) {
                  if (!props.hasOwnProperty(_propKey5)) {
                    continue;
                  }
                  var _propValue5 = props[_propKey5];
                  if (_propValue5 == null) {
                    continue;
                  }
                  setPropOnCustomElement(domElement, tag, _propKey5, _propValue5, props, null);
                }
                return;
              }
            }
          }
          for (var _propKey6 in props) {
            if (!props.hasOwnProperty(_propKey6)) {
              continue;
            }
            var _propValue6 = props[_propKey6];
            if (_propValue6 == null) {
              continue;
            }
            setProp(domElement, tag, _propKey6, _propValue6, props, null);
          }
        }
        function updateProperties(domElement, tag, lastProps, nextProps) {
          {
            validatePropertiesInDevelopment(tag, nextProps);
          }
          switch (tag) {
            case "div":
            case "span":
            case "svg":
            case "path":
            case "a":
            case "g":
            case "p":
            case "li": {
              break;
            }
            case "input": {
              var name = null;
              var type = null;
              var value = null;
              var defaultValue = null;
              var lastDefaultValue = null;
              var checked = null;
              var defaultChecked = null;
              for (var propKey in lastProps) {
                var lastProp = lastProps[propKey];
                if (lastProps.hasOwnProperty(propKey) && lastProp != null) {
                  switch (propKey) {
                    case "checked": {
                      break;
                    }
                    case "value": {
                      break;
                    }
                    case "defaultValue": {
                      lastDefaultValue = lastProp;
                    }
                    default: {
                      if (!nextProps.hasOwnProperty(propKey))
                        setProp(domElement, tag, propKey, null, nextProps, lastProp);
                    }
                  }
                }
              }
              for (var _propKey7 in nextProps) {
                var nextProp = nextProps[_propKey7];
                var _lastProp = lastProps[_propKey7];
                if (nextProps.hasOwnProperty(_propKey7) && (nextProp != null || _lastProp != null)) {
                  switch (_propKey7) {
                    case "type": {
                      type = nextProp;
                      break;
                    }
                    case "name": {
                      name = nextProp;
                      break;
                    }
                    case "checked": {
                      checked = nextProp;
                      break;
                    }
                    case "defaultChecked": {
                      defaultChecked = nextProp;
                      break;
                    }
                    case "value": {
                      value = nextProp;
                      break;
                    }
                    case "defaultValue": {
                      defaultValue = nextProp;
                      break;
                    }
                    case "children":
                    case "dangerouslySetInnerHTML": {
                      if (nextProp != null) {
                        throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                      }
                      break;
                    }
                    default: {
                      if (nextProp !== _lastProp)
                        setProp(domElement, tag, _propKey7, nextProp, nextProps, _lastProp);
                    }
                  }
                }
              }
              {
                var wasControlled = lastProps.type === "checkbox" || lastProps.type === "radio" ? lastProps.checked != null : lastProps.value != null;
                var isControlled = nextProps.type === "checkbox" || nextProps.type === "radio" ? nextProps.checked != null : nextProps.value != null;
                if (!wasControlled && isControlled && !didWarnUncontrolledToControlled) {
                  error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                  didWarnUncontrolledToControlled = true;
                }
                if (wasControlled && !isControlled && !didWarnControlledToUncontrolled) {
                  error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                  didWarnControlledToUncontrolled = true;
                }
              }
              updateInput(domElement, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name);
              return;
            }
            case "select": {
              var _value3 = null;
              var _defaultValue3 = null;
              var multiple = null;
              var wasMultiple = null;
              for (var _propKey8 in lastProps) {
                var _lastProp2 = lastProps[_propKey8];
                if (lastProps.hasOwnProperty(_propKey8) && _lastProp2 != null) {
                  switch (_propKey8) {
                    case "value": {
                      break;
                    }
                    case "multiple": {
                      wasMultiple = _lastProp2;
                    }
                    default: {
                      if (!nextProps.hasOwnProperty(_propKey8))
                        setProp(domElement, tag, _propKey8, null, nextProps, _lastProp2);
                    }
                  }
                }
              }
              for (var _propKey9 in nextProps) {
                var _nextProp = nextProps[_propKey9];
                var _lastProp3 = lastProps[_propKey9];
                if (nextProps.hasOwnProperty(_propKey9) && (_nextProp != null || _lastProp3 != null)) {
                  switch (_propKey9) {
                    case "value": {
                      _value3 = _nextProp;
                      break;
                    }
                    case "defaultValue": {
                      _defaultValue3 = _nextProp;
                      break;
                    }
                    case "multiple": {
                      multiple = _nextProp;
                    }
                    default: {
                      if (_nextProp !== _lastProp3)
                        setProp(domElement, tag, _propKey9, _nextProp, nextProps, _lastProp3);
                    }
                  }
                }
              }
              updateSelect(domElement, _value3, _defaultValue3, multiple, wasMultiple);
              return;
            }
            case "textarea": {
              var _value4 = null;
              var _defaultValue4 = null;
              for (var _propKey10 in lastProps) {
                var _lastProp4 = lastProps[_propKey10];
                if (lastProps.hasOwnProperty(_propKey10) && _lastProp4 != null && !nextProps.hasOwnProperty(_propKey10)) {
                  switch (_propKey10) {
                    case "value": {
                      break;
                    }
                    case "children": {
                      break;
                    }
                    default: {
                      setProp(domElement, tag, _propKey10, null, nextProps, _lastProp4);
                    }
                  }
                }
              }
              for (var _propKey11 in nextProps) {
                var _nextProp2 = nextProps[_propKey11];
                var _lastProp5 = lastProps[_propKey11];
                if (nextProps.hasOwnProperty(_propKey11) && (_nextProp2 != null || _lastProp5 != null)) {
                  switch (_propKey11) {
                    case "value": {
                      _value4 = _nextProp2;
                      break;
                    }
                    case "defaultValue": {
                      _defaultValue4 = _nextProp2;
                      break;
                    }
                    case "children": {
                      break;
                    }
                    case "dangerouslySetInnerHTML": {
                      if (_nextProp2 != null) {
                        throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                      }
                      break;
                    }
                    default: {
                      if (_nextProp2 !== _lastProp5)
                        setProp(domElement, tag, _propKey11, _nextProp2, nextProps, _lastProp5);
                    }
                  }
                }
              }
              updateTextarea(domElement, _value4, _defaultValue4);
              return;
            }
            case "option": {
              for (var _propKey12 in lastProps) {
                var _lastProp6 = lastProps[_propKey12];
                if (lastProps.hasOwnProperty(_propKey12) && _lastProp6 != null && !nextProps.hasOwnProperty(_propKey12)) {
                  switch (_propKey12) {
                    case "selected": {
                      domElement.selected = false;
                      break;
                    }
                    default: {
                      setProp(domElement, tag, _propKey12, null, nextProps, _lastProp6);
                    }
                  }
                }
              }
              for (var _propKey13 in nextProps) {
                var _nextProp3 = nextProps[_propKey13];
                var _lastProp7 = lastProps[_propKey13];
                if (nextProps.hasOwnProperty(_propKey13) && _nextProp3 !== _lastProp7 && (_nextProp3 != null || _lastProp7 != null)) {
                  switch (_propKey13) {
                    case "selected": {
                      domElement.selected = _nextProp3 && typeof _nextProp3 !== "function" && typeof _nextProp3 !== "symbol";
                      break;
                    }
                    default: {
                      setProp(domElement, tag, _propKey13, _nextProp3, nextProps, _lastProp7);
                    }
                  }
                }
              }
              return;
            }
            case "img":
            case "link":
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "keygen":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr":
            case "menuitem": {
              for (var _propKey14 in lastProps) {
                var _lastProp8 = lastProps[_propKey14];
                if (lastProps.hasOwnProperty(_propKey14) && _lastProp8 != null && !nextProps.hasOwnProperty(_propKey14)) {
                  setProp(domElement, tag, _propKey14, null, nextProps, _lastProp8);
                }
              }
              for (var _propKey15 in nextProps) {
                var _nextProp4 = nextProps[_propKey15];
                var _lastProp9 = lastProps[_propKey15];
                if (nextProps.hasOwnProperty(_propKey15) && _nextProp4 !== _lastProp9 && (_nextProp4 != null || _lastProp9 != null)) {
                  switch (_propKey15) {
                    case "children":
                    case "dangerouslySetInnerHTML": {
                      if (_nextProp4 != null) {
                        throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                      }
                      break;
                    }
                    default: {
                      setProp(domElement, tag, _propKey15, _nextProp4, nextProps, _lastProp9);
                    }
                  }
                }
              }
              return;
            }
            default: {
              if (isCustomElement(tag)) {
                for (var _propKey16 in lastProps) {
                  var _lastProp10 = lastProps[_propKey16];
                  if (lastProps.hasOwnProperty(_propKey16) && _lastProp10 != null && !nextProps.hasOwnProperty(_propKey16)) {
                    setPropOnCustomElement(domElement, tag, _propKey16, null, nextProps, _lastProp10);
                  }
                }
                for (var _propKey17 in nextProps) {
                  var _nextProp5 = nextProps[_propKey17];
                  var _lastProp11 = lastProps[_propKey17];
                  if (nextProps.hasOwnProperty(_propKey17) && _nextProp5 !== _lastProp11 && (_nextProp5 != null || _lastProp11 != null)) {
                    setPropOnCustomElement(domElement, tag, _propKey17, _nextProp5, nextProps, _lastProp11);
                  }
                }
                return;
              }
            }
          }
          for (var _propKey18 in lastProps) {
            var _lastProp12 = lastProps[_propKey18];
            if (lastProps.hasOwnProperty(_propKey18) && _lastProp12 != null && !nextProps.hasOwnProperty(_propKey18)) {
              setProp(domElement, tag, _propKey18, null, nextProps, _lastProp12);
            }
          }
          for (var _propKey19 in nextProps) {
            var _nextProp6 = nextProps[_propKey19];
            var _lastProp13 = lastProps[_propKey19];
            if (nextProps.hasOwnProperty(_propKey19) && _nextProp6 !== _lastProp13 && (_nextProp6 != null || _lastProp13 != null)) {
              setProp(domElement, tag, _propKey19, _nextProp6, nextProps, _lastProp13);
            }
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedStyles(domElement, value) {
          if (value != null && typeof value !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
          if (canDiffStyleForHydrationWarning) {
            var expectedStyle = createDangerousStringForStyles(value);
            var serverValue = domElement.getAttribute("style");
            warnForPropDifference("style", serverValue, expectedStyle);
          }
        }
        function hydrateAttribute(domElement, propKey, attributeName, value, extraAttributes) {
          extraAttributes.delete(attributeName);
          var serverValue = domElement.getAttribute(attributeName);
          if (serverValue === null) {
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                return;
            }
          } else {
            if (value == null)
              ;
            else {
              switch (typeof value) {
                case "function":
                case "symbol":
                case "boolean":
                  break;
                default: {
                  {
                    checkAttributeStringCoercion(value, propKey);
                  }
                  if (serverValue === "" + value) {
                    return;
                  }
                }
              }
            }
          }
          warnForPropDifference(propKey, serverValue, value);
        }
        function hydrateBooleanAttribute(domElement, propKey, attributeName, value, extraAttributes) {
          extraAttributes.delete(attributeName);
          var serverValue = domElement.getAttribute(attributeName);
          if (serverValue === null) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
            }
            if (!value) {
              return;
            }
          } else {
            switch (typeof value) {
              case "function":
              case "symbol":
                break;
              default: {
                if (value) {
                  return;
                }
              }
            }
          }
          warnForPropDifference(propKey, serverValue, value);
        }
        function hydrateOverloadedBooleanAttribute(domElement, propKey, attributeName, value, extraAttributes) {
          extraAttributes.delete(attributeName);
          var serverValue = domElement.getAttribute(attributeName);
          if (serverValue === null) {
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
                return;
              default:
                if (value === false) {
                  return;
                }
            }
          } else {
            if (value == null)
              ;
            else {
              switch (typeof value) {
                case "function":
                case "symbol":
                  break;
                case "boolean":
                  if (value === true && serverValue === "") {
                    return;
                  }
                  break;
                default: {
                  {
                    checkAttributeStringCoercion(value, propKey);
                  }
                  if (serverValue === "" + value) {
                    return;
                  }
                }
              }
            }
          }
          warnForPropDifference(propKey, serverValue, value);
        }
        function hydrateBooleanishAttribute(domElement, propKey, attributeName, value, extraAttributes) {
          extraAttributes.delete(attributeName);
          var serverValue = domElement.getAttribute(attributeName);
          if (serverValue === null) {
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
                return;
            }
          } else {
            if (value == null)
              ;
            else {
              switch (typeof value) {
                case "function":
                case "symbol":
                  break;
                default: {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  if (serverValue === "" + value) {
                    return;
                  }
                }
              }
            }
          }
          warnForPropDifference(propKey, serverValue, value);
        }
        function hydrateNumericAttribute(domElement, propKey, attributeName, value, extraAttributes) {
          extraAttributes.delete(attributeName);
          var serverValue = domElement.getAttribute(attributeName);
          if (serverValue === null) {
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                return;
              default:
                if (isNaN(value)) {
                  return;
                }
            }
          } else {
            if (value == null)
              ;
            else {
              switch (typeof value) {
                case "function":
                case "symbol":
                case "boolean":
                  break;
                default: {
                  if (isNaN(value)) {
                    break;
                  }
                  {
                    checkAttributeStringCoercion(value, propKey);
                  }
                  if (serverValue === "" + value) {
                    return;
                  }
                }
              }
            }
          }
          warnForPropDifference(propKey, serverValue, value);
        }
        function hydratePositiveNumericAttribute(domElement, propKey, attributeName, value, extraAttributes) {
          extraAttributes.delete(attributeName);
          var serverValue = domElement.getAttribute(attributeName);
          if (serverValue === null) {
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                return;
              default:
                if (isNaN(value) || value < 1) {
                  return;
                }
            }
          } else {
            if (value == null)
              ;
            else {
              switch (typeof value) {
                case "function":
                case "symbol":
                case "boolean":
                  break;
                default: {
                  if (isNaN(value) || value < 1) {
                    break;
                  }
                  {
                    checkAttributeStringCoercion(value, propKey);
                  }
                  if (serverValue === "" + value) {
                    return;
                  }
                }
              }
            }
          }
          warnForPropDifference(propKey, serverValue, value);
        }
        function hydrateSanitizedAttribute(domElement, propKey, attributeName, value, extraAttributes) {
          extraAttributes.delete(attributeName);
          var serverValue = domElement.getAttribute(attributeName);
          if (serverValue === null) {
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                return;
            }
          } else {
            if (value == null)
              ;
            else {
              switch (typeof value) {
                case "function":
                case "symbol":
                case "boolean":
                  break;
                default: {
                  {
                    checkAttributeStringCoercion(value, propKey);
                  }
                  var sanitizedValue = sanitizeURL("" + value);
                  if (serverValue === sanitizedValue) {
                    return;
                  }
                }
              }
            }
          }
          warnForPropDifference(propKey, serverValue, value);
        }
        function diffHydratedCustomComponent(domElement, tag, props, hostContext, extraAttributes) {
          for (var propKey in props) {
            if (!props.hasOwnProperty(propKey)) {
              continue;
            }
            var value = props[propKey];
            if (value == null) {
              continue;
            }
            if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (typeof value !== "function") {
                warnForInvalidEventListener(propKey, value);
              }
              continue;
            }
            if (props.suppressHydrationWarning === true) {
              continue;
            }
            switch (propKey) {
              case "children":
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
              case "defaultValue":
              case "defaultChecked":
              case "innerHTML":
                continue;
              case "dangerouslySetInnerHTML":
                var serverHTML = domElement.innerHTML;
                var nextHtml = value ? value.__html : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  warnForPropDifference(propKey, serverHTML, expectedHTML);
                }
                continue;
              case "style":
                extraAttributes.delete(propKey);
                diffHydratedStyles(domElement, value);
                continue;
              case "offsetParent":
              case "offsetTop":
              case "offsetLeft":
              case "offsetWidth":
              case "offsetHeight":
              case "isContentEditable":
              case "outerText":
              case "outerHTML": {
                extraAttributes.delete(propKey.toLowerCase());
                {
                  error("Assignment to read-only property will result in a no-op: `%s`", propKey);
                }
                continue;
              }
              case "className": {
                extraAttributes.delete("class");
                var serverValue = getValueForAttributeOnCustomComponent(domElement, "class", value);
                warnForPropDifference("className", serverValue, value);
                continue;
              }
              default: {
                var hostContextDev = hostContext;
                var hostContextProd = hostContextDev.context;
                if (hostContextProd === HostContextNamespaceNone && tag !== "svg" && tag !== "math") {
                  extraAttributes.delete(propKey.toLowerCase());
                } else {
                  extraAttributes.delete(propKey);
                }
                var _serverValue = getValueForAttributeOnCustomComponent(domElement, propKey, value);
                warnForPropDifference(propKey, _serverValue, value);
              }
            }
          }
        }
        var EXPECTED_FORM_ACTION_URL = (
          // eslint-disable-next-line no-script-url
          "javascript:throw new Error('A React form was unexpectedly submitted.')"
        );
        function diffHydratedGenericElement(domElement, tag, props, hostContext, extraAttributes) {
          for (var propKey in props) {
            if (!props.hasOwnProperty(propKey)) {
              continue;
            }
            var value = props[propKey];
            if (value == null) {
              continue;
            }
            if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (typeof value !== "function") {
                warnForInvalidEventListener(propKey, value);
              }
              continue;
            }
            if (props.suppressHydrationWarning === true) {
              continue;
            }
            switch (propKey) {
              case "children":
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
              case "value":
              case "checked":
              case "selected":
              case "defaultValue":
              case "defaultChecked":
              case "innerHTML":
                continue;
              case "dangerouslySetInnerHTML":
                var serverHTML = domElement.innerHTML;
                var nextHtml = value ? value.__html : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  warnForPropDifference(propKey, serverHTML, expectedHTML);
                }
                continue;
              case "className":
                hydrateAttribute(domElement, propKey, "class", value, extraAttributes);
                continue;
              case "tabIndex":
                hydrateAttribute(domElement, propKey, "tabindex", value, extraAttributes);
                continue;
              case "style":
                extraAttributes.delete(propKey);
                diffHydratedStyles(domElement, value);
                continue;
              case "multiple": {
                extraAttributes.delete(propKey);
                var serverValue = domElement.multiple;
                warnForPropDifference(propKey, serverValue, value);
                continue;
              }
              case "muted": {
                extraAttributes.delete(propKey);
                var _serverValue2 = domElement.muted;
                warnForPropDifference(propKey, _serverValue2, value);
                continue;
              }
              case "autoFocus": {
                extraAttributes.delete("autofocus");
                var _serverValue3 = domElement.autofocus;
                warnForPropDifference(propKey, _serverValue3, value);
                continue;
              }
              case "src":
              case "href":
                {
                  if (value === "") {
                    {
                      if (propKey === "src") {
                        error('An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', propKey, propKey);
                      } else {
                        error('An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', propKey, propKey);
                      }
                    }
                    hydrateSanitizedAttribute(domElement, propKey, propKey, null, extraAttributes);
                    continue;
                  }
                }
                hydrateSanitizedAttribute(domElement, propKey, propKey, value, extraAttributes);
                continue;
              case "action":
              case "formAction":
                {
                  var _serverValue4 = domElement.getAttribute(propKey);
                  if (typeof value === "function") {
                    extraAttributes.delete(propKey.toLowerCase());
                    if (propKey === "formAction") {
                      extraAttributes.delete("name");
                      extraAttributes.delete("formenctype");
                      extraAttributes.delete("formmethod");
                      extraAttributes.delete("formtarget");
                    } else {
                      extraAttributes.delete("enctype");
                      extraAttributes.delete("method");
                      extraAttributes.delete("target");
                    }
                    continue;
                  } else if (_serverValue4 === EXPECTED_FORM_ACTION_URL) {
                    extraAttributes.delete(propKey.toLowerCase());
                    warnForPropDifference(propKey, "function", value);
                    continue;
                  }
                }
                hydrateSanitizedAttribute(domElement, propKey, propKey.toLowerCase(), value, extraAttributes);
                continue;
              case "xlinkHref":
                hydrateSanitizedAttribute(domElement, propKey, "xlink:href", value, extraAttributes);
                continue;
              case "contentEditable": {
                hydrateBooleanishAttribute(domElement, propKey, "contenteditable", value, extraAttributes);
                continue;
              }
              case "spellCheck": {
                hydrateBooleanishAttribute(domElement, propKey, "spellcheck", value, extraAttributes);
                continue;
              }
              case "draggable":
              case "autoReverse":
              case "externalResourcesRequired":
              case "focusable":
              case "preserveAlpha": {
                hydrateBooleanishAttribute(domElement, propKey, propKey, value, extraAttributes);
                continue;
              }
              case "allowFullScreen":
              case "async":
              case "autoPlay":
              case "controls":
              case "default":
              case "defer":
              case "disabled":
              case "disablePictureInPicture":
              case "disableRemotePlayback":
              case "formNoValidate":
              case "hidden":
              case "loop":
              case "noModule":
              case "noValidate":
              case "open":
              case "playsInline":
              case "readOnly":
              case "required":
              case "reversed":
              case "scoped":
              case "seamless":
              case "itemScope": {
                hydrateBooleanAttribute(domElement, propKey, propKey.toLowerCase(), value, extraAttributes);
                continue;
              }
              case "capture":
              case "download": {
                hydrateOverloadedBooleanAttribute(domElement, propKey, propKey, value, extraAttributes);
                continue;
              }
              case "cols":
              case "rows":
              case "size":
              case "span": {
                hydratePositiveNumericAttribute(domElement, propKey, propKey, value, extraAttributes);
                continue;
              }
              case "rowSpan": {
                hydrateNumericAttribute(domElement, propKey, "rowspan", value, extraAttributes);
                continue;
              }
              case "start": {
                hydrateNumericAttribute(domElement, propKey, propKey, value, extraAttributes);
                continue;
              }
              case "xHeight":
                hydrateAttribute(domElement, propKey, "x-height", value, extraAttributes);
                continue;
              case "xlinkActuate":
                hydrateAttribute(domElement, propKey, "xlink:actuate", value, extraAttributes);
                continue;
              case "xlinkArcrole":
                hydrateAttribute(domElement, propKey, "xlink:arcrole", value, extraAttributes);
                continue;
              case "xlinkRole":
                hydrateAttribute(domElement, propKey, "xlink:role", value, extraAttributes);
                continue;
              case "xlinkShow":
                hydrateAttribute(domElement, propKey, "xlink:show", value, extraAttributes);
                continue;
              case "xlinkTitle":
                hydrateAttribute(domElement, propKey, "xlink:title", value, extraAttributes);
                continue;
              case "xlinkType":
                hydrateAttribute(domElement, propKey, "xlink:type", value, extraAttributes);
                continue;
              case "xmlBase":
                hydrateAttribute(domElement, propKey, "xml:base", value, extraAttributes);
                continue;
              case "xmlLang":
                hydrateAttribute(domElement, propKey, "xml:lang", value, extraAttributes);
                continue;
              case "xmlSpace":
                hydrateAttribute(domElement, propKey, "xml:space", value, extraAttributes);
                continue;
              default: {
                if (
                  // shouldIgnoreAttribute
                  // We have already filtered out null/undefined and reserved words.
                  propKey.length > 2 && (propKey[0] === "o" || propKey[0] === "O") && (propKey[1] === "n" || propKey[1] === "N")
                ) {
                  continue;
                }
                var attributeName = getAttributeAlias(propKey);
                var isMismatchDueToBadCasing = false;
                var hostContextDev = hostContext;
                var hostContextProd = hostContextDev.context;
                if (hostContextProd === HostContextNamespaceNone && tag !== "svg" && tag !== "math") {
                  extraAttributes.delete(attributeName.toLowerCase());
                } else {
                  var standardName = getPossibleStandardName(propKey);
                  if (standardName !== null && standardName !== propKey) {
                    isMismatchDueToBadCasing = true;
                    extraAttributes.delete(standardName);
                  }
                  extraAttributes.delete(attributeName);
                }
                var _serverValue5 = getValueForAttribute(domElement, attributeName, value);
                if (!isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, _serverValue5, value);
                }
              }
            }
          }
        }
        function diffHydratedProperties(domElement, tag, props, isConcurrentMode, shouldWarnDev, hostContext) {
          {
            validatePropertiesInDevelopment(tag, props);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              {
                checkControlledValueProps("input", props);
              }
              listenToNonDelegatedEvent("invalid", domElement);
              validateInputProps(domElement, props);
              initInput(domElement, props.value, props.defaultValue, props.checked, props.defaultChecked, props.type, props.name, true);
              track(domElement);
              break;
            case "option":
              validateOptionProps(domElement, props);
              break;
            case "select":
              {
                checkControlledValueProps("select", props);
              }
              listenToNonDelegatedEvent("invalid", domElement);
              validateSelectProps(domElement, props);
              break;
            case "textarea":
              {
                checkControlledValueProps("textarea", props);
              }
              listenToNonDelegatedEvent("invalid", domElement);
              validateTextareaProps(domElement, props);
              initTextarea(domElement, props.value, props.defaultValue, props.children);
              track(domElement);
              break;
          }
          var updatePayload = null;
          var children = props.children;
          if (typeof children === "string" || typeof children === "number") {
            if (domElement.textContent !== "" + children) {
              if (props.suppressHydrationWarning !== true) {
                checkForUnmatchedText(domElement.textContent, children, isConcurrentMode, shouldWarnDev);
              }
              if (!isConcurrentMode || !enableClientRenderFallbackOnTextMismatch) {
                {
                  if (tag !== "body") {
                    domElement.textContent = children;
                  }
                }
              }
            }
          }
          if (props.onScroll != null) {
            listenToNonDelegatedEvent("scroll", domElement);
          }
          if (props.onClick != null) {
            trapClickOnNonInteractiveElement(domElement);
          }
          if (shouldWarnDev) {
            var extraAttributes = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i7 = 0; _i7 < attributes.length; _i7++) {
              var name = attributes[_i7].name.toLowerCase();
              switch (name) {
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributes.add(attributes[_i7].name);
              }
            }
            if (isCustomElement(tag)) {
              diffHydratedCustomComponent(domElement, tag, props, hostContext, extraAttributes);
            } else {
              diffHydratedGenericElement(domElement, tag, props, hostContext, extraAttributes);
            }
            if (extraAttributes.size > 0 && props.suppressHydrationWarning !== true) {
              warnForExtraAttributes(extraAttributes);
            }
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledInputState(domElement, props);
              return;
            case "textarea":
              restoreControlledTextareaState(domElement, props);
              return;
            case "select":
              restoreControlledSelectState(domElement, props);
              return;
          }
        }
        function validateLinkPropsForStyleResource(props) {
          {
            var href = props.href, onLoad = props.onLoad, onError = props.onError, disabled = props.disabled;
            var includedProps = [];
            if (onLoad)
              includedProps.push("`onLoad`");
            if (onError)
              includedProps.push("`onError`");
            if (disabled != null)
              includedProps.push("`disabled`");
            var includedPropsPhrase = propNamesListJoin(includedProps, "and");
            includedPropsPhrase += includedProps.length === 1 ? " prop" : " props";
            var withArticlePhrase = includedProps.length === 1 ? "an " + includedPropsPhrase : "the " + includedPropsPhrase;
            if (includedProps.length) {
              error('React encountered a <link rel="stylesheet" href="%s" ... /> with a `precedence` prop that also included %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.', href, withArticlePhrase, includedPropsPhrase);
              return true;
            }
          }
          return false;
        }
        function propNamesListJoin(list, combinator) {
          switch (list.length) {
            case 0:
              return "";
            case 1:
              return list[0];
            case 2:
              return list[0] + " " + combinator + " " + list[1];
            default:
              return list.slice(0, -1).join(", ") + ", " + combinator + " " + list[list.length - 1];
          }
        }
        function validatePreinitArguments(href, options2) {
          {
            if (!href || typeof href !== "string") {
              var typeOfArg = getValueDescriptorExpectingObjectForWarning(href);
              error("ReactDOM.preinit() expected the first argument to be a string representing an href but found %s instead.", typeOfArg);
            } else if (typeof options2 !== "object" || options2 === null) {
              var _typeOfArg = getValueDescriptorExpectingObjectForWarning(options2);
              error('ReactDOM.preinit() expected the second argument to be an options argument containing at least an "as" property specifying the Resource type. It found %s instead. The href for the preload call where this warning originated is "%s".', _typeOfArg, href);
            } else {
              var as = options2.as;
              switch (as) {
                case "style":
                case "script": {
                  break;
                }
                default: {
                  var typeOfAs = getValueDescriptorExpectingEnumForWarning(as);
                  error('ReactDOM.preinit() expected the second argument to be an options argument containing at least an "as" property specifying the Resource type. It found %s instead. Currently, valid resource types for for preinit are "style" and "script". The href for the preinit call where this warning originated is "%s".', typeOfAs, href);
                }
              }
            }
          }
        }
        function getValueDescriptorExpectingObjectForWarning(thing) {
          return thing === null ? "`null`" : thing === void 0 ? "`undefined`" : thing === "" ? "an empty string" : 'something with type "' + typeof thing + '"';
        }
        function getValueDescriptorExpectingEnumForWarning(thing) {
          return thing === null ? "`null`" : thing === void 0 ? "`undefined`" : thing === "" ? "an empty string" : typeof thing === "string" ? JSON.stringify(thing) : 'something with type "' + typeof thing + '"';
        }
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE = "style";
        var HostContextNamespaceNone = 0;
        var HostContextNamespaceSvg = 1;
        var HostContextNamespaceMath = 2;
        var eventsEnabled = null;
        var selectionInformation = null;
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function getRootHostContext(rootContainerInstance) {
          var type;
          var context;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root2 = rootContainerInstance.documentElement;
              if (root2) {
                var namespaceURI = root2.namespaceURI;
                context = namespaceURI ? getOwnHostContext(namespaceURI) : HostContextNamespaceNone;
              } else {
                context = HostContextNamespaceNone;
              }
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              type = container.tagName;
              var _namespaceURI = container.namespaceURI;
              if (!_namespaceURI) {
                switch (type) {
                  case "svg":
                    context = HostContextNamespaceSvg;
                    break;
                  case "math":
                    context = HostContextNamespaceMath;
                    break;
                  default:
                    context = HostContextNamespaceNone;
                    break;
                }
              } else {
                var ownContext = getOwnHostContext(_namespaceURI);
                context = getChildHostContextProd(ownContext, type);
              }
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfoDev(null, validatedTag);
            return {
              context,
              ancestorInfo
            };
          }
        }
        function getOwnHostContext(namespaceURI) {
          switch (namespaceURI) {
            case SVG_NAMESPACE:
              return HostContextNamespaceSvg;
            case MATH_NAMESPACE:
              return HostContextNamespaceMath;
            default:
              return HostContextNamespaceNone;
          }
        }
        function getChildHostContextProd(parentNamespace, type) {
          if (parentNamespace === HostContextNamespaceNone) {
            switch (type) {
              case "svg":
                return HostContextNamespaceSvg;
              case "math":
                return HostContextNamespaceMath;
              default:
                return HostContextNamespaceNone;
            }
          }
          if (parentNamespace === HostContextNamespaceSvg && type === "foreignObject") {
            return HostContextNamespaceNone;
          }
          return parentNamespace;
        }
        function getChildHostContext(parentHostContext, type) {
          {
            var parentHostContextDev = parentHostContext;
            var context = getChildHostContextProd(parentHostContextDev.context, type);
            var ancestorInfo = updatedAncestorInfoDev(parentHostContextDev.ancestorInfo, type);
            return {
              context,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createHoistableInstance(type, props, rootContainerInstance, internalInstanceHandle) {
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerInstance);
          var domElement = ownerDocument.createElement(type);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          setInitialProperties(domElement, type, props);
          markNodeAsHoistable(domElement);
          return domElement;
        }
        var warnedUnknownTags = {
          // There are working polyfills for <dialog>. Let people use it.
          dialog: true,
          // Electron ships a custom <webview> tag to display external web content in
          // an isolated frame and process.
          // This tag is not present in non Electron environments such as JSDom which
          // is often used for testing purposes.
          // @see https://electronjs.org/docs/api/webview-tag
          webview: true
        };
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var hostContextProd;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, hostContextDev.ancestorInfo);
            hostContextProd = hostContextDev.context;
          }
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerInstance);
          var domElement;
          switch (hostContextProd) {
            case HostContextNamespaceSvg:
              domElement = ownerDocument.createElementNS(SVG_NAMESPACE, type);
              break;
            case HostContextNamespaceMath:
              domElement = ownerDocument.createElementNS(MATH_NAMESPACE, type);
              break;
            default:
              switch (type) {
                case "svg": {
                  domElement = ownerDocument.createElementNS(SVG_NAMESPACE, type);
                  break;
                }
                case "math": {
                  domElement = ownerDocument.createElementNS(MATH_NAMESPACE, type);
                  break;
                }
                case "script": {
                  var div = ownerDocument.createElement("div");
                  div.innerHTML = "<script></script>";
                  var firstChild = div.firstChild;
                  domElement = div.removeChild(firstChild);
                  break;
                }
                case "select": {
                  if (typeof props.is === "string") {
                    domElement = ownerDocument.createElement("select", {
                      is: props.is
                    });
                  } else {
                    domElement = ownerDocument.createElement("select");
                  }
                  if (props.multiple) {
                    domElement.multiple = true;
                  } else if (props.size) {
                    domElement.size = props.size;
                  }
                  break;
                }
                default: {
                  if (typeof props.is === "string") {
                    domElement = ownerDocument.createElement(type, {
                      is: props.is
                    });
                  } else {
                    domElement = ownerDocument.createElement(type);
                  }
                  {
                    if (type.indexOf("-") === -1) {
                      if (type !== type.toLowerCase()) {
                        error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                      }
                      if (
                        // $FlowFixMe[method-unbinding]
                        Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)
                      ) {
                        warnedUnknownTags[type] = true;
                        error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                      }
                    }
                  }
                }
              }
          }
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, hostContext) {
          setInitialProperties(domElement, type, props);
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
            case "img":
              return true;
            default:
              return false;
          }
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            var ancestor = hostContextDev.ancestorInfo.current;
            if (ancestor != null) {
              validateTextNesting(text, ancestor.tag);
            }
          }
          var textNode = getOwnerDocumentFromRootContainer(rootContainerInstance).createTextNode(text);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        function shouldAttemptEagerTransition() {
          return window.event && window.event.type === "popstate";
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === "function" ? Promise : void 0;
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout;
        function handleErrorInNextTick(error2) {
          setTimeout(function() {
            throw error2;
          });
        }
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case "img": {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          {
            updateProperties(domElement, type, oldProps, newProps);
          }
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data = nextNode.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                depth++;
              }
            }
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
          if (container.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container.parentNode, suspenseInstance);
          } else if (container.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container, suspenseInstance);
          } else
            ;
          retryIfBlockedOn(container);
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = display == null || typeof display === "boolean" ? "" : (
            // The value would've errored already if it wasn't safe.
            // eslint-disable-next-line react-internal/safe-string-coercion
            ("" + display).trim()
          );
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          {
            var nodeType = container.nodeType;
            if (nodeType === DOCUMENT_NODE) {
              clearContainerSparingly(container);
            } else if (nodeType === ELEMENT_NODE) {
              switch (container.nodeName) {
                case "HEAD":
                case "HTML":
                case "BODY":
                  clearContainerSparingly(container);
                  return;
                default: {
                  container.textContent = "";
                }
              }
            }
          }
        }
        function clearContainerSparingly(container) {
          var node;
          var nextNode = container.firstChild;
          if (nextNode && nextNode.nodeType === DOCUMENT_TYPE_NODE) {
            nextNode = nextNode.nextSibling;
          }
          while (nextNode) {
            node = nextNode;
            nextNode = nextNode.nextSibling;
            switch (node.nodeName) {
              case "HTML":
              case "HEAD":
              case "BODY": {
                var element = node;
                clearContainerSparingly(element);
                detachDeletedInstance(element);
                continue;
              }
              case "SCRIPT":
              case "STYLE": {
                continue;
              }
              case "LINK": {
                if (node.rel.toLowerCase() === "stylesheet") {
                  continue;
                }
              }
            }
            container.removeChild(node);
          }
          return;
        }
        function isHydratableText(text) {
          return text !== "";
        }
        function canHydrateInstance(instance, type, props, inRootOrSingleton) {
          while (instance.nodeType === ELEMENT_NODE) {
            var element = instance;
            var anyProps = props;
            if (element.nodeName.toLowerCase() !== type.toLowerCase()) {
              if (!inRootOrSingleton || !enableHostSingletons) {
                if (element.nodeName === "INPUT" && element.type === "hidden")
                  ;
                else {
                  return null;
                }
              }
            } else if (!inRootOrSingleton || !enableHostSingletons) {
              if (type === "input" && element.type === "hidden") {
                {
                  checkAttributeStringCoercion(anyProps.name, "name");
                }
                var name = anyProps.name == null ? null : "" + anyProps.name;
                if (anyProps.type !== "hidden" || element.getAttribute("name") !== name)
                  ;
                else {
                  return element;
                }
              } else {
                return element;
              }
            } else if (isMarkedHoistable(element))
              ;
            else {
              switch (type) {
                case "meta": {
                  if (!element.hasAttribute("itemprop")) {
                    break;
                  }
                  return element;
                }
                case "link": {
                  var rel = element.getAttribute("rel");
                  if (rel === "stylesheet" && element.hasAttribute("data-precedence")) {
                    break;
                  } else if (rel !== anyProps.rel || element.getAttribute("href") !== (anyProps.href == null ? null : anyProps.href) || element.getAttribute("crossorigin") !== (anyProps.crossOrigin == null ? null : anyProps.crossOrigin) || element.getAttribute("title") !== (anyProps.title == null ? null : anyProps.title)) {
                    break;
                  }
                  return element;
                }
                case "style": {
                  if (element.hasAttribute("data-precedence")) {
                    break;
                  }
                  return element;
                }
                case "script": {
                  var srcAttr = element.getAttribute("src");
                  if (srcAttr !== (anyProps.src == null ? null : anyProps.src) || element.getAttribute("type") !== (anyProps.type == null ? null : anyProps.type) || element.getAttribute("crossorigin") !== (anyProps.crossOrigin == null ? null : anyProps.crossOrigin)) {
                    if (srcAttr && element.hasAttribute("async") && !element.hasAttribute("itemprop")) {
                      break;
                    }
                  }
                  return element;
                }
                default: {
                  return element;
                }
              }
            }
            var nextInstance = getNextHydratableSibling(element);
            if (nextInstance === null) {
              break;
            }
            instance = nextInstance;
          }
          return null;
        }
        function canHydrateTextInstance(instance, text, inRootOrSingleton) {
          if (text === "")
            return null;
          while (instance.nodeType !== TEXT_NODE) {
            if (!inRootOrSingleton || !enableHostSingletons) {
              return null;
            }
            var nextInstance = getNextHydratableSibling(instance);
            if (nextInstance === null) {
              return null;
            }
            instance = nextInstance;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance, inRootOrSingleton) {
          while (instance.nodeType !== COMMENT_NODE) {
            if (!inRootOrSingleton || !enableHostSingletons) {
              return null;
            }
            var nextInstance = getNextHydratableSibling(instance);
            if (nextInstance === null) {
              return null;
            }
            instance = nextInstance;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getSuspenseInstanceFallbackErrorDetails(instance) {
          var dataset = instance.nextSibling && instance.nextSibling.dataset;
          var digest, message, stack;
          if (dataset) {
            digest = dataset.dgst;
            {
              message = dataset.msg;
              stack = dataset.stck;
            }
          }
          {
            return {
              message,
              digest,
              stack
            };
          }
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          instance._reactRetry = callback;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node.data;
              if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(instance, type, props, hostContext, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(instance, type, props, isConcurrentMode, shouldWarnDev, hostContext);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          return diffHydratedText(textInstance, text);
        }
        function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== "form" && parentType !== "button";
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode, shouldWarnDev) {
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode, shouldWarnDev) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
        }
        function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedElement(parentNode, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedText(parentNode, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
          }
        }
        function isHostSingletonType(type) {
          return type === "html" || type === "head" || type === "body";
        }
        function resolveSingletonInstance(type, props, rootContainerInstance, hostContext, validateDOMNestingDev) {
          {
            var hostContextDev = hostContext;
            if (validateDOMNestingDev) {
              validateDOMNesting(type, hostContextDev.ancestorInfo);
            }
          }
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerInstance);
          switch (type) {
            case "html": {
              var documentElement = ownerDocument.documentElement;
              if (!documentElement) {
                throw new Error("React expected an <html> element (document.documentElement) to exist in the Document but one was not found. React never removes the documentElement for any Document it renders into so the cause is likely in some other script running on this page.");
              }
              return documentElement;
            }
            case "head": {
              var head = ownerDocument.head;
              if (!head) {
                throw new Error("React expected a <head> element (document.head) to exist in the Document but one was not found. React never removes the head for any Document it renders into so the cause is likely in some other script running on this page.");
              }
              return head;
            }
            case "body": {
              var body = ownerDocument.body;
              if (!body) {
                throw new Error("React expected a <body> element (document.body) to exist in the Document but one was not found. React never removes the body for any Document it renders into so the cause is likely in some other script running on this page.");
              }
              return body;
            }
            default: {
              throw new Error("resolveSingletonInstance was called with an element type that is not supported. This is a bug in React.");
            }
          }
        }
        function acquireSingletonInstance(type, props, instance, internalInstanceHandle) {
          {
            var currentInstanceHandle = getInstanceFromNode(instance);
            if (currentInstanceHandle) {
              var tagName = instance.tagName.toLowerCase();
              error("You are mounting a new %s component when a previous one has not first unmounted. It is an error to render more than one %s component at a time and attributes and children of these components will likely fail in unpredictable ways. Please only render a single instance of <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.", tagName, tagName, tagName);
            }
            switch (type) {
              case "html":
              case "head":
              case "body": {
                break;
              }
              default: {
                error("acquireSingletonInstance was called with an element type that is not supported. This is a bug in React.");
              }
            }
          }
          var attributes = instance.attributes;
          while (attributes.length) {
            instance.removeAttributeNode(attributes[0]);
          }
          setInitialProperties(instance, type, props);
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
        }
        function releaseSingletonInstance(instance) {
          var attributes = instance.attributes;
          while (attributes.length) {
            instance.removeAttributeNode(attributes[0]);
          }
          detachDeletedInstance(instance);
        }
        function clearSingleton(instance) {
          var element = instance;
          var node = element.firstChild;
          while (node) {
            var nextNode = node.nextSibling;
            var nodeName = node.nodeName;
            if (isMarkedHoistable(node) || nodeName === "HEAD" || nodeName === "BODY" || nodeName === "SCRIPT" || nodeName === "STYLE" || nodeName === "LINK" && node.rel.toLowerCase() === "stylesheet")
              ;
            else {
              element.removeChild(node);
            }
            node = nextNode;
          }
          return;
        }
        var NotLoaded = (
          /*       */
          0
        );
        var Loaded = (
          /*          */
          1
        );
        var Errored = (
          /*         */
          2
        );
        var Settled = (
          /*         */
          3
        );
        var Inserted = (
          /*        */
          4
        );
        function prepareToCommitHoistables() {
          tagCaches = null;
        }
        var preloadPropsMap = /* @__PURE__ */ new Map();
        var preconnectsSet = /* @__PURE__ */ new Set();
        function getHoistableRoot(container) {
          return typeof container.getRootNode === "function" ? (
            /* $FlowFixMe[incompatible-return] Flow types this as returning a `Node`,
             * but it's either a `Document` or `ShadowRoot`. */
            container.getRootNode()
          ) : container.ownerDocument;
        }
        function getCurrentResourceRoot() {
          var currentContainer = getCurrentRootHostContainer();
          return currentContainer ? getHoistableRoot(currentContainer) : null;
        }
        function getDocumentFromRoot(root2) {
          return root2.ownerDocument || root2;
        }
        var ReactDOMClientDispatcher = {
          prefetchDNS: prefetchDNS$1,
          preconnect: preconnect$1,
          preload: preload$1,
          preinit: preinit$1
        };
        function getDocumentForImperativeFloatMethods() {
          return document;
        }
        function preconnectAs(rel, crossOrigin, href) {
          var ownerDocument = getDocumentForImperativeFloatMethods();
          if (typeof href === "string" && href) {
            var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
            var key = 'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
            if (typeof crossOrigin === "string") {
              key += '[crossorigin="' + crossOrigin + '"]';
            }
            if (!preconnectsSet.has(key)) {
              preconnectsSet.add(key);
              var preconnectProps = {
                rel,
                crossOrigin,
                href
              };
              if (null === ownerDocument.querySelector(key)) {
                var instance = ownerDocument.createElement("link");
                setInitialProperties(instance, "link", preconnectProps);
                markNodeAsHoistable(instance);
                ownerDocument.head.appendChild(instance);
              }
            }
          }
        }
        function prefetchDNS$1(href, options2) {
          {
            if (typeof href !== "string" || !href) {
              error("ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
            } else if (options2 != null) {
              if (typeof options2 === "object" && hasOwnProperty.call(options2, "crossOrigin")) {
                error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options2));
              } else {
                error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options2));
              }
            }
          }
          preconnectAs("dns-prefetch", null, href);
        }
        function preconnect$1(href, options2) {
          {
            if (typeof href !== "string" || !href) {
              error("ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
            } else if (options2 != null && typeof options2 !== "object") {
              error("ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.", getValueDescriptorExpectingEnumForWarning(options2));
            } else if (options2 != null && typeof options2.crossOrigin !== "string") {
              error("ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.", getValueDescriptorExpectingObjectForWarning(options2.crossOrigin));
            }
          }
          var crossOrigin = options2 == null || typeof options2.crossOrigin !== "string" ? null : options2.crossOrigin === "use-credentials" ? "use-credentials" : "";
          preconnectAs("preconnect", crossOrigin, href);
        }
        function preload$1(href, options2) {
          {
            var encountered = "";
            if (typeof href !== "string" || !href) {
              encountered += "The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".";
            }
            if (options2 == null || typeof options2 !== "object") {
              encountered += "The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options2) + ".";
            } else if (typeof options2.as !== "string" || !options2.as) {
              encountered += "The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options2.as) + ".";
            }
            if (encountered) {
              error('ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag. %s', encountered);
            }
          }
          var ownerDocument = getDocumentForImperativeFloatMethods();
          if (typeof href === "string" && href && typeof options2 === "object" && options2 !== null && typeof options2.as === "string" && options2.as && ownerDocument) {
            var as = options2.as;
            var preloadSelector = 'link[rel="preload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"]';
            if (as === "image") {
              var imageSrcSet = options2.imageSrcSet, imageSizes = options2.imageSizes;
              if (typeof imageSrcSet === "string" && imageSrcSet !== "") {
                preloadSelector += '[imagesrcset="' + escapeSelectorAttributeValueInsideDoubleQuotes(imageSrcSet) + '"]';
                if (typeof imageSizes === "string") {
                  preloadSelector += '[imagesizes="' + escapeSelectorAttributeValueInsideDoubleQuotes(imageSizes) + '"]';
                }
              } else {
                preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]';
              }
            } else {
              preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]';
            }
            var key = preloadSelector;
            switch (as) {
              case "style":
                key = getStyleKey(href);
                break;
              case "script":
                key = getScriptKey(href);
                break;
            }
            if (!preloadPropsMap.has(key)) {
              var preloadProps = preloadPropsFromPreloadOptions(href, as, options2);
              preloadPropsMap.set(key, preloadProps);
              if (null === ownerDocument.querySelector(preloadSelector)) {
                if (as === "style" && ownerDocument.querySelector(getStylesheetSelectorFromKey(key))) {
                  return;
                } else if (as === "script" && ownerDocument.querySelector(getScriptSelectorFromKey(key))) {
                  return;
                }
                var instance = ownerDocument.createElement("link");
                setInitialProperties(instance, "link", preloadProps);
                markNodeAsHoistable(instance);
                ownerDocument.head.appendChild(instance);
              }
            }
          }
        }
        function preloadPropsFromPreloadOptions(href, as, options2) {
          return {
            rel: "preload",
            as,
            // There is a bug in Safari where imageSrcSet is not respected on preload links
            // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.
            // This harms older browers that do not support imageSrcSet by making their preloads not work
            // but this population is shrinking fast and is already small so we accept this tradeoff.
            href: as === "image" && options2.imageSrcSet ? void 0 : href,
            crossOrigin: as === "font" ? "" : options2.crossOrigin,
            integrity: options2.integrity,
            type: options2.type,
            nonce: options2.nonce,
            fetchPriority: options2.fetchPriority,
            imageSrcSet: options2.imageSrcSet,
            imageSizes: options2.imageSizes
          };
        }
        function preinit$1(href, options2) {
          {
            validatePreinitArguments(href, options2);
          }
          var ownerDocument = getDocumentForImperativeFloatMethods();
          if (typeof href === "string" && href && typeof options2 === "object" && options2 !== null) {
            var as = options2.as;
            switch (as) {
              case "style": {
                var styles = getResourcesFromRoot(ownerDocument).hoistableStyles;
                var key = getStyleKey(href);
                var precedence = options2.precedence || "default";
                var resource = styles.get(key);
                if (resource) {
                  return;
                }
                var state = {
                  loading: NotLoaded,
                  preload: null
                };
                var instance = ownerDocument.querySelector(getStylesheetSelectorFromKey(key));
                if (instance) {
                  state.loading = Loaded;
                } else {
                  var stylesheetProps = stylesheetPropsFromPreinitOptions(href, precedence, options2);
                  var preloadProps = preloadPropsMap.get(key);
                  if (preloadProps) {
                    adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps);
                  }
                  var link = instance = ownerDocument.createElement("link");
                  markNodeAsHoistable(link);
                  setInitialProperties(link, "link", stylesheetProps);
                  link._p = new Promise(function(resolve, reject) {
                    link.onload = resolve;
                    link.onerror = reject;
                  });
                  link.addEventListener("load", function() {
                    state.loading |= Loaded;
                  });
                  link.addEventListener("error", function() {
                    state.loading |= Errored;
                  });
                  state.loading |= Inserted;
                  insertStylesheet(instance, precedence, ownerDocument);
                }
                resource = {
                  type: "stylesheet",
                  instance,
                  count: 1,
                  state
                };
                styles.set(key, resource);
                return;
              }
              case "script": {
                var src = href;
                var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts;
                var _key = getScriptKey(src);
                var _resource = scripts.get(_key);
                if (_resource) {
                  return;
                }
                var _instance = ownerDocument.querySelector(getScriptSelectorFromKey(_key));
                if (!_instance) {
                  var scriptProps = scriptPropsFromPreinitOptions(src, options2);
                  var _preloadProps = preloadPropsMap.get(_key);
                  if (_preloadProps) {
                    adoptPreloadPropsForScript(scriptProps, _preloadProps);
                  }
                  _instance = ownerDocument.createElement("script");
                  markNodeAsHoistable(_instance);
                  setInitialProperties(_instance, "link", scriptProps);
                  ownerDocument.head.appendChild(_instance);
                }
                _resource = {
                  type: "script",
                  instance: _instance,
                  count: 1,
                  state: null
                };
                scripts.set(_key, _resource);
                return;
              }
            }
          }
        }
        function stylesheetPropsFromPreinitOptions(href, precedence, options2) {
          return {
            rel: "stylesheet",
            href,
            "data-precedence": precedence,
            crossOrigin: options2.crossOrigin,
            integrity: options2.integrity,
            fetchPriority: options2.fetchPriority
          };
        }
        function scriptPropsFromPreinitOptions(src, options2) {
          return {
            src,
            async: true,
            crossOrigin: options2.crossOrigin,
            integrity: options2.integrity,
            nonce: options2.nonce,
            fetchPriority: options2.fetchPriority
          };
        }
        function getResource(type, currentProps, pendingProps) {
          var resourceRoot = getCurrentResourceRoot();
          if (!resourceRoot) {
            throw new Error('"resourceRoot" was expected to exist. This is a bug in React.');
          }
          switch (type) {
            case "meta":
            case "title": {
              return null;
            }
            case "style": {
              if (typeof pendingProps.precedence === "string" && typeof pendingProps.href === "string") {
                var key = getStyleKey(pendingProps.href);
                var styles = getResourcesFromRoot(resourceRoot).hoistableStyles;
                var resource = styles.get(key);
                if (!resource) {
                  resource = {
                    type: "style",
                    instance: null,
                    count: 0,
                    state: null
                  };
                  styles.set(key, resource);
                }
                return resource;
              }
              return {
                type: "void",
                instance: null,
                count: 0,
                state: null
              };
            }
            case "link": {
              if (pendingProps.rel === "stylesheet" && typeof pendingProps.href === "string" && typeof pendingProps.precedence === "string") {
                var qualifiedProps = pendingProps;
                var _key2 = getStyleKey(qualifiedProps.href);
                var _styles = getResourcesFromRoot(resourceRoot).hoistableStyles;
                var _resource2 = _styles.get(_key2);
                if (!_resource2) {
                  var ownerDocument = getDocumentFromRoot(resourceRoot);
                  _resource2 = {
                    type: "stylesheet",
                    instance: null,
                    count: 0,
                    state: {
                      loading: NotLoaded,
                      preload: null
                    }
                  };
                  _styles.set(_key2, _resource2);
                  if (!preloadPropsMap.has(_key2)) {
                    preloadStylesheet(ownerDocument, _key2, preloadPropsFromStylesheet(qualifiedProps), _resource2.state);
                  }
                }
                return _resource2;
              }
              return null;
            }
            case "script": {
              if (typeof pendingProps.src === "string" && pendingProps.async === true) {
                var scriptProps = pendingProps;
                var _key3 = getScriptKey(scriptProps.src);
                var scripts = getResourcesFromRoot(resourceRoot).hoistableScripts;
                var _resource3 = scripts.get(_key3);
                if (!_resource3) {
                  _resource3 = {
                    type: "script",
                    instance: null,
                    count: 0,
                    state: null
                  };
                  scripts.set(_key3, _resource3);
                }
                return _resource3;
              }
              return {
                type: "void",
                instance: null,
                count: 0,
                state: null
              };
            }
            default: {
              throw new Error('getResource encountered a type it did not expect: "' + type + '". this is a bug in React.');
            }
          }
        }
        function styleTagPropsFromRawProps(rawProps) {
          return assign({}, rawProps, {
            "data-href": rawProps.href,
            "data-precedence": rawProps.precedence,
            href: null,
            precedence: null
          });
        }
        function getStyleKey(href) {
          var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
          return 'href="' + limitedEscapedHref + '"';
        }
        function getStyleTagSelector(href) {
          var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
          return 'style[data-href~="' + limitedEscapedHref + '"]';
        }
        function getStylesheetSelectorFromKey(key) {
          return 'link[rel="stylesheet"][' + key + "]";
        }
        function getPreloadStylesheetSelectorFromKey(key) {
          return 'link[rel="preload"][as="style"][' + key + "]";
        }
        function stylesheetPropsFromRawProps(rawProps) {
          return assign({}, rawProps, {
            "data-precedence": rawProps.precedence,
            precedence: null
          });
        }
        function preloadStylesheet(ownerDocument, key, preloadProps, state) {
          preloadPropsMap.set(key, preloadProps);
          if (!ownerDocument.querySelector(getStylesheetSelectorFromKey(key))) {
            var preloadEl = ownerDocument.querySelector(getPreloadStylesheetSelectorFromKey(key));
            if (preloadEl) {
              state.loading = Loaded;
            } else {
              var instance = ownerDocument.createElement("link");
              state.preload = instance;
              instance.addEventListener("load", function() {
                return state.loading |= Loaded;
              });
              instance.addEventListener("error", function() {
                return state.loading |= Errored;
              });
              setInitialProperties(instance, "link", preloadProps);
              markNodeAsHoistable(instance);
              ownerDocument.head.appendChild(instance);
            }
          }
        }
        function preloadPropsFromStylesheet(props) {
          return {
            rel: "preload",
            as: "style",
            href: props.href,
            crossOrigin: props.crossOrigin,
            integrity: props.integrity,
            media: props.media,
            hrefLang: props.hrefLang,
            referrerPolicy: props.referrerPolicy
          };
        }
        function getScriptKey(src) {
          var limitedEscapedSrc = escapeSelectorAttributeValueInsideDoubleQuotes(src);
          return '[src="' + limitedEscapedSrc + '"]';
        }
        function getScriptSelectorFromKey(key) {
          return "script[async]" + key;
        }
        function acquireResource(hoistableRoot, resource, props) {
          resource.count++;
          if (resource.instance === null) {
            switch (resource.type) {
              case "style": {
                var qualifiedProps = props;
                var instance = hoistableRoot.querySelector(getStyleTagSelector(qualifiedProps.href));
                if (instance) {
                  resource.instance = instance;
                  markNodeAsHoistable(instance);
                  return instance;
                }
                var styleProps = styleTagPropsFromRawProps(props);
                var ownerDocument = getDocumentFromRoot(hoistableRoot);
                instance = ownerDocument.createElement("style");
                markNodeAsHoistable(instance);
                setInitialProperties(instance, "style", styleProps);
                insertStylesheet(instance, qualifiedProps.precedence, hoistableRoot);
                resource.instance = instance;
                return instance;
              }
              case "stylesheet": {
                var _qualifiedProps = props;
                var key = getStyleKey(_qualifiedProps.href);
                var _instance2 = hoistableRoot.querySelector(getStylesheetSelectorFromKey(key));
                if (_instance2) {
                  resource.instance = _instance2;
                  markNodeAsHoistable(_instance2);
                  return _instance2;
                }
                var stylesheetProps = stylesheetPropsFromRawProps(props);
                var preloadProps = preloadPropsMap.get(key);
                if (preloadProps) {
                  adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps);
                }
                var _ownerDocument = getDocumentFromRoot(hoistableRoot);
                _instance2 = _ownerDocument.createElement("link");
                markNodeAsHoistable(_instance2);
                var linkInstance = _instance2;
                linkInstance._p = new Promise(function(resolve, reject) {
                  linkInstance.onload = resolve;
                  linkInstance.onerror = reject;
                });
                setInitialProperties(_instance2, "link", stylesheetProps);
                resource.state.loading |= Inserted;
                insertStylesheet(_instance2, _qualifiedProps.precedence, hoistableRoot);
                resource.instance = _instance2;
                return _instance2;
              }
              case "script": {
                var borrowedScriptProps = props;
                var _key4 = getScriptKey(borrowedScriptProps.src);
                var _instance3 = hoistableRoot.querySelector(getScriptSelectorFromKey(_key4));
                if (_instance3) {
                  resource.instance = _instance3;
                  markNodeAsHoistable(_instance3);
                  return _instance3;
                }
                var scriptProps = borrowedScriptProps;
                var _preloadProps2 = preloadPropsMap.get(_key4);
                if (_preloadProps2) {
                  scriptProps = assign({}, borrowedScriptProps);
                  adoptPreloadPropsForScript(scriptProps, _preloadProps2);
                }
                var _ownerDocument2 = getDocumentFromRoot(hoistableRoot);
                _instance3 = _ownerDocument2.createElement("script");
                markNodeAsHoistable(_instance3);
                setInitialProperties(_instance3, "link", scriptProps);
                _ownerDocument2.head.appendChild(_instance3);
                resource.instance = _instance3;
                return _instance3;
              }
              case "void": {
                return null;
              }
              default: {
                throw new Error('acquireResource encountered a resource type it did not expect: "' + resource.type + '". this is a bug in React.');
              }
            }
          } else {
            if (resource.type === "stylesheet" && (resource.state.loading & Inserted) === NotLoaded) {
              var _qualifiedProps2 = props;
              var _instance4 = resource.instance;
              resource.state.loading |= Inserted;
              insertStylesheet(_instance4, _qualifiedProps2.precedence, hoistableRoot);
            }
          }
          return resource.instance;
        }
        function releaseResource(resource) {
          resource.count--;
        }
        function insertStylesheet(instance, precedence, root2) {
          var nodes = root2.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]');
          var last = nodes.length ? nodes[nodes.length - 1] : null;
          var prior = last;
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var nodePrecedence = node.dataset.precedence;
            if (nodePrecedence === precedence) {
              prior = node;
            } else if (prior !== last) {
              break;
            }
          }
          if (prior) {
            prior.parentNode.insertBefore(instance, prior.nextSibling);
          } else {
            var parent = root2.nodeType === DOCUMENT_NODE ? root2.head : root2;
            parent.insertBefore(instance, parent.firstChild);
          }
        }
        function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
          if (stylesheetProps.crossOrigin == null)
            stylesheetProps.crossOrigin = preloadProps.crossOrigin;
          if (stylesheetProps.referrerPolicy == null)
            stylesheetProps.referrerPolicy = preloadProps.referrerPolicy;
          if (stylesheetProps.title == null)
            stylesheetProps.title = preloadProps.title;
        }
        function adoptPreloadPropsForScript(scriptProps, preloadProps) {
          if (scriptProps.crossOrigin == null)
            scriptProps.crossOrigin = preloadProps.crossOrigin;
          if (scriptProps.referrerPolicy == null)
            scriptProps.referrerPolicy = preloadProps.referrerPolicy;
          if (scriptProps.integrity == null)
            scriptProps.referrerPolicy = preloadProps.integrity;
        }
        var tagCaches = null;
        function hydrateHoistable(hoistableRoot, type, props, internalInstanceHandle) {
          var ownerDocument = getDocumentFromRoot(hoistableRoot);
          var instance = null;
          getInstance:
            switch (type) {
              case "title": {
                instance = ownerDocument.getElementsByTagName("title")[0];
                if (!instance || isOwnedInstance(instance) || instance.namespaceURI === SVG_NAMESPACE || instance.hasAttribute("itemprop")) {
                  instance = ownerDocument.createElement(type);
                  ownerDocument.head.insertBefore(instance, ownerDocument.querySelector("head > title"));
                }
                setInitialProperties(instance, type, props);
                precacheFiberNode(internalInstanceHandle, instance);
                markNodeAsHoistable(instance);
                return instance;
              }
              case "link": {
                var cache = getHydratableHoistableCache("link", "href", ownerDocument);
                var key = type + (props.href || "");
                var maybeNodes = cache.get(key);
                if (maybeNodes) {
                  var nodes = maybeNodes;
                  for (var i = 0; i < nodes.length; i++) {
                    var node = nodes[i];
                    if (node.getAttribute("href") !== (props.href == null ? null : props.href) || node.getAttribute("rel") !== (props.rel == null ? null : props.rel) || node.getAttribute("title") !== (props.title == null ? null : props.title) || node.getAttribute("crossorigin") !== (props.crossOrigin == null ? null : props.crossOrigin)) {
                      continue;
                    }
                    instance = node;
                    nodes.splice(i, 1);
                    break getInstance;
                  }
                }
                instance = ownerDocument.createElement(type);
                setInitialProperties(instance, type, props);
                ownerDocument.head.appendChild(instance);
                break;
              }
              case "meta": {
                var _cache = getHydratableHoistableCache("meta", "content", ownerDocument);
                var _key5 = type + (props.content || "");
                var _maybeNodes = _cache.get(_key5);
                if (_maybeNodes) {
                  var _nodes = _maybeNodes;
                  for (var _i = 0; _i < _nodes.length; _i++) {
                    var _node = _nodes[_i];
                    {
                      checkAttributeStringCoercion(props.content, "content");
                    }
                    if (_node.getAttribute("content") !== (props.content == null ? null : "" + props.content) || _node.getAttribute("name") !== (props.name == null ? null : props.name) || _node.getAttribute("property") !== (props.property == null ? null : props.property) || _node.getAttribute("http-equiv") !== (props.httpEquiv == null ? null : props.httpEquiv) || _node.getAttribute("charset") !== (props.charSet == null ? null : props.charSet)) {
                      continue;
                    }
                    instance = _node;
                    _nodes.splice(_i, 1);
                    break getInstance;
                  }
                }
                instance = ownerDocument.createElement(type);
                setInitialProperties(instance, type, props);
                ownerDocument.head.appendChild(instance);
                break;
              }
              default:
                throw new Error('getNodesForType encountered a type it did not expect: "' + type + '". This is a bug in React.');
            }
          precacheFiberNode(internalInstanceHandle, instance);
          markNodeAsHoistable(instance);
          return instance;
        }
        function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
          var cache;
          var caches;
          if (tagCaches === null) {
            cache = /* @__PURE__ */ new Map();
            caches = tagCaches = /* @__PURE__ */ new Map();
            caches.set(ownerDocument, cache);
          } else {
            caches = tagCaches;
            var maybeCache = caches.get(ownerDocument);
            if (!maybeCache) {
              cache = /* @__PURE__ */ new Map();
              caches.set(ownerDocument, cache);
            } else {
              cache = maybeCache;
            }
          }
          if (cache.has(type)) {
            return cache;
          }
          cache.set(type, null);
          var nodes = ownerDocument.getElementsByTagName(type);
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (!isOwnedInstance(node) && (type !== "link" || node.getAttribute("rel") !== "stylesheet") && node.namespaceURI !== SVG_NAMESPACE) {
              var nodeKey = node.getAttribute(keyAttribute) || "";
              var key = type + nodeKey;
              var existing = cache.get(key);
              if (existing) {
                existing.push(node);
              } else {
                cache.set(key, [node]);
              }
            }
          }
          return cache;
        }
        function mountHoistable(hoistableRoot, type, instance) {
          var ownerDocument = getDocumentFromRoot(hoistableRoot);
          ownerDocument.head.insertBefore(instance, type === "title" ? ownerDocument.querySelector("head > title") : null);
        }
        function unmountHoistable(instance) {
          instance.parentNode.removeChild(instance);
        }
        function isHostHoistableType(type, props, hostContext) {
          var outsideHostContainerContext;
          var hostContextProd;
          {
            var hostContextDev = hostContext;
            outsideHostContainerContext = !hostContextDev.ancestorInfo.containerTagInScope;
            hostContextProd = hostContextDev.context;
          }
          if (hostContextProd === HostContextNamespaceSvg || props.itemProp != null) {
            {
              if (outsideHostContainerContext && props.itemProp != null && (type === "meta" || type === "title" || type === "style" || type === "link" || type === "script")) {
                error("Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop. Otherwise, try moving this tag into the <head> or <body> of the Document.", type, type);
              }
            }
            return false;
          }
          switch (type) {
            case "meta":
            case "title": {
              return true;
            }
            case "style": {
              if (typeof props.precedence !== "string" || typeof props.href !== "string" || props.href === "") {
                {
                  if (outsideHostContainerContext) {
                    error('Cannot render a <style> outside the main document without knowing its precedence and a unique href key. React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that does not conflic with the `href` values used in any other hoisted <style> or <link rel="stylesheet" ...> tags.  Note that hoisting <style> tags is considered an advanced feature that most will not use directly. Consider moving the <style> tag to the <head> or consider adding a `precedence="default"` and `href="some unique resource identifier"`, or move the <style> to the <style> tag.');
                  }
                }
                return false;
              }
              return true;
            }
            case "link": {
              if (typeof props.rel !== "string" || typeof props.href !== "string" || props.href === "" || props.onLoad || props.onError) {
                {
                  if (props.rel === "stylesheet" && typeof props.precedence === "string") {
                    validateLinkPropsForStyleResource(props);
                  }
                  if (outsideHostContainerContext) {
                    if (typeof props.rel !== "string" || typeof props.href !== "string" || props.href === "") {
                      error("Cannot render a <link> outside the main document without a `rel` and `href` prop. Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag");
                    } else if (props.onError || props.onLoad) {
                      error("Cannot render a <link> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>.");
                    }
                  }
                }
                return false;
              }
              switch (props.rel) {
                case "stylesheet": {
                  var precedence = props.precedence, disabled = props.disabled;
                  {
                    if (typeof precedence !== "string") {
                      if (outsideHostContainerContext) {
                        error('Cannot render a <link rel="stylesheet" /> outside the main document without knowing its precedence. Consider adding precedence="default" or moving it into the root <head> tag.');
                      }
                    }
                  }
                  return typeof precedence === "string" && disabled == null;
                }
                default: {
                  return true;
                }
              }
            }
            case "script": {
              if (props.async !== true || props.onLoad || props.onError || typeof props.src !== "string" || !props.src) {
                {
                  if (outsideHostContainerContext) {
                    if (props.async !== true) {
                      error('Cannot render a sync or defer <script> outside the main document without knowing its order. Try adding async="" or moving it into the root <head> tag.');
                    } else if (props.onLoad || props.onError) {
                      error("Cannot render a <script> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>.");
                    } else {
                      error("Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop. Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or somewhere in the <body>.");
                    }
                  }
                }
                return false;
              }
              return true;
            }
            case "noscript":
            case "template": {
              {
                if (outsideHostContainerContext) {
                  error("Cannot render <%s> outside the main document. Try moving it into the root <head> tag.", type);
                }
              }
              return false;
            }
          }
          return false;
        }
        function mayResourceSuspendCommit(resource) {
          return resource.type === "stylesheet" && (resource.state.loading & Inserted) === NotLoaded;
        }
        function preloadInstance(type, props) {
          return true;
        }
        function preloadResource(resource) {
          if (resource.type === "stylesheet" && (resource.state.loading & Settled) === NotLoaded) {
            return false;
          }
          return true;
        }
        var suspendedState = null;
        function noop() {
        }
        function startSuspendingCommit() {
          suspendedState = {
            stylesheets: null,
            count: 0,
            unsuspend: noop
          };
        }
        function suspendResource(hoistableRoot, resource, props) {
          if (suspendedState === null) {
            throw new Error("Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.");
          }
          var state = suspendedState;
          if (resource.type === "stylesheet") {
            if (typeof props.media === "string") {
              if (matchMedia(props.media).matches === false) {
                return;
              }
            }
            if (resource.instance === null) {
              var qualifiedProps = props;
              var key = getStyleKey(qualifiedProps.href);
              var instance = hoistableRoot.querySelector(getStylesheetSelectorFromKey(key));
              if (instance) {
                var maybeLoadingState = instance._p;
                if (maybeLoadingState !== null && typeof maybeLoadingState === "object" && // $FlowFixMe[method-unbinding]
                typeof maybeLoadingState.then === "function") {
                  var loadingState = maybeLoadingState;
                  state.count++;
                  var ping = onUnsuspend.bind(state);
                  loadingState.then(ping, ping);
                }
                resource.state.loading |= Inserted;
                resource.instance = instance;
                markNodeAsHoistable(instance);
                return;
              }
              var ownerDocument = getDocumentFromRoot(hoistableRoot);
              var stylesheetProps = stylesheetPropsFromRawProps(props);
              var preloadProps = preloadPropsMap.get(key);
              if (preloadProps) {
                adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps);
              }
              instance = ownerDocument.createElement("link");
              markNodeAsHoistable(instance);
              var linkInstance = instance;
              linkInstance._p = new Promise(function(resolve, reject) {
                linkInstance.onload = resolve;
                linkInstance.onerror = reject;
              });
              setInitialProperties(instance, "link", stylesheetProps);
              resource.instance = instance;
            }
            if (state.stylesheets === null) {
              state.stylesheets = /* @__PURE__ */ new Map();
            }
            state.stylesheets.set(resource, hoistableRoot);
            var preloadEl = resource.state.preload;
            if (preloadEl && (resource.state.loading & Settled) === NotLoaded) {
              state.count++;
              var _ping = onUnsuspend.bind(state);
              preloadEl.addEventListener("load", _ping);
              preloadEl.addEventListener("error", _ping);
            }
          }
        }
        function waitForCommitToBeReady() {
          if (suspendedState === null) {
            throw new Error("Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.");
          }
          var state = suspendedState;
          if (state.stylesheets && state.count === 0) {
            insertSuspendedStylesheets(state, state.stylesheets);
          }
          if (state.count > 0) {
            return function(commit) {
              var stylesheetTimer = setTimeout(function() {
                if (state.stylesheets) {
                  insertSuspendedStylesheets(state, state.stylesheets);
                }
                if (state.unsuspend) {
                  var unsuspend = state.unsuspend;
                  state.unsuspend = null;
                  unsuspend();
                }
              }, 6e4);
              state.unsuspend = commit;
              return function() {
                state.unsuspend = null;
                clearTimeout(stylesheetTimer);
              };
            };
          }
          return null;
        }
        function onUnsuspend() {
          this.count--;
          if (this.count === 0) {
            if (this.stylesheets) {
              insertSuspendedStylesheets(this, this.stylesheets);
            } else if (this.unsuspend) {
              var unsuspend = this.unsuspend;
              this.unsuspend = null;
              unsuspend();
            }
          }
        }
        var precedencesByRoot = null;
        function insertSuspendedStylesheets(state, resources) {
          state.stylesheets = null;
          if (state.unsuspend === null) {
            return;
          }
          state.count++;
          precedencesByRoot = /* @__PURE__ */ new Map();
          resources.forEach(insertStylesheetIntoRoot, state);
          precedencesByRoot = null;
          onUnsuspend.call(state);
        }
        function insertStylesheetIntoRoot(root2, resource, map) {
          if (resource.state.loading & Inserted) {
            return;
          }
          var last;
          var precedences = precedencesByRoot.get(root2);
          if (!precedences) {
            precedences = /* @__PURE__ */ new Map();
            precedencesByRoot.set(root2, precedences);
            var nodes = root2.querySelectorAll("link[data-precedence],style[data-precedence]");
            for (var i = 0; i < nodes.length; i++) {
              var node = nodes[i];
              if (node.nodeName === "link" || // We omit style tags with media="not all" because they are not in the right position
              // and will be hoisted by the Fizz runtime imminently.
              node.getAttribute("media") !== "not all") {
                precedences.set("p" + node.dataset.precedence, node);
                last = node;
              }
            }
            if (last) {
              precedences.set("last", last);
            }
          } else {
            last = precedences.get("last");
          }
          var instance = resource.instance;
          var precedence = instance.getAttribute("data-precedence");
          var prior = precedences.get("p" + precedence) || last;
          if (prior === last) {
            precedences.set("last", instance);
          }
          precedences.set(precedence, instance);
          this.count++;
          var onComplete = onUnsuspend.bind(this);
          instance.addEventListener("load", onComplete);
          instance.addEventListener("error", onComplete);
          if (prior) {
            prior.parentNode.insertBefore(instance, prior.nextSibling);
          } else {
            var parent = root2.nodeType === DOCUMENT_NODE ? root2.head : root2;
            parent.insertBefore(instance, parent.firstChild);
          }
          resource.state.loading |= Inserted;
        }
        var NotPendingTransition = NotPending;
        var Dispatcher$1 = Internals.Dispatcher;
        if (typeof document !== "undefined") {
          Dispatcher$1.current = ReactDOMClientDispatcher;
        }
        var defaultOnRecoverableError = typeof reportError === "function" ? (
          // In modern browsers, reportError will dispatch an error event,
          // emulating an uncaught JavaScript error.
          reportError
        ) : function(error2) {
          console["error"](error2);
        };
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = // $FlowFixMe[missing-this-annot]
        function(children) {
          var root2 = this._internalRoot;
          if (root2 === null) {
            throw new Error("Cannot update an unmounted root.");
          }
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            } else if (isValidContainer(arguments[1])) {
              error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
            } else if (typeof arguments[1] !== "undefined") {
              error("You passed a second argument to root.render(...) but it only accepts one argument.");
            }
          }
          updateContainer(children, root2, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = // $FlowFixMe[missing-this-annot]
        function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this._internalRoot;
          if (root2 !== null) {
            this._internalRoot = null;
            var container = root2.containerInfo;
            {
              if (isAlreadyRendering()) {
                error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
              }
            }
            flushSync$1(function() {
              updateContainer(null, root2, null, null);
            });
            unmarkContainerAsRoot(container);
          }
        };
        function createRoot$1(container, options2) {
          if (!isValidContainer(container)) {
            throw new Error("createRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            {
              if (options2.hydrate) {
                warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
              } else {
                if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                  error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                }
              }
            }
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          Dispatcher$1.current = ReactDOMClientDispatcher;
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root2);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function scheduleHydration(target) {
          if (target) {
            queueExplicitHydrationTarget(target);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
        function hydrateRoot$1(container, initialChildren, options2) {
          if (!isValidContainer(container)) {
            throw new Error("hydrateRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          {
            if (initialChildren === void 0) {
              error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
            }
          }
          var hydrationCallbacks = options2 != null ? options2 : null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          Dispatcher$1.current = ReactDOMClientDispatcher;
          listenToAllSupportedEvents(container);
          return new ReactDOMHydrationRoot(root2);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        function isValidContainerLegacy(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        function warnIfReactDOMContainerInDEV(container) {
          {
            if (isContainerMarkedAsRoot(container)) {
              if (container._reactRootContainer) {
                error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
              } else {
                error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
              }
            }
          }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function noopOnRecoverableError() {
        }
        function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
          if (isHydrationContainer) {
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            var root2 = createHydrationContainer(
              initialChildren,
              callback,
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container._reactRootContainer = root2;
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync$1();
            return root2;
          } else {
            clearContainer(container);
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer(
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync$1(function() {
              updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
          }
        }
        function warnOnInvalidCallback(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback(callback === void 0 ? null : callback, "render");
          }
          var maybeRoot = container._reactRootContainer;
          var root2;
          if (!maybeRoot) {
            root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
          } else {
            root2 = maybeRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            updateContainer(children, root2, parentComponent, callback);
          }
          return getPublicRootInstance(root2);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          {
            error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          {
            error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          {
            error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error("Target container is not a DOM element.");
          }
          if (parentComponent == null || !has(parentComponent)) {
            throw new Error("parentComponent must be a valid React Component");
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainerLegacy(container)) {
            throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            flushSync$1(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && // $FlowFixMe[prop-missing]
              // $FlowFixMe[incompatible-use]
              !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        var Dispatcher = Internals.Dispatcher;
        function prefetchDNS(href) {
          var passedOptionArg;
          {
            if (arguments[1] !== void 0) {
              passedOptionArg = arguments[1];
            }
          }
          var dispatcher = Dispatcher.current;
          if (dispatcher) {
            {
              if (passedOptionArg !== void 0) {
                dispatcher.prefetchDNS(href, passedOptionArg);
              } else {
                dispatcher.prefetchDNS(href);
              }
            }
          }
        }
        function preconnect(href, options2) {
          var dispatcher = Dispatcher.current;
          if (dispatcher) {
            dispatcher.preconnect(href, options2);
          }
        }
        function preload(href, options2) {
          var dispatcher = Dispatcher.current;
          if (dispatcher) {
            dispatcher.preload(href, options2);
          }
        }
        function preinit(href, options2) {
          var dispatcher = Dispatcher.current;
          if (dispatcher) {
            dispatcher.preinit(href, options2);
          }
        }
        {
          if (typeof Map !== "function" || // $FlowFixMe[prop-missing] Flow incorrectly thinks Map has no prototype
          Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowFixMe[prop-missing] Flow incorrectly thinks Set has no prototype
          Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        function createPortal(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal$1(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        function createRoot(container, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return createRoot$1(container, options2);
        }
        function hydrateRoot(container, initialChildren, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return hydrateRoot$1(container, initialChildren, options2);
        }
        function flushSync(fn) {
          {
            if (isAlreadyRendering()) {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
          }
          return flushSync$1(fn);
        }
        Internals.Events = [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1];
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal;
        exports.createRoot = createRoot;
        exports.experimental_useFormStatus = useFormStatus;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync;
        exports.hydrate = hydrate;
        exports.hydrateRoot = hydrateRoot;
        exports.preconnect = preconnect;
        exports.prefetchDNS = prefetchDNS;
        exports.preinit = preinit;
        exports.preload = preload;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.unstable_runWithPriority = runWithPriority;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module2) {
    "use strict";
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      if (process.env.NODE_ENV !== "production") {
        throw new Error("^_^");
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    if (process.env.NODE_ENV === "production") {
      checkDCE();
      module2.exports = require_react_dom_production_min();
    } else {
      module2.exports = require_react_dom_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom-server-legacy.node.production.min.js
var require_react_dom_server_legacy_node_production_min = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server-legacy.node.production.min.js"(exports) {
    "use strict";
    var aa = require_react();
    var ba = require_react_dom();
    var ka = require("stream");
    var la = Object.assign;
    var n = Object.prototype.hasOwnProperty;
    var qa = RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$");
    var ra = {};
    var sa = {};
    function ta(a) {
      if (n.call(sa, a))
        return true;
      if (n.call(ra, a))
        return false;
      if (qa.test(a))
        return sa[a] = true;
      ra[a] = true;
      return false;
    }
    var ua = new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));
    var va = /* @__PURE__ */ new Map([
      ["acceptCharset", "accept-charset"],
      ["htmlFor", "for"],
      ["httpEquiv", "http-equiv"],
      ["crossOrigin", "crossorigin"],
      ["accentHeight", "accent-height"],
      ["alignmentBaseline", "alignment-baseline"],
      ["arabicForm", "arabic-form"],
      ["baselineShift", "baseline-shift"],
      ["capHeight", "cap-height"],
      ["clipPath", "clip-path"],
      ["clipRule", "clip-rule"],
      ["colorInterpolation", "color-interpolation"],
      ["colorInterpolationFilters", "color-interpolation-filters"],
      ["colorProfile", "color-profile"],
      ["colorRendering", "color-rendering"],
      ["dominantBaseline", "dominant-baseline"],
      ["enableBackground", "enable-background"],
      ["fillOpacity", "fill-opacity"],
      ["fillRule", "fill-rule"],
      ["floodColor", "flood-color"],
      ["floodOpacity", "flood-opacity"],
      ["fontFamily", "font-family"],
      ["fontSize", "font-size"],
      ["fontSizeAdjust", "font-size-adjust"],
      ["fontStretch", "font-stretch"],
      ["fontStyle", "font-style"],
      ["fontVariant", "font-variant"],
      ["fontWeight", "font-weight"],
      ["glyphName", "glyph-name"],
      ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
      [
        "glyphOrientationVertical",
        "glyph-orientation-vertical"
      ],
      ["horizAdvX", "horiz-adv-x"],
      ["horizOriginX", "horiz-origin-x"],
      ["imageRendering", "image-rendering"],
      ["letterSpacing", "letter-spacing"],
      ["lightingColor", "lighting-color"],
      ["markerEnd", "marker-end"],
      ["markerMid", "marker-mid"],
      ["markerStart", "marker-start"],
      ["overlinePosition", "overline-position"],
      ["overlineThickness", "overline-thickness"],
      ["paintOrder", "paint-order"],
      ["panose-1", "panose-1"],
      ["pointerEvents", "pointer-events"],
      ["renderingIntent", "rendering-intent"],
      [
        "shapeRendering",
        "shape-rendering"
      ],
      ["stopColor", "stop-color"],
      ["stopOpacity", "stop-opacity"],
      ["strikethroughPosition", "strikethrough-position"],
      ["strikethroughThickness", "strikethrough-thickness"],
      ["strokeDasharray", "stroke-dasharray"],
      ["strokeDashoffset", "stroke-dashoffset"],
      ["strokeLinecap", "stroke-linecap"],
      ["strokeLinejoin", "stroke-linejoin"],
      ["strokeMiterlimit", "stroke-miterlimit"],
      ["strokeOpacity", "stroke-opacity"],
      ["strokeWidth", "stroke-width"],
      ["textAnchor", "text-anchor"],
      ["textDecoration", "text-decoration"],
      ["textRendering", "text-rendering"],
      ["transformOrigin", "transform-origin"],
      ["underlinePosition", "underline-position"],
      ["underlineThickness", "underline-thickness"],
      ["unicodeBidi", "unicode-bidi"],
      ["unicodeRange", "unicode-range"],
      ["unitsPerEm", "units-per-em"],
      ["vAlphabetic", "v-alphabetic"],
      ["vHanging", "v-hanging"],
      ["vIdeographic", "v-ideographic"],
      ["vMathematical", "v-mathematical"],
      ["vectorEffect", "vector-effect"],
      ["vertAdvY", "vert-adv-y"],
      ["vertOriginX", "vert-origin-x"],
      ["vertOriginY", "vert-origin-y"],
      ["wordSpacing", "word-spacing"],
      ["writingMode", "writing-mode"],
      ["xmlnsXlink", "xmlns:xlink"],
      ["xHeight", "x-height"]
    ]);
    var Ra = /["'&<>]/;
    function q(a) {
      if ("boolean" === typeof a || "number" === typeof a)
        return "" + a;
      a = "" + a;
      var b = Ra.exec(a);
      if (b) {
        var c = "", d, e = 0;
        for (d = b.index; d < a.length; d++) {
          switch (a.charCodeAt(d)) {
            case 34:
              b = "&quot;";
              break;
            case 38:
              b = "&amp;";
              break;
            case 39:
              b = "&#x27;";
              break;
            case 60:
              b = "&lt;";
              break;
            case 62:
              b = "&gt;";
              break;
            default:
              continue;
          }
          e !== d && (c += a.slice(e, d));
          e = d + 1;
          c += b;
        }
        a = e !== d ? c + a.slice(e, d) : c;
      }
      return a;
    }
    var Sa = /([A-Z])/g;
    var Ta = /^ms-/;
    var Ua = Array.isArray;
    var Va = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var Wa = { pending: false, data: null, method: null, action: null };
    var Xa = ba.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Dispatcher;
    var hb = { prefetchDNS: Ya, preconnect: Za, preload: fb, preinit: gb };
    function r(a, b, c) {
      return { insertionMode: a, selectedValue: b, noscriptTagInScope: c };
    }
    function ib(a, b, c) {
      switch (b) {
        case "noscript":
          return r(2, null, true);
        case "select":
          return r(2, null != c.value ? c.value : c.defaultValue, a.noscriptTagInScope);
        case "svg":
          return r(3, null, a.noscriptTagInScope);
        case "math":
          return r(4, null, a.noscriptTagInScope);
        case "foreignObject":
          return r(2, null, a.noscriptTagInScope);
        case "table":
          return r(5, null, a.noscriptTagInScope);
        case "thead":
        case "tbody":
        case "tfoot":
          return r(6, null, a.noscriptTagInScope);
        case "colgroup":
          return r(8, null, a.noscriptTagInScope);
        case "tr":
          return r(
            7,
            null,
            a.noscriptTagInScope
          );
      }
      return 5 <= a.insertionMode ? r(2, null, a.noscriptTagInScope) : 0 === a.insertionMode ? "html" === b ? r(1, null, false) : r(2, null, false) : 1 === a.insertionMode ? r(2, null, false) : a;
    }
    var jb = /* @__PURE__ */ new Map();
    function kb(a, b) {
      if ("object" !== typeof b)
        throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
      var c = true, d;
      for (d in b)
        if (n.call(b, d)) {
          var e = b[d];
          if (null != e && "boolean" !== typeof e && "" !== e) {
            if (0 === d.indexOf("--")) {
              var f = q(d);
              e = q(("" + e).trim());
            } else
              f = jb.get(d), void 0 === f && (f = q(d.replace(Sa, "-$1").toLowerCase().replace(Ta, "-ms-")), jb.set(d, f)), e = "number" === typeof e ? 0 === e || ua.has(d) ? "" + e : e + "px" : q(("" + e).trim());
            c ? (c = false, a.push(' style="', f, ":", e)) : a.push(";", f, ":", e);
          }
        }
      c || a.push('"');
    }
    function lb(a, b, c) {
      c && "function" !== typeof c && "symbol" !== typeof c && a.push(" ", b, '=""');
    }
    function u(a, b, c) {
      "function" !== typeof c && "symbol" !== typeof c && "boolean" !== typeof c && a.push(" ", b, '="', q(c), '"');
    }
    function mb(a) {
      var b = a.nextSuspenseID++;
      return a.idPrefix + b;
    }
    var nb = q("javascript:throw new Error('A React form was unexpectedly submitted.')");
    function ob(a, b) {
      this.push('<input type="hidden"');
      if ("string" !== typeof a)
        throw Error("File/Blob fields are not yet supported in progressive forms. It probably means you are closing over binary data or FormData in a Server Action.");
      u(this, "name", b);
      u(this, "value", a);
      this.push("/>");
    }
    function pb(a, b, c, d, e, f, g) {
      var h = null;
      "function" === typeof c && ("function" === typeof c.$$FORM_ACTION ? (d = mb(b), b = c.$$FORM_ACTION(d), g = b.name, c = b.action || "", d = b.encType, e = b.method, f = b.target, h = b.data) : (a.push(" ", "formAction", '="', nb, '"'), f = e = d = c = g = null, qb(b)));
      null != g && x(a, "name", g);
      null != c && x(a, "formAction", c);
      null != d && x(a, "formEncType", d);
      null != e && x(a, "formMethod", e);
      null != f && x(a, "formTarget", f);
      return h;
    }
    function x(a, b, c) {
      switch (b) {
        case "className":
          u(a, "class", c);
          break;
        case "tabIndex":
          u(a, "tabindex", c);
          break;
        case "dir":
        case "role":
        case "viewBox":
        case "width":
        case "height":
          u(a, b, c);
          break;
        case "style":
          kb(a, c);
          break;
        case "src":
        case "href":
          if ("" === c)
            break;
        case "action":
        case "formAction":
          if (null == c || "function" === typeof c || "symbol" === typeof c || "boolean" === typeof c)
            break;
          a.push(" ", b, '="', q("" + c), '"');
          break;
        case "defaultValue":
        case "defaultChecked":
        case "innerHTML":
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
          break;
        case "autoFocus":
        case "multiple":
        case "muted":
          lb(a, b.toLowerCase(), c);
          break;
        case "xlinkHref":
          if ("function" === typeof c || "symbol" === typeof c || "boolean" === typeof c)
            break;
          a.push(" ", "xlink:href", '="', q("" + c), '"');
          break;
        case "contentEditable":
        case "spellCheck":
        case "draggable":
        case "value":
        case "autoReverse":
        case "externalResourcesRequired":
        case "focusable":
        case "preserveAlpha":
          "function" !== typeof c && "symbol" !== typeof c && a.push(" ", b, '="', q(c), '"');
          break;
        case "allowFullScreen":
        case "async":
        case "autoPlay":
        case "controls":
        case "default":
        case "defer":
        case "disabled":
        case "disablePictureInPicture":
        case "disableRemotePlayback":
        case "formNoValidate":
        case "hidden":
        case "loop":
        case "noModule":
        case "noValidate":
        case "open":
        case "playsInline":
        case "readOnly":
        case "required":
        case "reversed":
        case "scoped":
        case "seamless":
        case "itemScope":
          c && "function" !== typeof c && "symbol" !== typeof c && a.push(" ", b, '=""');
          break;
        case "capture":
        case "download":
          true === c ? a.push(" ", b, '=""') : false !== c && "function" !== typeof c && "symbol" !== typeof c && a.push(" ", b, '="', q(c), '"');
          break;
        case "cols":
        case "rows":
        case "size":
        case "span":
          "function" !== typeof c && "symbol" !== typeof c && !isNaN(c) && 1 <= c && a.push(" ", b, '="', q(c), '"');
          break;
        case "rowSpan":
        case "start":
          "function" === typeof c || "symbol" === typeof c || isNaN(c) || a.push(" ", b, '="', q(c), '"');
          break;
        case "xlinkActuate":
          u(
            a,
            "xlink:actuate",
            c
          );
          break;
        case "xlinkArcrole":
          u(a, "xlink:arcrole", c);
          break;
        case "xlinkRole":
          u(a, "xlink:role", c);
          break;
        case "xlinkShow":
          u(a, "xlink:show", c);
          break;
        case "xlinkTitle":
          u(a, "xlink:title", c);
          break;
        case "xlinkType":
          u(a, "xlink:type", c);
          break;
        case "xmlBase":
          u(a, "xml:base", c);
          break;
        case "xmlLang":
          u(a, "xml:lang", c);
          break;
        case "xmlSpace":
          u(a, "xml:space", c);
          break;
        default:
          if (!(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) {
            if (b = va.get(b) || b, ta(b)) {
              switch (typeof c) {
                case "function":
                case "symbol":
                  return;
                case "boolean":
                  var d = b.toLowerCase().slice(0, 5);
                  if ("data-" !== d && "aria-" !== d)
                    return;
              }
              a.push(" ", b, '="', q(c), '"');
            }
          }
      }
    }
    function y(a, b, c) {
      if (null != b) {
        if (null != c)
          throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
        if ("object" !== typeof b || !("__html" in b))
          throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        b = b.__html;
        null !== b && void 0 !== b && a.push("" + b);
      }
    }
    function rb(a) {
      var b = "";
      aa.Children.forEach(a, function(c) {
        null != c && (b += c);
      });
      return b;
    }
    function qb(a) {
      0 !== (a.instructions & 16) || a.externalRuntimeScript || (a.instructions |= 16, a.bootstrapChunks.unshift(a.startInlineScript, `addEventListener("submit",function(a){if(!a.defaultPrevented){var c=a.target,d=a.submitter,e=c.action,b=d;if(d){var f=d.getAttribute("formAction");null!=f&&(e=f,b=null)}"javascript:throw new Error('A React form was unexpectedly submitted.')"===e&&(a.preventDefault(),b?(a=document.createElement("input"),a.name=b.name,a.value=b.value,b.parentNode.insertBefore(a,b),b=new FormData(c),a.parentNode.removeChild(a)):b=new FormData(c),a=c.getRootNode(),(a.$$reactFormReplay=a.$$reactFormReplay||[]).push(c,
d,b))}});`, "</script>"));
    }
    function sb(a, b, c, d, e, f, g) {
      var h = b.rel, k = b.href, m = b.precedence;
      if (3 === f || g || null != b.itemProp || "string" !== typeof h || "string" !== typeof k || "" === k)
        return z(a, b), null;
      if ("stylesheet" === b.rel) {
        c = "[style]" + k;
        if ("string" !== typeof m || null != b.disabled || b.onLoad || b.onError)
          return z(a, b);
        f = d.stylesMap.get(c);
        f || (b = la({}, b, { "data-precedence": b.precedence, precedence: null }), f = d.preloadsMap.get(c), g = 0, f && (f.state |= 4, h = f.props, null == b.crossOrigin && (b.crossOrigin = h.crossOrigin), null == b.integrity && (b.integrity = h.integrity), f.state & 3 && (g = 8)), f = { type: "stylesheet", chunks: [], state: g, props: b }, d.stylesMap.set(c, f), b = d.precedences.get(m), b || (b = /* @__PURE__ */ new Set(), d.precedences.set(m, b), c = { type: "style", chunks: [], state: 0, props: { precedence: m, hrefs: [] } }, b.add(c), d.stylePrecedences.set(m, c)), b.add(f));
        d.boundaryResources && d.boundaryResources.add(f);
        e && a.push("<!-- -->");
        return null;
      }
      if (b.onLoad || b.onError)
        return z(a, b);
      e && a.push("<!-- -->");
      switch (b.rel) {
        case "preconnect":
        case "dns-prefetch":
          return z(c.preconnectChunks, b);
        case "preload":
          return z(
            c.preloadChunks,
            b
          );
        default:
          return z(c.hoistableChunks, b);
      }
    }
    function z(a, b) {
      a.push(C("link"));
      for (var c in b)
        if (n.call(b, c)) {
          var d = b[c];
          if (null != d)
            switch (c) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              default:
                x(a, c, d);
            }
        }
      a.push("/>");
      return null;
    }
    function tb(a, b, c) {
      a.push(C(c));
      for (var d in b)
        if (n.call(b, d)) {
          var e = b[d];
          if (null != e)
            switch (d) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw Error(c + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              default:
                x(a, d, e);
            }
        }
      a.push("/>");
      return null;
    }
    function ub(a, b) {
      a.push(C("title"));
      var c = null, d = null, e;
      for (e in b)
        if (n.call(b, e)) {
          var f = b[e];
          if (null != f)
            switch (e) {
              case "children":
                c = f;
                break;
              case "dangerouslySetInnerHTML":
                d = f;
                break;
              default:
                x(a, e, f);
            }
        }
      a.push(">");
      b = Array.isArray(c) ? 2 > c.length ? c[0] : null : c;
      "function" !== typeof b && "symbol" !== typeof b && null !== b && void 0 !== b && a.push(q("" + b));
      y(a, d, c);
      a.push("</", "title", ">");
      return null;
    }
    function vb(a, b) {
      a.push(C("script"));
      var c = null, d = null, e;
      for (e in b)
        if (n.call(b, e)) {
          var f = b[e];
          if (null != f)
            switch (e) {
              case "children":
                c = f;
                break;
              case "dangerouslySetInnerHTML":
                d = f;
                break;
              default:
                x(a, e, f);
            }
        }
      a.push(">");
      y(a, d, c);
      "string" === typeof c && a.push(q(c));
      a.push("</", "script", ">");
      return null;
    }
    function wb(a, b, c) {
      a.push(C(c));
      var d = c = null, e;
      for (e in b)
        if (n.call(b, e)) {
          var f = b[e];
          if (null != f)
            switch (e) {
              case "children":
                c = f;
                break;
              case "dangerouslySetInnerHTML":
                d = f;
                break;
              default:
                x(a, e, f);
            }
        }
      a.push(">");
      y(a, d, c);
      return "string" === typeof c ? (a.push(q(c)), null) : c;
    }
    var xb = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
    var Eb = /* @__PURE__ */ new Map();
    function C(a) {
      var b = Eb.get(a);
      if (void 0 === b) {
        if (!xb.test(a))
          throw Error("Invalid tag: " + a);
        b = "<" + a;
        Eb.set(a, b);
      }
      return b;
    }
    function Fb(a, b, c, d, e, f, g) {
      switch (b) {
        case "div":
        case "span":
        case "svg":
        case "path":
        case "a":
        case "g":
        case "p":
        case "li":
          break;
        case "select":
          a.push(C("select"));
          var h = null, k = null, m;
          for (m in c)
            if (n.call(c, m)) {
              var t = c[m];
              if (null != t)
                switch (m) {
                  case "children":
                    h = t;
                    break;
                  case "dangerouslySetInnerHTML":
                    k = t;
                    break;
                  case "defaultValue":
                  case "value":
                    break;
                  default:
                    x(a, m, t);
                }
            }
          a.push(">");
          y(a, k, h);
          return h;
        case "option":
          var p = f.selectedValue;
          a.push(C("option"));
          var T = null, O = null, U = null, F = null, G;
          for (G in c)
            if (n.call(
              c,
              G
            )) {
              var l = c[G];
              if (null != l)
                switch (G) {
                  case "children":
                    T = l;
                    break;
                  case "selected":
                    U = l;
                    break;
                  case "dangerouslySetInnerHTML":
                    F = l;
                    break;
                  case "value":
                    O = l;
                  default:
                    x(a, G, l);
                }
            }
          if (null != p) {
            var B = null !== O ? "" + O : rb(T);
            if (Ua(p))
              for (var L = 0; L < p.length; L++) {
                if ("" + p[L] === B) {
                  a.push(' selected=""');
                  break;
                }
              }
            else
              "" + p === B && a.push(' selected=""');
          } else
            U && a.push(' selected=""');
          a.push(">");
          y(a, F, T);
          return T;
        case "textarea":
          a.push(C("textarea"));
          var A = null, P = null, v = null, D;
          for (D in c)
            if (n.call(c, D)) {
              var w = c[D];
              if (null != w)
                switch (D) {
                  case "children":
                    v = w;
                    break;
                  case "value":
                    A = w;
                    break;
                  case "defaultValue":
                    P = w;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                  default:
                    x(a, D, w);
                }
            }
          null === A && null !== P && (A = P);
          a.push(">");
          if (null != v) {
            if (null != A)
              throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            if (Ua(v) && 1 < v.length)
              throw Error("<textarea> can only have at most one child.");
            A = "" + v;
          }
          "string" === typeof A && "\n" === A[0] && a.push("\n");
          null !== A && a.push(q("" + A));
          return null;
        case "input":
          a.push(C("input"));
          var wa = null, ma = null, ca = null, V = null, Q = null, xa = null, ya = null, za = null, Aa = null, da;
          for (da in c)
            if (n.call(c, da)) {
              var E = c[da];
              if (null != E)
                switch (da) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                  case "name":
                    wa = E;
                    break;
                  case "formAction":
                    ma = E;
                    break;
                  case "formEncType":
                    ca = E;
                    break;
                  case "formMethod":
                    V = E;
                    break;
                  case "formTarget":
                    Q = E;
                    break;
                  case "defaultChecked":
                    Aa = E;
                    break;
                  case "defaultValue":
                    ya = E;
                    break;
                  case "checked":
                    za = E;
                    break;
                  case "value":
                    xa = E;
                    break;
                  default:
                    x(a, da, E);
                }
            }
          var ea = pb(a, e, ma, ca, V, Q, wa);
          null !== za ? lb(a, "checked", za) : null !== Aa && lb(a, "checked", Aa);
          null !== xa ? x(a, "value", xa) : null !== ya && x(a, "value", ya);
          a.push("/>");
          null !== ea && ea.forEach(ob, a);
          return null;
        case "button":
          a.push(C("button"));
          var M = null, fa = null, ha = null, Ba = null, ia = null, hc = null, ic = null, Ca;
          for (Ca in c)
            if (n.call(c, Ca)) {
              var R = c[Ca];
              if (null != R)
                switch (Ca) {
                  case "children":
                    M = R;
                    break;
                  case "dangerouslySetInnerHTML":
                    fa = R;
                    break;
                  case "name":
                    ha = R;
                    break;
                  case "formAction":
                    Ba = R;
                    break;
                  case "formEncType":
                    ia = R;
                    break;
                  case "formMethod":
                    hc = R;
                    break;
                  case "formTarget":
                    ic = R;
                    break;
                  default:
                    x(a, Ca, R);
                }
            }
          var jc = pb(a, e, Ba, ia, hc, ic, ha);
          a.push(">");
          null !== jc && jc.forEach(ob, a);
          y(a, fa, M);
          if ("string" === typeof M) {
            a.push(q(M));
            var kc = null;
          } else
            kc = M;
          return kc;
        case "form":
          a.push(C("form"));
          var Da = null, lc = null, W = null, Ea = null, Fa = null, Ga = null, Ha;
          for (Ha in c)
            if (n.call(c, Ha)) {
              var X = c[Ha];
              if (null != X)
                switch (Ha) {
                  case "children":
                    Da = X;
                    break;
                  case "dangerouslySetInnerHTML":
                    lc = X;
                    break;
                  case "action":
                    W = X;
                    break;
                  case "encType":
                    Ea = X;
                    break;
                  case "method":
                    Fa = X;
                    break;
                  case "target":
                    Ga = X;
                    break;
                  default:
                    x(a, Ha, X);
                }
            }
          var yb = null, zb = null;
          if ("function" === typeof W)
            if ("function" === typeof W.$$FORM_ACTION) {
              var Qd = mb(e), na = W.$$FORM_ACTION(Qd);
              W = na.action || "";
              Ea = na.encType;
              Fa = na.method;
              Ga = na.target;
              yb = na.data;
              zb = na.name;
            } else
              a.push(" ", "action", '="', nb, '"'), Ga = Fa = Ea = W = null, qb(e);
          null != W && x(a, "action", W);
          null != Ea && x(a, "encType", Ea);
          null != Fa && x(a, "method", Fa);
          null != Ga && x(a, "target", Ga);
          a.push(">");
          null !== zb && (a.push('<input type="hidden"'), u(a, "name", zb), a.push("/>"), null !== yb && yb.forEach(ob, a));
          y(a, lc, Da);
          if ("string" === typeof Da) {
            a.push(q(Da));
            var mc = null;
          } else
            mc = Da;
          return mc;
        case "menuitem":
          a.push(C("menuitem"));
          for (var $a in c)
            if (n.call(c, $a)) {
              var nc = c[$a];
              if (null != nc)
                switch ($a) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                  default:
                    x(a, $a, nc);
                }
            }
          a.push(">");
          return null;
        case "title":
          if (3 === f.insertionMode || f.noscriptTagInScope || null != c.itemProp)
            var oc = ub(a, c);
          else
            ub(e.hoistableChunks, c), oc = null;
          return oc;
        case "link":
          return sb(a, c, e, d, g, f.insertionMode, f.noscriptTagInScope);
        case "script":
          var Ab = c.async;
          if ("string" !== typeof c.src || !c.src || !Ab || "function" === typeof Ab || "symbol" === typeof Ab || c.onLoad || c.onError || 3 === f.insertionMode || f.noscriptTagInScope || null != c.itemProp)
            var pc = vb(a, c);
          else {
            var Bb = "[script]" + c.src, Ia = d.scriptsMap.get(Bb);
            if (!Ia) {
              Ia = { type: "script", chunks: [], state: 0, props: null };
              d.scriptsMap.set(Bb, Ia);
              d.scripts.add(Ia);
              var qc = c, ab = d.preloadsMap.get(Bb);
              if (ab) {
                ab.state |= 4;
                var bb = qc = la({}, c), rc = ab.props;
                null == bb.crossOrigin && (bb.crossOrigin = rc.crossOrigin);
                null == bb.integrity && (bb.integrity = rc.integrity);
              }
              vb(Ia.chunks, qc);
            }
            g && a.push("<!-- -->");
            pc = null;
          }
          return pc;
        case "style":
          var Ja = c.precedence, Ka = c.href;
          if (3 === f.insertionMode || f.noscriptTagInScope || null != c.itemProp || "string" !== typeof Ja || "string" !== typeof Ka || "" === Ka) {
            a.push(C("style"));
            var oa = null, sc = null, La;
            for (La in c)
              if (n.call(c, La)) {
                var cb = c[La];
                if (null != cb)
                  switch (La) {
                    case "children":
                      oa = cb;
                      break;
                    case "dangerouslySetInnerHTML":
                      sc = cb;
                      break;
                    default:
                      x(a, La, cb);
                  }
              }
            a.push(">");
            var Ma = Array.isArray(oa) ? 2 > oa.length ? oa[0] : null : oa;
            "function" !== typeof Ma && "symbol" !== typeof Ma && null !== Ma && void 0 !== Ma && a.push(q("" + Ma));
            y(a, sc, oa);
            a.push("</", "style", ">");
            var tc = null;
          } else {
            var uc = "[style]" + Ka, S = d.stylesMap.get(uc);
            if (!S) {
              if (S = d.stylePrecedences.get(Ja))
                S.props.hrefs.push(Ka);
              else {
                S = { type: "style", chunks: [], state: 0, props: { precedence: Ja, hrefs: [Ka] } };
                d.stylePrecedences.set(
                  Ja,
                  S
                );
                var vc = /* @__PURE__ */ new Set();
                vc.add(S);
                d.precedences.set(Ja, vc);
              }
              d.stylesMap.set(uc, S);
              d.boundaryResources && d.boundaryResources.add(S);
              var wc = S.chunks, pa = null, xc = null, db;
              for (db in c)
                if (n.call(c, db)) {
                  var Cb = c[db];
                  if (null != Cb)
                    switch (db) {
                      case "children":
                        pa = Cb;
                        break;
                      case "dangerouslySetInnerHTML":
                        xc = Cb;
                    }
                }
              var Na = Array.isArray(pa) ? 2 > pa.length ? pa[0] : null : pa;
              "function" !== typeof Na && "symbol" !== typeof Na && null !== Na && void 0 !== Na && wc.push(q("" + Na));
              y(wc, xc, pa);
            }
            g && a.push("<!-- -->");
            tc = void 0;
          }
          return tc;
        case "meta":
          if (3 === f.insertionMode || f.noscriptTagInScope || null != c.itemProp)
            var yc = tb(a, c, "meta");
          else
            g && a.push("<!-- -->"), yc = "string" === typeof c.charSet ? tb(e.charsetChunks, c, "meta") : tb(e.hoistableChunks, c, "meta");
          return yc;
        case "listing":
        case "pre":
          a.push(C(b));
          var Oa = null, Pa = null, Qa;
          for (Qa in c)
            if (n.call(c, Qa)) {
              var eb = c[Qa];
              if (null != eb)
                switch (Qa) {
                  case "children":
                    Oa = eb;
                    break;
                  case "dangerouslySetInnerHTML":
                    Pa = eb;
                    break;
                  default:
                    x(a, Qa, eb);
                }
            }
          a.push(">");
          if (null != Pa) {
            if (null != Oa)
              throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if ("object" !== typeof Pa || !("__html" in Pa))
              throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            var ja = Pa.__html;
            null !== ja && void 0 !== ja && ("string" === typeof ja && 0 < ja.length && "\n" === ja[0] ? a.push("\n", ja) : a.push("" + ja));
          }
          "string" === typeof Oa && "\n" === Oa[0] && a.push("\n");
          return Oa;
        case "base":
        case "area":
        case "br":
        case "col":
        case "embed":
        case "hr":
        case "img":
        case "keygen":
        case "param":
        case "source":
        case "track":
        case "wbr":
          return tb(
            a,
            c,
            b
          );
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          break;
        case "head":
          if (2 > f.insertionMode && null === e.headChunks) {
            e.headChunks = [];
            var zc = wb(e.headChunks, c, "head");
          } else
            zc = wb(a, c, "head");
          return zc;
        case "html":
          if (0 === f.insertionMode && null === e.htmlChunks) {
            e.htmlChunks = ["<!DOCTYPE html>"];
            var Ac = wb(e.htmlChunks, c, "html");
          } else
            Ac = wb(a, c, "html");
          return Ac;
        default:
          if (-1 !== b.indexOf("-")) {
            a.push(C(b));
            var Db = null, Bc = null, Y;
            for (Y in c)
              if (n.call(c, Y)) {
                var H = c[Y];
                if (null != H && "function" !== typeof H && "object" !== typeof H && false !== H)
                  switch (true === H && (H = ""), "className" === Y && (Y = "class"), Y) {
                    case "children":
                      Db = H;
                      break;
                    case "dangerouslySetInnerHTML":
                      Bc = H;
                      break;
                    case "style":
                      kb(a, H);
                      break;
                    case "suppressContentEditableWarning":
                    case "suppressHydrationWarning":
                      break;
                    default:
                      ta(Y) && "function" !== typeof H && "symbol" !== typeof H && a.push(" ", Y, '="', q(H), '"');
                  }
              }
            a.push(">");
            y(a, Bc, Db);
            return Db;
          }
      }
      return wb(a, c, b);
    }
    function Gb(a, b) {
      b = b.bootstrapChunks;
      for (var c = 0; c < b.length - 1; c++)
        a.push(b[c]);
      return c < b.length ? (c = b[c], b.length = 0, a.push(c)) : true;
    }
    function Hb(a, b, c) {
      a.push('<!--$?--><template id="');
      if (null === c)
        throw Error("An ID must have been assigned before we can complete the boundary.");
      a.push(c);
      return a.push('"></template>');
    }
    function Ib(a, b, c, d) {
      switch (c.insertionMode) {
        case 0:
        case 1:
        case 2:
          return a.push('<div hidden id="'), a.push(b.segmentPrefix), b = d.toString(16), a.push(b), a.push('">');
        case 3:
          return a.push('<svg aria-hidden="true" style="display:none" id="'), a.push(b.segmentPrefix), b = d.toString(16), a.push(b), a.push('">');
        case 4:
          return a.push('<math aria-hidden="true" style="display:none" id="'), a.push(b.segmentPrefix), b = d.toString(16), a.push(b), a.push('">');
        case 5:
          return a.push('<table hidden id="'), a.push(b.segmentPrefix), b = d.toString(16), a.push(b), a.push('">');
        case 6:
          return a.push('<table hidden><tbody id="'), a.push(b.segmentPrefix), b = d.toString(16), a.push(b), a.push('">');
        case 7:
          return a.push('<table hidden><tr id="'), a.push(b.segmentPrefix), b = d.toString(16), a.push(b), a.push('">');
        case 8:
          return a.push('<table hidden><colgroup id="'), a.push(b.segmentPrefix), b = d.toString(16), a.push(b), a.push('">');
        default:
          throw Error("Unknown insertion mode. This is a bug in React.");
      }
    }
    function Jb(a, b) {
      switch (b.insertionMode) {
        case 0:
        case 1:
        case 2:
          return a.push("</div>");
        case 3:
          return a.push("</svg>");
        case 4:
          return a.push("</math>");
        case 5:
          return a.push("</table>");
        case 6:
          return a.push("</tbody></table>");
        case 7:
          return a.push("</tr></table>");
        case 8:
          return a.push("</colgroup></table>");
        default:
          throw Error("Unknown insertion mode. This is a bug in React.");
      }
    }
    var Kb = /[<\u2028\u2029]/g;
    function Lb(a) {
      return JSON.stringify(a).replace(Kb, function(b) {
        switch (b) {
          case "<":
            return "\\u003c";
          case "\u2028":
            return "\\u2028";
          case "\u2029":
            return "\\u2029";
          default:
            throw Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
        }
      });
    }
    var Mb = /[&><\u2028\u2029]/g;
    function Nb(a) {
      return JSON.stringify(a).replace(Mb, function(b) {
        switch (b) {
          case "&":
            return "\\u0026";
          case ">":
            return "\\u003e";
          case "<":
            return "\\u003c";
          case "\u2028":
            return "\\u2028";
          case "\u2029":
            return "\\u2029";
          default:
            throw Error("escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
        }
      });
    }
    var Ob = false;
    var Pb = true;
    function Qb(a) {
      if ("stylesheet" === a.type && 0 === (a.state & 1))
        Ob = true;
      else if ("style" === a.type) {
        var b = a.chunks, c = a.props.hrefs, d = 0;
        if (b.length) {
          this.push('<style media="not all" data-precedence="');
          a = q(a.props.precedence);
          this.push(a);
          if (c.length) {
            for (this.push('" data-href="'); d < c.length - 1; d++)
              a = q(c[d]), this.push(a), this.push(" ");
            d = q(c[d]);
            this.push(d);
          }
          this.push('">');
          for (d = 0; d < b.length; d++)
            this.push(b[d]);
          Pb = this.push("</style>");
          Ob = true;
          b.length = 0;
          c.length = 0;
        }
      }
    }
    function Rb(a, b, c) {
      Ob = false;
      Pb = true;
      b.forEach(Qb, a);
      Ob && (c.stylesToHoist = true);
      return Pb;
    }
    function Sb(a) {
      if (0 === (a.state & 7)) {
        for (var b = a.chunks, c = 0; c < b.length; c++)
          this.push(b[c]);
        a.state |= 1;
      }
    }
    function Tb(a) {
      if (0 === (a.state & 7)) {
        for (var b = a.chunks, c = 0; c < b.length; c++)
          this.push(b[c]);
        a.state |= 2;
      }
    }
    var Ub = null;
    var Vb = false;
    function Wb(a, b, c) {
      b = a.chunks;
      if (a.state & 3)
        c.delete(a);
      else if ("style" === a.type)
        Ub = a;
      else {
        z(b, a.props);
        for (c = 0; c < b.length; c++)
          this.push(b[c]);
        a.state |= 1;
        Vb = true;
      }
    }
    function Xb(a, b) {
      Vb = false;
      a.forEach(Wb, this);
      a.clear();
      a = Ub.chunks;
      var c = Ub.props.hrefs;
      if (false === Vb || a.length) {
        this.push('<style data-precedence="');
        b = q(b);
        this.push(b);
        b = 0;
        if (c.length) {
          for (this.push('" data-href="'); b < c.length - 1; b++) {
            var d = q(c[b]);
            this.push(d);
            this.push(" ");
          }
          b = q(c[b]);
          this.push(b);
        }
        this.push('">');
        for (b = 0; b < a.length; b++)
          this.push(a[b]);
        this.push("</style>");
        a.length = 0;
        c.length = 0;
      }
    }
    function Yb(a) {
      if (!(a.state & 8) && "style" !== a.type) {
        var b = a.chunks, c = a.props;
        z(b, { rel: "preload", as: "style", href: a.props.href, crossOrigin: c.crossOrigin, fetchPriority: c.fetchPriority, integrity: c.integrity, media: c.media, hrefLang: c.hrefLang, referrerPolicy: c.referrerPolicy });
        for (c = 0; c < b.length; c++)
          this.push(b[c]);
        a.state |= 8;
        b.length = 0;
      }
    }
    function Zb(a) {
      a.forEach(Yb, this);
      a.clear();
    }
    function $b(a, b) {
      a.push("[");
      var c = "[";
      b.forEach(function(d) {
        if ("style" !== d.type && !(d.state & 1)) {
          if (d.state & 3)
            a.push(c), d = Nb("" + d.props.href), a.push(d), a.push("]"), c = ",[";
          else if ("stylesheet" === d.type) {
            a.push(c);
            var e = d.props["data-precedence"], f = d.props, g = Nb("" + d.props.href);
            a.push(g);
            e = "" + e;
            a.push(",");
            e = Nb(e);
            a.push(e);
            for (var h in f)
              if (n.call(f, h) && (g = f[h], null != g))
                switch (h) {
                  case "href":
                  case "rel":
                  case "precedence":
                  case "data-precedence":
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                  default:
                    a: {
                      e = a;
                      var k = h.toLowerCase();
                      switch (typeof g) {
                        case "function":
                        case "symbol":
                          break a;
                      }
                      switch (h) {
                        case "innerHTML":
                        case "dangerouslySetInnerHTML":
                        case "suppressContentEditableWarning":
                        case "suppressHydrationWarning":
                        case "style":
                          break a;
                        case "className":
                          k = "class";
                          g = "" + g;
                          break;
                        case "hidden":
                          if (false === g)
                            break a;
                          g = "";
                          break;
                        case "src":
                        case "href":
                          g = "" + g;
                          break;
                        default:
                          if (2 < h.length && ("o" === h[0] || "O" === h[0]) && ("n" === h[1] || "N" === h[1]) || !ta(h))
                            break a;
                          g = "" + g;
                      }
                      e.push(",");
                      k = Nb(k);
                      e.push(k);
                      e.push(",");
                      g = Nb(g);
                      e.push(g);
                    }
                }
            a.push("]");
            c = ",[";
            d.state |= 2;
          }
        }
      });
      a.push("]");
    }
    function ac(a, b) {
      a.push("[");
      var c = "[";
      b.forEach(function(d) {
        if ("style" !== d.type && !(d.state & 1)) {
          if (d.state & 3)
            a.push(c), d = q(JSON.stringify("" + d.props.href)), a.push(d), a.push("]"), c = ",[";
          else if ("stylesheet" === d.type) {
            a.push(c);
            var e = d.props["data-precedence"], f = d.props, g = q(JSON.stringify("" + d.props.href));
            a.push(g);
            e = "" + e;
            a.push(",");
            e = q(JSON.stringify(e));
            a.push(e);
            for (var h in f)
              if (n.call(f, h) && (g = f[h], null != g))
                switch (h) {
                  case "href":
                  case "rel":
                  case "precedence":
                  case "data-precedence":
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                  default:
                    a: {
                      e = a;
                      var k = h.toLowerCase();
                      switch (typeof g) {
                        case "function":
                        case "symbol":
                          break a;
                      }
                      switch (h) {
                        case "innerHTML":
                        case "dangerouslySetInnerHTML":
                        case "suppressContentEditableWarning":
                        case "suppressHydrationWarning":
                        case "style":
                          break a;
                        case "className":
                          k = "class";
                          g = "" + g;
                          break;
                        case "hidden":
                          if (false === g)
                            break a;
                          g = "";
                          break;
                        case "src":
                        case "href":
                          g = "" + g;
                          break;
                        default:
                          if (2 < h.length && ("o" === h[0] || "O" === h[0]) && ("n" === h[1] || "N" === h[1]) || !ta(h))
                            break a;
                          g = "" + g;
                      }
                      e.push(",");
                      k = q(JSON.stringify(k));
                      e.push(k);
                      e.push(",");
                      g = q(JSON.stringify(g));
                      e.push(g);
                    }
                }
            a.push("]");
            c = ",[";
            d.state |= 2;
          }
        }
      });
      a.push("]");
    }
    function bc() {
      return { preloadsMap: /* @__PURE__ */ new Map(), preconnectsMap: /* @__PURE__ */ new Map(), stylesMap: /* @__PURE__ */ new Map(), scriptsMap: /* @__PURE__ */ new Map(), preconnects: /* @__PURE__ */ new Set(), fontPreloads: /* @__PURE__ */ new Set(), precedences: /* @__PURE__ */ new Map(), stylePrecedences: /* @__PURE__ */ new Map(), scripts: /* @__PURE__ */ new Set(), explicitStylesheetPreloads: /* @__PURE__ */ new Set(), explicitScriptPreloads: /* @__PURE__ */ new Set(), explicitOtherPreloads: /* @__PURE__ */ new Set(), boundaryResources: null };
    }
    function Ya(a) {
      var b = I ? I : null;
      if (b) {
        var c = b.resources;
        if ("string" === typeof a && a) {
          var d = "[prefetchDNS]" + a, e = c.preconnectsMap.get(d);
          e || (e = { type: "preconnect", chunks: [], state: 0, props: null }, c.preconnectsMap.set(d, e), z(e.chunks, { href: a, rel: "dns-prefetch" }));
          c.preconnects.add(e);
          cc(b);
        }
      }
    }
    function Za(a, b) {
      var c = I ? I : null;
      if (c) {
        var d = c.resources;
        if ("string" === typeof a && a) {
          b = null == b || "string" !== typeof b.crossOrigin ? null : "use-credentials" === b.crossOrigin ? "use-credentials" : "";
          var e = "[preconnect][" + (null === b ? "null" : b) + "]" + a, f = d.preconnectsMap.get(e);
          f || (f = { type: "preconnect", chunks: [], state: 0, props: null }, d.preconnectsMap.set(e, f), z(f.chunks, { rel: "preconnect", href: a, crossOrigin: b }));
          d.preconnects.add(f);
          cc(c);
        }
      }
    }
    function fb(a, b) {
      var c = I ? I : null;
      if (c) {
        var d = c.resources;
        if ("string" === typeof a && a && "object" === typeof b && null !== b && "string" === typeof b.as && b.as) {
          var e = b.as;
          if ("image" === e) {
            var f = b.imageSrcSet;
            var g = b.imageSizes, h = "";
            "string" === typeof f && "" !== f ? (h += "[" + f + "]", "string" === typeof g && (h += "[" + g + "]")) : h += "[][]" + a;
            f = "[" + e + "]" + h;
          } else
            f = "[" + e + "]" + a;
          g = d.preloadsMap.get(f);
          g || (g = { type: "preload", chunks: [], state: 0, props: {
            rel: "preload",
            as: e,
            href: "image" === e && b.imageSrcSet ? void 0 : a,
            crossOrigin: "font" === e ? "" : b.crossOrigin,
            integrity: b.integrity,
            type: b.type,
            nonce: b.nonce,
            fetchPriority: b.fetchPriority,
            imageSrcSet: b.imageSrcSet,
            imageSizes: b.imageSizes
          } }, d.preloadsMap.set(f, g), z(g.chunks, g.props));
          switch (e) {
            case "font":
              d.fontPreloads.add(g);
              break;
            case "style":
              d.explicitStylesheetPreloads.add(g);
              break;
            case "script":
              d.explicitScriptPreloads.add(g);
              break;
            default:
              d.explicitOtherPreloads.add(g);
          }
          cc(c);
        }
      }
    }
    function gb(a, b) {
      var c = I ? I : null;
      if (c) {
        var d = c.resources;
        if ("string" === typeof a && a && "object" === typeof b && null !== b) {
          var e = b.as;
          switch (e) {
            case "style":
              var f = "[" + e + "]" + a, g = d.stylesMap.get(f);
              e = b.precedence || "default";
              if (!g) {
                g = 0;
                var h = d.preloadsMap.get(f);
                h && h.state & 3 && (g = 8);
                g = { type: "stylesheet", chunks: [], state: g, props: { rel: "stylesheet", href: a, "data-precedence": e, crossOrigin: b.crossOrigin, integrity: b.integrity, fetchPriority: b.fetchPriority } };
                d.stylesMap.set(f, g);
                a = d.precedences.get(e);
                a || (a = /* @__PURE__ */ new Set(), d.precedences.set(
                  e,
                  a
                ), b = { type: "style", chunks: [], state: 0, props: { precedence: e, hrefs: [] } }, a.add(b), d.stylePrecedences.set(e, b));
                a.add(g);
                cc(c);
              }
              break;
            case "script":
              f = "[" + e + "]" + a, e = d.scriptsMap.get(f), e || (e = { type: "script", chunks: [], state: 0, props: null }, d.scriptsMap.set(f, e), a = { src: a, async: true, crossOrigin: b.crossOrigin, integrity: b.integrity, nonce: b.nonce, fetchPriority: b.fetchPriority }, d.scripts.add(e), vb(e.chunks, a), cc(c));
          }
        }
      }
    }
    function dc(a) {
      this.add(a);
    }
    function ec(a, b, c, d) {
      a = void 0 === c ? "" : c;
      c = null;
      var e = 0;
      void 0 !== d && (e = 1, "string" === typeof d ? (c = { src: d, chunks: [] }, vb(c.chunks, { src: d, async: true, integrity: void 0, nonce: void 0 })) : (c = { src: d.src, chunks: [] }, vb(c.chunks, { src: d.src, async: true, integrity: d.integrity, nonce: void 0 })));
      return {
        bootstrapChunks: [],
        placeholderPrefix: a + "P:",
        segmentPrefix: a + "S:",
        boundaryPrefix: a + "B:",
        idPrefix: a,
        nextSuspenseID: 0,
        streamingFormat: e,
        startInlineScript: "<script>",
        instructions: 0,
        externalRuntimeScript: c,
        htmlChunks: null,
        headChunks: null,
        hasBody: false,
        charsetChunks: [],
        preconnectChunks: [],
        preloadChunks: [],
        hoistableChunks: [],
        stylesToHoist: false,
        generateStaticMarkup: b
      };
    }
    function fc() {
      return { insertionMode: 2, selectedValue: null, noscriptTagInScope: false };
    }
    function gc(a, b, c, d) {
      if (c.generateStaticMarkup)
        return a.push(q(b)), false;
      "" === b ? a = d : (d && a.push("<!-- -->"), a.push(q(b)), a = true);
      return a;
    }
    var Cc = Symbol.for("react.element");
    var Dc = Symbol.for("react.portal");
    var Ec = Symbol.for("react.fragment");
    var Fc = Symbol.for("react.strict_mode");
    var Gc = Symbol.for("react.profiler");
    var Hc = Symbol.for("react.provider");
    var Ic = Symbol.for("react.context");
    var Jc = Symbol.for("react.server_context");
    var Kc = Symbol.for("react.forward_ref");
    var Lc = Symbol.for("react.suspense");
    var Mc = Symbol.for("react.suspense_list");
    var Nc = Symbol.for("react.memo");
    var Oc = Symbol.for("react.lazy");
    var Pc = Symbol.for("react.scope");
    var Qc = Symbol.for("react.debug_trace_mode");
    var Rc = Symbol.for("react.offscreen");
    var Sc = Symbol.for("react.legacy_hidden");
    var Tc = Symbol.for("react.cache");
    var Uc = Symbol.for("react.default_value");
    var Vc = Symbol.for("react.memo_cache_sentinel");
    var Wc = Symbol.iterator;
    function Xc(a) {
      if (null == a)
        return null;
      if ("function" === typeof a)
        return a.displayName || a.name || null;
      if ("string" === typeof a)
        return a;
      switch (a) {
        case Ec:
          return "Fragment";
        case Dc:
          return "Portal";
        case Gc:
          return "Profiler";
        case Fc:
          return "StrictMode";
        case Lc:
          return "Suspense";
        case Mc:
          return "SuspenseList";
        case Tc:
          return "Cache";
      }
      if ("object" === typeof a)
        switch (a.$$typeof) {
          case Ic:
            return (a.displayName || "Context") + ".Consumer";
          case Hc:
            return (a._context.displayName || "Context") + ".Provider";
          case Kc:
            var b = a.render;
            a = a.displayName;
            a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
            return a;
          case Nc:
            return b = a.displayName || null, null !== b ? b : Xc(a.type) || "Memo";
          case Oc:
            b = a._payload;
            a = a._init;
            try {
              return Xc(a(b));
            } catch (c) {
              break;
            }
          case Jc:
            return (a.displayName || a._globalName) + ".Provider";
        }
      return null;
    }
    var Yc = {};
    function Zc(a, b) {
      a = a.contextTypes;
      if (!a)
        return Yc;
      var c = {}, d;
      for (d in a)
        c[d] = b[d];
      return c;
    }
    var $c = null;
    function ad(a, b) {
      if (a !== b) {
        a.context._currentValue2 = a.parentValue;
        a = a.parent;
        var c = b.parent;
        if (null === a) {
          if (null !== c)
            throw Error("The stacks must reach the root at the same time. This is a bug in React.");
        } else {
          if (null === c)
            throw Error("The stacks must reach the root at the same time. This is a bug in React.");
          ad(a, c);
        }
        b.context._currentValue2 = b.value;
      }
    }
    function bd(a) {
      a.context._currentValue2 = a.parentValue;
      a = a.parent;
      null !== a && bd(a);
    }
    function cd(a) {
      var b = a.parent;
      null !== b && cd(b);
      a.context._currentValue2 = a.value;
    }
    function dd(a, b) {
      a.context._currentValue2 = a.parentValue;
      a = a.parent;
      if (null === a)
        throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
      a.depth === b.depth ? ad(a, b) : dd(a, b);
    }
    function ed(a, b) {
      var c = b.parent;
      if (null === c)
        throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
      a.depth === c.depth ? ad(a, c) : ed(a, c);
      b.context._currentValue2 = b.value;
    }
    function fd(a) {
      var b = $c;
      b !== a && (null === b ? cd(a) : null === a ? bd(b) : b.depth === a.depth ? ad(b, a) : b.depth > a.depth ? dd(b, a) : ed(b, a), $c = a);
    }
    var gd = { isMounted: function() {
      return false;
    }, enqueueSetState: function(a, b) {
      a = a._reactInternals;
      null !== a.queue && a.queue.push(b);
    }, enqueueReplaceState: function(a, b) {
      a = a._reactInternals;
      a.replace = true;
      a.queue = [b];
    }, enqueueForceUpdate: function() {
    } };
    function hd(a, b, c, d) {
      var e = void 0 !== a.state ? a.state : null;
      a.updater = gd;
      a.props = c;
      a.state = e;
      var f = { queue: [], replace: false };
      a._reactInternals = f;
      var g = b.contextType;
      a.context = "object" === typeof g && null !== g ? g._currentValue2 : d;
      g = b.getDerivedStateFromProps;
      "function" === typeof g && (g = g(c, e), e = null === g || void 0 === g ? e : la({}, e, g), a.state = e);
      if ("function" !== typeof b.getDerivedStateFromProps && "function" !== typeof a.getSnapshotBeforeUpdate && ("function" === typeof a.UNSAFE_componentWillMount || "function" === typeof a.componentWillMount))
        if (b = a.state, "function" === typeof a.componentWillMount && a.componentWillMount(), "function" === typeof a.UNSAFE_componentWillMount && a.UNSAFE_componentWillMount(), b !== a.state && gd.enqueueReplaceState(a, a.state, null), null !== f.queue && 0 < f.queue.length)
          if (b = f.queue, g = f.replace, f.queue = null, f.replace = false, g && 1 === b.length)
            a.state = b[0];
          else {
            f = g ? b[0] : a.state;
            e = true;
            for (g = g ? 1 : 0; g < b.length; g++) {
              var h = b[g];
              h = "function" === typeof h ? h.call(a, f, c, d) : h;
              null != h && (e ? (e = false, f = la({}, f, h)) : la(f, h));
            }
            a.state = f;
          }
        else
          f.queue = null;
    }
    var id = { id: 1, overflow: "" };
    function jd(a, b, c) {
      var d = a.id;
      a = a.overflow;
      var e = 32 - kd(d) - 1;
      d &= ~(1 << e);
      c += 1;
      var f = 32 - kd(b) + e;
      if (30 < f) {
        var g = e - e % 5;
        f = (d & (1 << g) - 1).toString(32);
        d >>= g;
        e -= g;
        return { id: 1 << 32 - kd(b) + e | c << e | d, overflow: f + a };
      }
      return { id: 1 << f | c << e | d, overflow: a };
    }
    var kd = Math.clz32 ? Math.clz32 : ld;
    var md = Math.log;
    var nd = Math.LN2;
    function ld(a) {
      a >>>= 0;
      return 0 === a ? 32 : 31 - (md(a) / nd | 0) | 0;
    }
    var od = Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`");
    function pd() {
    }
    function qd(a, b, c) {
      c = a[c];
      void 0 === c ? a.push(b) : c !== b && (b.then(pd, pd), b = c);
      switch (b.status) {
        case "fulfilled":
          return b.value;
        case "rejected":
          throw b.reason;
        default:
          if ("string" !== typeof b.status)
            switch (a = b, a.status = "pending", a.then(function(d) {
              if ("pending" === b.status) {
                var e = b;
                e.status = "fulfilled";
                e.value = d;
              }
            }, function(d) {
              if ("pending" === b.status) {
                var e = b;
                e.status = "rejected";
                e.reason = d;
              }
            }), b.status) {
              case "fulfilled":
                return b.value;
              case "rejected":
                throw b.reason;
            }
          rd = b;
          throw od;
      }
    }
    var rd = null;
    function sd() {
      if (null === rd)
        throw Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
      var a = rd;
      rd = null;
      return a;
    }
    function td(a, b) {
      return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
    }
    var ud = "function" === typeof Object.is ? Object.is : td;
    var J = null;
    var vd = null;
    var wd = null;
    var K = null;
    var xd = false;
    var yd = false;
    var zd = 0;
    var Ad = 0;
    var Bd = null;
    var N = null;
    var Cd = 0;
    function Dd() {
      if (null === J)
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
      return J;
    }
    function Ed() {
      if (0 < Cd)
        throw Error("Rendered more hooks than during the previous render");
      return { memoizedState: null, queue: null, next: null };
    }
    function Fd() {
      null === K ? null === wd ? (xd = false, wd = K = Ed()) : (xd = true, K = wd) : null === K.next ? (xd = false, K = K.next = Ed()) : (xd = true, K = K.next);
      return K;
    }
    function Gd(a, b, c, d) {
      for (; yd; )
        yd = false, Ad = zd = 0, Cd += 1, K = null, c = a(b, d);
      Hd();
      return c;
    }
    function Id() {
      var a = Bd;
      Bd = null;
      return a;
    }
    function Hd() {
      vd = J = null;
      yd = false;
      wd = null;
      Cd = 0;
      K = N = null;
    }
    function Jd(a, b) {
      return "function" === typeof b ? b(a) : b;
    }
    function Kd(a, b, c) {
      J = Dd();
      K = Fd();
      if (xd) {
        var d = K.queue;
        b = d.dispatch;
        if (null !== N && (c = N.get(d), void 0 !== c)) {
          N.delete(d);
          d = K.memoizedState;
          do
            d = a(d, c.action), c = c.next;
          while (null !== c);
          K.memoizedState = d;
          return [d, b];
        }
        return [K.memoizedState, b];
      }
      a = a === Jd ? "function" === typeof b ? b() : b : void 0 !== c ? c(b) : b;
      K.memoizedState = a;
      a = K.queue = { last: null, dispatch: null };
      a = a.dispatch = Ld.bind(null, J, a);
      return [K.memoizedState, a];
    }
    function Md(a, b) {
      J = Dd();
      K = Fd();
      b = void 0 === b ? null : b;
      if (null !== K) {
        var c = K.memoizedState;
        if (null !== c && null !== b) {
          var d = c[1];
          a:
            if (null === d)
              d = false;
            else {
              for (var e = 0; e < d.length && e < b.length; e++)
                if (!ud(b[e], d[e])) {
                  d = false;
                  break a;
                }
              d = true;
            }
          if (d)
            return c[0];
        }
      }
      a = a();
      K.memoizedState = [a, b];
      return a;
    }
    function Ld(a, b, c) {
      if (25 <= Cd)
        throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
      if (a === J)
        if (yd = true, a = { action: c, next: null }, null === N && (N = /* @__PURE__ */ new Map()), c = N.get(b), void 0 === c)
          N.set(b, a);
        else {
          for (b = c; null !== b.next; )
            b = b.next;
          b.next = a;
        }
    }
    function Nd() {
      throw Error("A function wrapped in useEffectEvent can't be called during rendering.");
    }
    function Od() {
      throw Error("startTransition cannot be called during server rendering.");
    }
    function Pd() {
      throw Error("Cannot update optimistic state while rendering.");
    }
    function Rd(a) {
      var b = Ad;
      Ad += 1;
      null === Bd && (Bd = []);
      return qd(Bd, a, b);
    }
    function Sd() {
      throw Error("Cache cannot be refreshed during server rendering.");
    }
    function Td() {
    }
    var Vd = {
      readContext: function(a) {
        return a._currentValue2;
      },
      use: function(a) {
        if (null !== a && "object" === typeof a) {
          if ("function" === typeof a.then)
            return Rd(a);
          if (a.$$typeof === Ic || a.$$typeof === Jc)
            return a._currentValue2;
        }
        throw Error("An unsupported type was passed to use(): " + String(a));
      },
      useContext: function(a) {
        Dd();
        return a._currentValue2;
      },
      useMemo: Md,
      useReducer: Kd,
      useRef: function(a) {
        J = Dd();
        K = Fd();
        var b = K.memoizedState;
        return null === b ? (a = { current: a }, K.memoizedState = a) : b;
      },
      useState: function(a) {
        return Kd(Jd, a);
      },
      useInsertionEffect: Td,
      useLayoutEffect: Td,
      useCallback: function(a, b) {
        return Md(function() {
          return a;
        }, b);
      },
      useImperativeHandle: Td,
      useEffect: Td,
      useDebugValue: Td,
      useDeferredValue: function(a) {
        Dd();
        return a;
      },
      useTransition: function() {
        Dd();
        return [false, Od];
      },
      useId: function() {
        var a = vd.treeContext;
        var b = a.overflow;
        a = a.id;
        a = (a & ~(1 << 32 - kd(a) - 1)).toString(32) + b;
        var c = Ud;
        if (null === c)
          throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
        b = zd++;
        a = ":" + c.idPrefix + "R" + a;
        0 < b && (a += "H" + b.toString(32));
        return a + ":";
      },
      useSyncExternalStore: function(a, b, c) {
        if (void 0 === c)
          throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        return c();
      },
      useCacheRefresh: function() {
        return Sd;
      },
      useEffectEvent: function() {
        return Nd;
      },
      useMemoCache: function(a) {
        for (var b = Array(a), c = 0; c < a; c++)
          b[c] = Vc;
        return b;
      },
      useHostTransitionStatus: function() {
        Dd();
        return Wa;
      },
      useOptimistic: function(a) {
        Dd();
        return [a, Pd];
      }
    };
    var Ud = null;
    var Wd = { getCacheSignal: function() {
      throw Error("Not implemented.");
    }, getCacheForType: function() {
      throw Error("Not implemented.");
    } };
    var Xd = Va.ReactCurrentDispatcher;
    var Yd = Va.ReactCurrentCache;
    function Zd(a) {
      console.error(a);
      return null;
    }
    function $d() {
    }
    function ae(a, b, c, d, e, f, g, h, k, m) {
      Xa.current = hb;
      var t = [], p = /* @__PURE__ */ new Set();
      b = { destination: null, flushScheduled: false, responseState: c, progressiveChunkSize: void 0 === e ? 12800 : e, status: 0, fatalError: null, nextSegmentId: 0, allPendingTasks: 0, pendingRootTasks: 0, resources: b, completedRootSegment: null, abortableTasks: p, pingedTasks: t, clientRenderedBoundaries: [], completedBoundaries: [], partialBoundaries: [], onError: void 0 === f ? Zd : f, onAllReady: void 0 === g ? $d : g, onShellReady: void 0 === h ? $d : h, onShellError: void 0 === k ? $d : k, onFatalError: void 0 === m ? $d : m };
      d = be(b, 0, null, d, false, false);
      d.parentFlushed = true;
      a = ce(b, null, a, null, d, p, Yc, null, id);
      t.push(a);
      return b;
    }
    var I = null;
    function ce(a, b, c, d, e, f, g, h, k) {
      a.allPendingTasks++;
      null === d ? a.pendingRootTasks++ : d.pendingTasks++;
      var m = { node: c, ping: function() {
        a.pingedTasks.push(m);
        1 === a.pingedTasks.length && (a.flushScheduled = null !== a.destination, de(a));
      }, blockedBoundary: d, blockedSegment: e, abortSet: f, legacyContext: g, context: h, treeContext: k, thenableState: b };
      f.add(m);
      return m;
    }
    function be(a, b, c, d, e, f) {
      return { status: 0, id: -1, index: b, parentFlushed: false, chunks: [], children: [], formatContext: d, boundary: c, lastPushedText: e, textEmbedded: f };
    }
    function ee(a, b) {
      a = a.onError(b);
      if (null != a && "string" !== typeof a)
        throw Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof a + '" instead');
      return a;
    }
    function fe(a, b) {
      var c = a.onShellError;
      c(b);
      c = a.onFatalError;
      c(b);
      null !== a.destination ? (a.status = 2, a.destination.destroy(b)) : (a.status = 1, a.fatalError = b);
    }
    function ge(a, b, c, d) {
      var e = c.render(), f = d.childContextTypes;
      if (null !== f && void 0 !== f) {
        var g = b.legacyContext;
        if ("function" !== typeof c.getChildContext)
          d = g;
        else {
          c = c.getChildContext();
          for (var h in c)
            if (!(h in f))
              throw Error((Xc(d) || "Unknown") + '.getChildContext(): key "' + h + '" is not defined in childContextTypes.');
          d = la({}, g, c);
        }
        b.legacyContext = d;
        Z(a, b, null, e);
        b.legacyContext = g;
      } else
        Z(a, b, null, e);
    }
    function he(a, b) {
      if (a && a.defaultProps) {
        b = la({}, b);
        a = a.defaultProps;
        for (var c in a)
          void 0 === b[c] && (b[c] = a[c]);
        return b;
      }
      return b;
    }
    function ie(a, b, c, d, e, f) {
      if ("function" === typeof d)
        if (d.prototype && d.prototype.isReactComponent)
          c = Zc(d, b.legacyContext), f = d.contextType, f = new d(e, "object" === typeof f && null !== f ? f._currentValue2 : c), hd(f, d, e, c), ge(a, b, f, d);
        else {
          f = Zc(d, b.legacyContext);
          J = {};
          vd = b;
          Ad = zd = 0;
          Bd = c;
          c = d(e, f);
          c = Gd(d, e, c, f);
          var g = 0 !== zd;
          if ("object" === typeof c && null !== c && "function" === typeof c.render && void 0 === c.$$typeof)
            hd(c, d, e, f), ge(a, b, c, d);
          else if (g) {
            e = b.treeContext;
            b.treeContext = jd(e, 1, 0);
            try {
              Z(a, b, null, c);
            } finally {
              b.treeContext = e;
            }
          } else
            Z(a, b, null, c);
        }
      else if ("string" === typeof d) {
        c = b.blockedSegment;
        g = Fb(c.chunks, d, e, a.resources, a.responseState, c.formatContext, c.lastPushedText);
        c.lastPushedText = false;
        f = c.formatContext;
        c.formatContext = ib(f, d, e);
        je(a, b, g);
        c.formatContext = f;
        a: {
          b = c.chunks;
          switch (d) {
            case "title":
            case "style":
            case "script":
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr":
              break a;
            case "body":
              if (1 >= f.insertionMode) {
                a.responseState.hasBody = true;
                break a;
              }
              break;
            case "html":
              if (0 === f.insertionMode)
                break a;
          }
          b.push("</", d, ">");
        }
        c.lastPushedText = false;
      } else {
        switch (d) {
          case Sc:
          case Qc:
          case Fc:
          case Gc:
          case Ec:
            Z(a, b, null, e.children);
            return;
          case Rc:
            "hidden" !== e.mode && Z(a, b, null, e.children);
            return;
          case Mc:
            Z(a, b, null, e.children);
            return;
          case Pc:
            throw Error("ReactDOMServer does not yet support scope components.");
          case Lc:
            a: {
              d = b.blockedBoundary;
              c = b.blockedSegment;
              f = e.fallback;
              e = e.children;
              g = /* @__PURE__ */ new Set();
              var h = {
                id: null,
                rootSegmentID: -1,
                parentFlushed: false,
                pendingTasks: 0,
                forceClientRender: false,
                completedSegments: [],
                byteSize: 0,
                fallbackAbortableTasks: g,
                errorDigest: null,
                resources: /* @__PURE__ */ new Set()
              }, k = be(a, c.chunks.length, h, c.formatContext, false, false);
              c.children.push(k);
              c.lastPushedText = false;
              var m = be(a, 0, null, c.formatContext, false, false);
              m.parentFlushed = true;
              b.blockedBoundary = h;
              b.blockedSegment = m;
              a.resources.boundaryResources = h.resources;
              try {
                if (je(a, b, e), a.responseState.generateStaticMarkup || m.lastPushedText && m.textEmbedded && m.chunks.push("<!-- -->"), m.status = 1, ke(h, m), 0 === h.pendingTasks)
                  break a;
              } catch (t) {
                m.status = 4, h.forceClientRender = true, h.errorDigest = ee(a, t);
              } finally {
                a.resources.boundaryResources = d ? d.resources : null, b.blockedBoundary = d, b.blockedSegment = c;
              }
              b = ce(a, null, f, d, k, g, b.legacyContext, b.context, b.treeContext);
              a.pingedTasks.push(b);
            }
            return;
        }
        if ("object" === typeof d && null !== d)
          switch (d.$$typeof) {
            case Kc:
              d = d.render;
              J = {};
              vd = b;
              Ad = zd = 0;
              Bd = c;
              c = d(e, f);
              e = Gd(d, e, c, f);
              if (0 !== zd) {
                d = b.treeContext;
                b.treeContext = jd(d, 1, 0);
                try {
                  Z(a, b, null, e);
                } finally {
                  b.treeContext = d;
                }
              } else
                Z(
                  a,
                  b,
                  null,
                  e
                );
              return;
            case Nc:
              d = d.type;
              e = he(d, e);
              ie(a, b, c, d, e, f);
              return;
            case Hc:
              c = e.children;
              d = d._context;
              e = e.value;
              f = d._currentValue2;
              d._currentValue2 = e;
              g = $c;
              $c = e = { parent: g, depth: null === g ? 0 : g.depth + 1, context: d, parentValue: f, value: e };
              b.context = e;
              Z(a, b, null, c);
              a = $c;
              if (null === a)
                throw Error("Tried to pop a Context at the root of the app. This is a bug in React.");
              e = a.parentValue;
              a.context._currentValue2 = e === Uc ? a.context._defaultValue : e;
              a = $c = a.parent;
              b.context = a;
              return;
            case Ic:
              e = e.children;
              e = e(d._currentValue2);
              Z(a, b, null, e);
              return;
            case Oc:
              f = d._init;
              d = f(d._payload);
              e = he(d, e);
              ie(a, b, c, d, e, void 0);
              return;
          }
        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null == d ? d : typeof d) + "."));
      }
    }
    function Z(a, b, c, d) {
      b.node = d;
      if ("object" === typeof d && null !== d) {
        switch (d.$$typeof) {
          case Cc:
            ie(a, b, c, d.type, d.props, d.ref);
            return;
          case Dc:
            throw Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
          case Oc:
            c = d._init;
            d = c(d._payload);
            Z(a, b, null, d);
            return;
        }
        if (Ua(d)) {
          le(a, b, d);
          return;
        }
        null === d || "object" !== typeof d ? c = null : (c = Wc && d[Wc] || d["@@iterator"], c = "function" === typeof c ? c : null);
        if (c && (c = c.call(d))) {
          d = c.next();
          if (!d.done) {
            var e = [];
            do
              e.push(d.value), d = c.next();
            while (!d.done);
            le(a, b, e);
          }
          return;
        }
        if ("function" === typeof d.then)
          return Z(a, b, null, Rd(d));
        if (d.$$typeof === Ic || d.$$typeof === Jc)
          return Z(a, b, null, d._currentValue2);
        a = Object.prototype.toString.call(d);
        throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === a ? "object with keys {" + Object.keys(d).join(", ") + "}" : a) + "). If you meant to render a collection of children, use an array instead.");
      }
      "string" === typeof d ? (c = b.blockedSegment, c.lastPushedText = gc(b.blockedSegment.chunks, d, a.responseState, c.lastPushedText)) : "number" === typeof d && (c = b.blockedSegment, c.lastPushedText = gc(b.blockedSegment.chunks, "" + d, a.responseState, c.lastPushedText));
    }
    function le(a, b, c) {
      for (var d = c.length, e = 0; e < d; e++) {
        var f = b.treeContext;
        b.treeContext = jd(f, d, e);
        try {
          je(a, b, c[e]);
        } finally {
          b.treeContext = f;
        }
      }
    }
    function je(a, b, c) {
      var d = b.blockedSegment, e = d.children.length, f = d.chunks.length, g = b.blockedSegment.formatContext, h = b.legacyContext, k = b.context;
      try {
        return Z(a, b, null, c);
      } catch (m) {
        if (Hd(), d.children.length = e, d.chunks.length = f, c = m === od ? sd() : m, "object" === typeof c && null !== c && "function" === typeof c.then)
          d = Id(), e = b.blockedSegment, f = be(a, e.chunks.length, null, e.formatContext, e.lastPushedText, true), e.children.push(f), e.lastPushedText = false, a = ce(a, d, b.node, b.blockedBoundary, f, b.abortSet, b.legacyContext, b.context, b.treeContext).ping, c.then(a, a), b.blockedSegment.formatContext = g, b.legacyContext = h, b.context = k, fd(k);
        else
          throw b.blockedSegment.formatContext = g, b.legacyContext = h, b.context = k, fd(k), c;
      }
    }
    function me(a) {
      var b = a.blockedBoundary;
      a = a.blockedSegment;
      a.status = 3;
      ne(this, b, a);
    }
    function oe(a, b, c) {
      var d = a.blockedBoundary;
      a.blockedSegment.status = 3;
      null === d ? (b.allPendingTasks--, 1 !== b.status && 2 !== b.status && (ee(b, c), fe(b, c))) : (d.pendingTasks--, d.forceClientRender || (d.forceClientRender = true, d.errorDigest = b.onError(c), d.parentFlushed && b.clientRenderedBoundaries.push(d)), d.fallbackAbortableTasks.forEach(function(e) {
        return oe(e, b, c);
      }), d.fallbackAbortableTasks.clear(), b.allPendingTasks--, 0 === b.allPendingTasks && (a = b.onAllReady, a()));
    }
    function ke(a, b) {
      if (0 === b.chunks.length && 1 === b.children.length && null === b.children[0].boundary) {
        var c = b.children[0];
        c.id = b.id;
        c.parentFlushed = true;
        1 === c.status && ke(a, c);
      } else
        a.completedSegments.push(b);
    }
    function ne(a, b, c) {
      if (null === b) {
        if (c.parentFlushed) {
          if (null !== a.completedRootSegment)
            throw Error("There can only be one root segment. This is a bug in React.");
          a.completedRootSegment = c;
        }
        a.pendingRootTasks--;
        0 === a.pendingRootTasks && (a.onShellError = $d, b = a.onShellReady, b());
      } else
        b.pendingTasks--, b.forceClientRender || (0 === b.pendingTasks ? (c.parentFlushed && 1 === c.status && ke(b, c), b.parentFlushed && a.completedBoundaries.push(b), b.fallbackAbortableTasks.forEach(me, a), b.fallbackAbortableTasks.clear()) : c.parentFlushed && 1 === c.status && (ke(b, c), 1 === b.completedSegments.length && b.parentFlushed && a.partialBoundaries.push(b)));
      a.allPendingTasks--;
      0 === a.allPendingTasks && (a = a.onAllReady, a());
    }
    function de(a) {
      if (2 !== a.status) {
        var b = $c, c = Xd.current;
        Xd.current = Vd;
        var d = Yd.current;
        Yd.current = Wd;
        var e = I;
        I = a;
        var f = Ud;
        Ud = a.responseState;
        try {
          var g = a.pingedTasks, h;
          for (h = 0; h < g.length; h++) {
            var k = g[h];
            var m = a, t = k.blockedBoundary;
            m.resources.boundaryResources = t ? t.resources : null;
            var p = k.blockedSegment;
            if (0 === p.status) {
              fd(k.context);
              var T = p.children.length, O = p.chunks.length;
              try {
                var U = k.thenableState;
                k.thenableState = null;
                Z(m, k, U, k.node);
                m.responseState.generateStaticMarkup || p.lastPushedText && p.textEmbedded && p.chunks.push("<!-- -->");
                k.abortSet.delete(k);
                p.status = 1;
                ne(m, k.blockedBoundary, p);
              } catch (v) {
                Hd();
                p.children.length = T;
                p.chunks.length = O;
                var F = v === od ? sd() : v;
                if ("object" === typeof F && null !== F && "function" === typeof F.then) {
                  var G = k.ping;
                  F.then(G, G);
                  k.thenableState = Id();
                } else {
                  k.abortSet.delete(k);
                  p.status = 4;
                  var l = m, B = k.blockedBoundary, L = F, A = ee(l, L);
                  null === B ? fe(l, L) : (B.pendingTasks--, B.forceClientRender || (B.forceClientRender = true, B.errorDigest = A, B.parentFlushed && l.clientRenderedBoundaries.push(B)));
                  l.allPendingTasks--;
                  if (0 === l.allPendingTasks) {
                    var P = l.onAllReady;
                    P();
                  }
                }
              } finally {
                m.resources.boundaryResources = null;
              }
            }
          }
          g.splice(0, h);
          null !== a.destination && pe(a, a.destination);
        } catch (v) {
          ee(a, v), fe(a, v);
        } finally {
          Ud = f, Xd.current = c, Yd.current = d, c === Vd && fd(b), I = e;
        }
      }
    }
    function qe(a, b, c) {
      c.parentFlushed = true;
      switch (c.status) {
        case 0:
          var d = c.id = a.nextSegmentId++;
          c.lastPushedText = false;
          c.textEmbedded = false;
          a = a.responseState;
          b.push('<template id="');
          b.push(a.placeholderPrefix);
          a = d.toString(16);
          b.push(a);
          return b.push('"></template>');
        case 1:
          c.status = 2;
          var e = true;
          d = c.chunks;
          var f = 0;
          c = c.children;
          for (var g = 0; g < c.length; g++) {
            for (e = c[g]; f < e.index; f++)
              b.push(d[f]);
            e = re(a, b, e);
          }
          for (; f < d.length - 1; f++)
            b.push(d[f]);
          f < d.length && (e = b.push(d[f]));
          return e;
        default:
          throw Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
      }
    }
    function re(a, b, c) {
      var d = c.boundary;
      if (null === d)
        return qe(a, b, c);
      d.parentFlushed = true;
      if (d.forceClientRender)
        return a.responseState.generateStaticMarkup || (d = d.errorDigest, b.push("<!--$!-->"), b.push("<template"), d && (b.push(' data-dgst="'), d = q(d), b.push(d), b.push('"')), b.push("></template>")), qe(a, b, c), a = a.responseState.generateStaticMarkup ? true : b.push("<!--/$-->"), a;
      if (0 < d.pendingTasks) {
        d.rootSegmentID = a.nextSegmentId++;
        0 < d.completedSegments.length && a.partialBoundaries.push(d);
        var e = a.responseState;
        var f = e.nextSuspenseID++;
        e = e.boundaryPrefix + f.toString(16);
        d = d.id = e;
        Hb(b, a.responseState, d);
        qe(a, b, c);
        return b.push("<!--/$-->");
      }
      if (d.byteSize > a.progressiveChunkSize)
        return d.rootSegmentID = a.nextSegmentId++, a.completedBoundaries.push(d), Hb(b, a.responseState, d.id), qe(a, b, c), b.push("<!--/$-->");
      (c = a.resources.boundaryResources) && d.resources.forEach(dc, c);
      a.responseState.generateStaticMarkup || b.push("<!--$-->");
      c = d.completedSegments;
      if (1 !== c.length)
        throw Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
      re(a, b, c[0]);
      a = a.responseState.generateStaticMarkup ? true : b.push("<!--/$-->");
      return a;
    }
    function se(a, b, c) {
      Ib(b, a.responseState, c.formatContext, c.id);
      re(a, b, c);
      return Jb(b, c.formatContext);
    }
    function te(a, b, c) {
      a.resources.boundaryResources = c.resources;
      for (var d = c.completedSegments, e = 0; e < d.length; e++)
        ue(a, b, c, d[e]);
      d.length = 0;
      Rb(b, c.resources, a.responseState);
      a = a.responseState;
      d = c.id;
      e = c.rootSegmentID;
      c = c.resources;
      var f = a.stylesToHoist;
      a.stylesToHoist = false;
      var g = 0 === a.streamingFormat;
      g ? (b.push(a.startInlineScript), f ? 0 === (a.instructions & 2) ? (a.instructions |= 10, b.push('$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};$RR("')) : 0 === (a.instructions & 8) ? (a.instructions |= 8, b.push('$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};$RR("')) : b.push('$RR("') : 0 === (a.instructions & 2) ? (a.instructions |= 2, b.push('$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};$RC("')) : b.push('$RC("')) : f ? b.push('<template data-rri="" data-bid="') : b.push('<template data-rci="" data-bid="');
      if (null === d)
        throw Error("An ID must have been assigned before we can complete the boundary.");
      e = e.toString(16);
      b.push(d);
      g ? b.push('","') : b.push('" data-sid="');
      b.push(a.segmentPrefix);
      b.push(e);
      f ? g ? (b.push('",'), $b(b, c)) : (b.push('" data-sty="'), ac(b, c)) : g && b.push('"');
      d = g ? b.push(")</script>") : b.push('"></template>');
      return Gb(b, a) && d;
    }
    function ue(a, b, c, d) {
      if (2 === d.status)
        return true;
      var e = d.id;
      if (-1 === e) {
        if (-1 === (d.id = c.rootSegmentID))
          throw Error("A root segment ID must have been assigned by now. This is a bug in React.");
        return se(a, b, d);
      }
      se(a, b, d);
      a = a.responseState;
      (c = 0 === a.streamingFormat) ? (b.push(a.startInlineScript), 0 === (a.instructions & 1) ? (a.instructions |= 1, b.push('$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};;$RS("')) : b.push('$RS("')) : b.push('<template data-rsi="" data-sid="');
      b.push(a.segmentPrefix);
      e = e.toString(16);
      b.push(e);
      c ? b.push('","') : b.push('" data-pid="');
      b.push(a.placeholderPrefix);
      b.push(e);
      b = c ? b.push('")</script>') : b.push('"></template>');
      return b;
    }
    function pe(a, b) {
      try {
        var c, d = a.completedRootSegment;
        if (null !== d)
          if (0 === a.pendingRootTasks) {
            var e = a.resources, f = a.responseState;
            if (0 !== a.allPendingTasks && f.externalRuntimeScript) {
              var g = f.externalRuntimeScript, h = g.chunks, k = "[script]" + g.src, m = e.scriptsMap.get(k);
              m || (m = { type: "script", chunks: h, state: 0, props: null }, e.scriptsMap.set(k, m), e.scripts.add(m));
            }
            var t = f.htmlChunks, p = f.headChunks;
            g = 0;
            if (t) {
              for (g = 0; g < t.length; g++)
                b.push(t[g]);
              if (p)
                for (g = 0; g < p.length; g++)
                  b.push(p[g]);
              else {
                var T = C("head");
                b.push(T);
                b.push(">");
              }
            } else if (p)
              for (g = 0; g < p.length; g++)
                b.push(p[g]);
            var O = f.charsetChunks;
            for (g = 0; g < O.length; g++)
              b.push(O[g]);
            O.length = 0;
            e.preconnects.forEach(Sb, b);
            e.preconnects.clear();
            var U = f.preconnectChunks;
            for (g = 0; g < U.length; g++)
              b.push(U[g]);
            U.length = 0;
            e.fontPreloads.forEach(Sb, b);
            e.fontPreloads.clear();
            e.precedences.forEach(Xb, b);
            e.scripts.forEach(Sb, b);
            e.scripts.clear();
            e.explicitStylesheetPreloads.forEach(Sb, b);
            e.explicitStylesheetPreloads.clear();
            e.explicitScriptPreloads.forEach(Sb, b);
            e.explicitScriptPreloads.clear();
            e.explicitOtherPreloads.forEach(Sb, b);
            e.explicitOtherPreloads.clear();
            var F = f.preloadChunks;
            for (g = 0; g < F.length; g++)
              b.push(F[g]);
            F.length = 0;
            var G = f.hoistableChunks;
            for (g = 0; g < G.length; g++)
              b.push(G[g]);
            G.length = 0;
            t && null === p && (b.push("</"), b.push("head"), b.push(">"));
            re(a, b, d);
            a.completedRootSegment = null;
            Gb(b, a.responseState);
          } else
            return;
        else if (0 < a.pendingRootTasks)
          return;
        var l = a.resources, B = a.responseState;
        d = 0;
        l.preconnects.forEach(Tb, b);
        l.preconnects.clear();
        var L = B.preconnectChunks;
        for (d = 0; d < L.length; d++)
          b.push(L[d]);
        L.length = 0;
        l.fontPreloads.forEach(Tb, b);
        l.fontPreloads.clear();
        l.precedences.forEach(Zb, b);
        l.scripts.forEach(Tb, b);
        l.scripts.clear();
        l.explicitStylesheetPreloads.forEach(Tb, b);
        l.explicitStylesheetPreloads.clear();
        l.explicitScriptPreloads.forEach(Tb, b);
        l.explicitScriptPreloads.clear();
        l.explicitOtherPreloads.forEach(Tb, b);
        l.explicitOtherPreloads.clear();
        var A = B.preloadChunks;
        for (d = 0; d < A.length; d++)
          b.push(A[d]);
        A.length = 0;
        var P = B.hoistableChunks;
        for (d = 0; d < P.length; d++)
          b.push(P[d]);
        P.length = 0;
        var v = a.clientRenderedBoundaries;
        for (c = 0; c < v.length; c++) {
          var D = v[c];
          l = b;
          var w = a.responseState, wa = D.id, ma = D.errorDigest, ca = D.errorMessage, V = D.errorComponentStack, Q = 0 === w.streamingFormat;
          Q ? (l.push(w.startInlineScript), 0 === (w.instructions & 4) ? (w.instructions |= 4, l.push('$RX=function(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};;$RX("')) : l.push('$RX("')) : l.push('<template data-rxi="" data-bid="');
          if (null === wa)
            throw Error("An ID must have been assigned before we can complete the boundary.");
          l.push(wa);
          Q && l.push('"');
          if (ma || ca || V)
            if (Q) {
              l.push(",");
              var xa = Lb(ma || "");
              l.push(xa);
            } else {
              l.push('" data-dgst="');
              var ya = q(ma || "");
              l.push(ya);
            }
          if (ca || V)
            if (Q) {
              l.push(",");
              var za = Lb(ca || "");
              l.push(za);
            } else {
              l.push('" data-msg="');
              var Aa = q(ca || "");
              l.push(Aa);
            }
          if (V)
            if (Q) {
              l.push(",");
              var da = Lb(V);
              l.push(da);
            } else {
              l.push('" data-stck="');
              var E = q(V);
              l.push(E);
            }
          if (Q ? !l.push(")</script>") : !l.push('"></template>')) {
            a.destination = null;
            c++;
            v.splice(0, c);
            return;
          }
        }
        v.splice(0, c);
        var ea = a.completedBoundaries;
        for (c = 0; c < ea.length; c++)
          if (!te(a, b, ea[c])) {
            a.destination = null;
            c++;
            ea.splice(0, c);
            return;
          }
        ea.splice(0, c);
        var M = a.partialBoundaries;
        for (c = 0; c < M.length; c++) {
          var fa = M[c];
          a: {
            v = a;
            D = b;
            v.resources.boundaryResources = fa.resources;
            var ha = fa.completedSegments;
            for (w = 0; w < ha.length; w++)
              if (!ue(v, D, fa, ha[w])) {
                w++;
                ha.splice(0, w);
                var Ba = false;
                break a;
              }
            ha.splice(0, w);
            Ba = Rb(D, fa.resources, v.responseState);
          }
          if (!Ba) {
            a.destination = null;
            c++;
            M.splice(0, c);
            return;
          }
        }
        M.splice(0, c);
        var ia = a.completedBoundaries;
        for (c = 0; c < ia.length; c++)
          if (!te(a, b, ia[c])) {
            a.destination = null;
            c++;
            ia.splice(0, c);
            return;
          }
        ia.splice(0, c);
      } finally {
        0 === a.allPendingTasks && 0 === a.pingedTasks.length && 0 === a.clientRenderedBoundaries.length && 0 === a.completedBoundaries.length && (a.flushScheduled = false, a = a.responseState, a.hasBody && (b.push("</"), b.push("body"), b.push(">")), a.htmlChunks && (b.push("</"), b.push("html"), b.push(">")), b.push(null));
      }
    }
    function cc(a) {
      if (false === a.flushScheduled && 0 === a.pingedTasks.length && null !== a.destination) {
        var b = a.destination;
        a.flushScheduled = true;
        pe(a, b);
      }
    }
    function ve(a, b) {
      if (1 === a.status)
        a.status = 2, b.destroy(a.fatalError);
      else if (2 !== a.status && null === a.destination) {
        a.destination = b;
        try {
          pe(a, b);
        } catch (c) {
          ee(a, c), fe(a, c);
        }
      }
    }
    function we(a, b) {
      try {
        var c = a.abortableTasks;
        if (0 < c.size) {
          var d = void 0 === b ? Error("The render was aborted by the server without a reason.") : b;
          c.forEach(function(e) {
            return oe(e, a, d);
          });
          c.clear();
        }
        null !== a.destination && pe(a, a.destination);
      } catch (e) {
        ee(a, e), fe(a, e);
      }
    }
    function xe() {
    }
    function ye(a, b, c, d, e) {
      var f = false, g = null, h = "", k = false, m = bc();
      a = ae(a, m, ec(m, c, b ? b.identifierPrefix : void 0, e), fc(), Infinity, xe, void 0, function() {
        k = true;
      }, void 0, void 0);
      a.flushScheduled = null !== a.destination;
      de(a);
      we(a, d);
      ve(a, { push: function(t) {
        null !== t && (h += t);
        return true;
      }, destroy: function(t) {
        f = true;
        g = t;
      } });
      if (f && g !== d)
        throw g;
      if (!k)
        throw Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
      return h;
    }
    function ze(a, b) {
      a.prototype = Object.create(b.prototype);
      a.prototype.constructor = a;
      a.__proto__ = b;
    }
    var Ae = function(a) {
      function b() {
        var d = a.call(this, {}) || this;
        d.request = null;
        d.startedFlowing = false;
        return d;
      }
      ze(b, a);
      var c = b.prototype;
      c._destroy = function(d, e) {
        we(this.request);
        e(d);
      };
      c._read = function() {
        this.startedFlowing && ve(this.request, this);
      };
      return b;
    }(ka.Readable);
    function Be() {
    }
    function Ce(a, b) {
      var c = new Ae(), d = bc(), e = ae(a, d, ec(d, false, b ? b.identifierPrefix : void 0), fc(), Infinity, Be, function() {
        c.startedFlowing = true;
        ve(e, c);
      }, void 0, void 0);
      c.request = e;
      e.flushScheduled = null !== e.destination;
      de(e);
      return c;
    }
    exports.renderToNodeStream = function(a, b) {
      return Ce(a, b);
    };
    exports.renderToStaticMarkup = function(a, b) {
      return ye(a, b, true, 'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server');
    };
    exports.renderToStaticNodeStream = function(a, b) {
      return Ce(a, b);
    };
    exports.renderToString = function(a, b) {
      return ye(a, b, false, 'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server');
    };
    exports.version = "18.3.0-experimental-a1c62b8a7-20230627";
  }
});

// node_modules/react-dom/cjs/react-dom-server.node.production.min.js
var require_react_dom_server_node_production_min = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server.node.production.min.js"(exports) {
    "use strict";
    var da = require("util");
    var na = require("async_hooks");
    var oa = require_react();
    var pa = require_react_dom();
    function qa(a) {
      "function" === typeof a.flush && a.flush();
    }
    var h = null;
    var k = 0;
    var ra = true;
    function n(a, b) {
      if ("string" === typeof b) {
        if (0 !== b.length)
          if (2048 < 3 * b.length)
            0 < k && (u(a, h.subarray(0, k)), h = new Uint8Array(2048), k = 0), u(a, va.encode(b));
          else {
            var c = h;
            0 < k && (c = h.subarray(k));
            c = va.encodeInto(b, c);
            var d = c.read;
            k += c.written;
            d < b.length && (u(a, h.subarray(0, k)), h = new Uint8Array(2048), k = va.encodeInto(b.slice(d), h).written);
            2048 === k && (u(a, h), h = new Uint8Array(2048), k = 0);
          }
      } else
        0 !== b.byteLength && (2048 < b.byteLength ? (0 < k && (u(a, h.subarray(0, k)), h = new Uint8Array(2048), k = 0), u(a, b)) : (c = h.length - k, c < b.byteLength && (0 === c ? u(a, h) : (h.set(b.subarray(0, c), k), k += c, u(a, h), b = b.subarray(c)), h = new Uint8Array(2048), k = 0), h.set(b, k), k += b.byteLength, 2048 === k && (u(a, h), h = new Uint8Array(2048), k = 0)));
    }
    function u(a, b) {
      a = a.write(b);
      ra = ra && a;
    }
    function v(a, b) {
      n(a, b);
      return ra;
    }
    function wa(a) {
      h && 0 < k && a.write(h.subarray(0, k));
      h = null;
      k = 0;
      ra = true;
    }
    var va = new da.TextEncoder();
    function w(a) {
      return va.encode(a);
    }
    var xa = Object.assign;
    var x = Object.prototype.hasOwnProperty;
    var Da = RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$");
    var Ea = {};
    var Fa = {};
    function Ga(a) {
      if (x.call(Fa, a))
        return true;
      if (x.call(Ea, a))
        return false;
      if (Da.test(a))
        return Fa[a] = true;
      Ea[a] = true;
      return false;
    }
    var Ha = new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));
    var Ia = /* @__PURE__ */ new Map([
      ["acceptCharset", "accept-charset"],
      ["htmlFor", "for"],
      ["httpEquiv", "http-equiv"],
      ["crossOrigin", "crossorigin"],
      ["accentHeight", "accent-height"],
      ["alignmentBaseline", "alignment-baseline"],
      ["arabicForm", "arabic-form"],
      ["baselineShift", "baseline-shift"],
      ["capHeight", "cap-height"],
      ["clipPath", "clip-path"],
      ["clipRule", "clip-rule"],
      ["colorInterpolation", "color-interpolation"],
      ["colorInterpolationFilters", "color-interpolation-filters"],
      ["colorProfile", "color-profile"],
      ["colorRendering", "color-rendering"],
      ["dominantBaseline", "dominant-baseline"],
      ["enableBackground", "enable-background"],
      ["fillOpacity", "fill-opacity"],
      ["fillRule", "fill-rule"],
      ["floodColor", "flood-color"],
      ["floodOpacity", "flood-opacity"],
      ["fontFamily", "font-family"],
      ["fontSize", "font-size"],
      ["fontSizeAdjust", "font-size-adjust"],
      ["fontStretch", "font-stretch"],
      ["fontStyle", "font-style"],
      ["fontVariant", "font-variant"],
      ["fontWeight", "font-weight"],
      ["glyphName", "glyph-name"],
      ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
      [
        "glyphOrientationVertical",
        "glyph-orientation-vertical"
      ],
      ["horizAdvX", "horiz-adv-x"],
      ["horizOriginX", "horiz-origin-x"],
      ["imageRendering", "image-rendering"],
      ["letterSpacing", "letter-spacing"],
      ["lightingColor", "lighting-color"],
      ["markerEnd", "marker-end"],
      ["markerMid", "marker-mid"],
      ["markerStart", "marker-start"],
      ["overlinePosition", "overline-position"],
      ["overlineThickness", "overline-thickness"],
      ["paintOrder", "paint-order"],
      ["panose-1", "panose-1"],
      ["pointerEvents", "pointer-events"],
      ["renderingIntent", "rendering-intent"],
      [
        "shapeRendering",
        "shape-rendering"
      ],
      ["stopColor", "stop-color"],
      ["stopOpacity", "stop-opacity"],
      ["strikethroughPosition", "strikethrough-position"],
      ["strikethroughThickness", "strikethrough-thickness"],
      ["strokeDasharray", "stroke-dasharray"],
      ["strokeDashoffset", "stroke-dashoffset"],
      ["strokeLinecap", "stroke-linecap"],
      ["strokeLinejoin", "stroke-linejoin"],
      ["strokeMiterlimit", "stroke-miterlimit"],
      ["strokeOpacity", "stroke-opacity"],
      ["strokeWidth", "stroke-width"],
      ["textAnchor", "text-anchor"],
      ["textDecoration", "text-decoration"],
      ["textRendering", "text-rendering"],
      ["transformOrigin", "transform-origin"],
      ["underlinePosition", "underline-position"],
      ["underlineThickness", "underline-thickness"],
      ["unicodeBidi", "unicode-bidi"],
      ["unicodeRange", "unicode-range"],
      ["unitsPerEm", "units-per-em"],
      ["vAlphabetic", "v-alphabetic"],
      ["vHanging", "v-hanging"],
      ["vIdeographic", "v-ideographic"],
      ["vMathematical", "v-mathematical"],
      ["vectorEffect", "vector-effect"],
      ["vertAdvY", "vert-adv-y"],
      ["vertOriginX", "vert-origin-x"],
      ["vertOriginY", "vert-origin-y"],
      ["wordSpacing", "word-spacing"],
      ["writingMode", "writing-mode"],
      ["xmlnsXlink", "xmlns:xlink"],
      ["xHeight", "x-height"]
    ]);
    var Ja = /["'&<>]/;
    function A(a) {
      if ("boolean" === typeof a || "number" === typeof a)
        return "" + a;
      a = "" + a;
      var b = Ja.exec(a);
      if (b) {
        var c = "", d, e = 0;
        for (d = b.index; d < a.length; d++) {
          switch (a.charCodeAt(d)) {
            case 34:
              b = "&quot;";
              break;
            case 38:
              b = "&amp;";
              break;
            case 39:
              b = "&#x27;";
              break;
            case 60:
              b = "&lt;";
              break;
            case 62:
              b = "&gt;";
              break;
            default:
              continue;
          }
          e !== d && (c += a.slice(e, d));
          e = d + 1;
          c += b;
        }
        a = e !== d ? c + a.slice(e, d) : c;
      }
      return a;
    }
    var Ka = /([A-Z])/g;
    var La = /^ms-/;
    var bb = Array.isArray;
    var cb = oa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var db = { pending: false, data: null, method: null, action: null };
    var eb = pa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Dispatcher;
    var jb = { prefetchDNS: fb, preconnect: gb, preload: hb, preinit: ib };
    var kb = w('"></template>');
    var lb = w("<script>");
    var sb = w("</script>");
    var tb = w('<script src="');
    var ub = w('<script type="module" src="');
    var vb = w('" nonce="');
    var wb = w('" integrity="');
    var xb = w('" crossorigin="');
    var yb = w('" async=""></script>');
    var zb = /(<\/|<)(s)(cript)/gi;
    function Ab(a, b, c, d) {
      return "" + b + ("s" === c ? "\\u0073" : "\\u0053") + d;
    }
    function B(a, b, c) {
      return { insertionMode: a, selectedValue: b, noscriptTagInScope: c };
    }
    function Bb(a, b, c) {
      switch (b) {
        case "noscript":
          return B(2, null, true);
        case "select":
          return B(2, null != c.value ? c.value : c.defaultValue, a.noscriptTagInScope);
        case "svg":
          return B(3, null, a.noscriptTagInScope);
        case "math":
          return B(4, null, a.noscriptTagInScope);
        case "foreignObject":
          return B(2, null, a.noscriptTagInScope);
        case "table":
          return B(5, null, a.noscriptTagInScope);
        case "thead":
        case "tbody":
        case "tfoot":
          return B(6, null, a.noscriptTagInScope);
        case "colgroup":
          return B(8, null, a.noscriptTagInScope);
        case "tr":
          return B(
            7,
            null,
            a.noscriptTagInScope
          );
      }
      return 5 <= a.insertionMode ? B(2, null, a.noscriptTagInScope) : 0 === a.insertionMode ? "html" === b ? B(1, null, false) : B(2, null, false) : 1 === a.insertionMode ? B(2, null, false) : a;
    }
    var Cb = w("<!-- -->");
    function Db(a, b, c, d) {
      if ("" === b)
        return d;
      d && a.push(Cb);
      a.push(A(b));
      return true;
    }
    var Eb = /* @__PURE__ */ new Map();
    var Fb = w(' style="');
    var Gb = w(":");
    var Hb = w(";");
    function Ib(a, b) {
      if ("object" !== typeof b)
        throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
      var c = true, d;
      for (d in b)
        if (x.call(b, d)) {
          var e = b[d];
          if (null != e && "boolean" !== typeof e && "" !== e) {
            if (0 === d.indexOf("--")) {
              var f = A(d);
              e = A(("" + e).trim());
            } else
              f = Eb.get(d), void 0 === f && (f = w(A(d.replace(Ka, "-$1").toLowerCase().replace(La, "-ms-"))), Eb.set(d, f)), e = "number" === typeof e ? 0 === e || Ha.has(d) ? "" + e : e + "px" : A(("" + e).trim());
            c ? (c = false, a.push(Fb, f, Gb, e)) : a.push(Hb, f, Gb, e);
          }
        }
      c || a.push(G);
    }
    var I = w(" ");
    var J = w('="');
    var G = w('"');
    var Jb = w('=""');
    function Kb(a, b, c) {
      c && "function" !== typeof c && "symbol" !== typeof c && a.push(I, b, Jb);
    }
    function L(a, b, c) {
      "function" !== typeof c && "symbol" !== typeof c && "boolean" !== typeof c && a.push(I, b, J, A(c), G);
    }
    function Lb(a) {
      var b = a.nextSuspenseID++;
      return a.idPrefix + b;
    }
    var Mb = w(A("javascript:throw new Error('A React form was unexpectedly submitted.')"));
    var Nb = w('<input type="hidden"');
    function Ob(a, b) {
      this.push(Nb);
      if ("string" !== typeof a)
        throw Error("File/Blob fields are not yet supported in progressive forms. It probably means you are closing over binary data or FormData in a Server Action.");
      L(this, "name", b);
      L(this, "value", a);
      this.push(Pb);
    }
    function Qb(a, b, c, d, e, f, g) {
      var l = null;
      "function" === typeof c && ("function" === typeof c.$$FORM_ACTION ? (d = Lb(b), b = c.$$FORM_ACTION(d), g = b.name, c = b.action || "", d = b.encType, e = b.method, f = b.target, l = b.data) : (a.push(I, "formAction", J, Mb, G), f = e = d = c = g = null, Rb(b)));
      null != g && M(a, "name", g);
      null != c && M(a, "formAction", c);
      null != d && M(a, "formEncType", d);
      null != e && M(a, "formMethod", e);
      null != f && M(a, "formTarget", f);
      return l;
    }
    function M(a, b, c) {
      switch (b) {
        case "className":
          L(a, "class", c);
          break;
        case "tabIndex":
          L(a, "tabindex", c);
          break;
        case "dir":
        case "role":
        case "viewBox":
        case "width":
        case "height":
          L(a, b, c);
          break;
        case "style":
          Ib(a, c);
          break;
        case "src":
        case "href":
          if ("" === c)
            break;
        case "action":
        case "formAction":
          if (null == c || "function" === typeof c || "symbol" === typeof c || "boolean" === typeof c)
            break;
          a.push(I, b, J, A("" + c), G);
          break;
        case "defaultValue":
        case "defaultChecked":
        case "innerHTML":
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
          break;
        case "autoFocus":
        case "multiple":
        case "muted":
          Kb(a, b.toLowerCase(), c);
          break;
        case "xlinkHref":
          if ("function" === typeof c || "symbol" === typeof c || "boolean" === typeof c)
            break;
          a.push(I, "xlink:href", J, A("" + c), G);
          break;
        case "contentEditable":
        case "spellCheck":
        case "draggable":
        case "value":
        case "autoReverse":
        case "externalResourcesRequired":
        case "focusable":
        case "preserveAlpha":
          "function" !== typeof c && "symbol" !== typeof c && a.push(I, b, J, A(c), G);
          break;
        case "allowFullScreen":
        case "async":
        case "autoPlay":
        case "controls":
        case "default":
        case "defer":
        case "disabled":
        case "disablePictureInPicture":
        case "disableRemotePlayback":
        case "formNoValidate":
        case "hidden":
        case "loop":
        case "noModule":
        case "noValidate":
        case "open":
        case "playsInline":
        case "readOnly":
        case "required":
        case "reversed":
        case "scoped":
        case "seamless":
        case "itemScope":
          c && "function" !== typeof c && "symbol" !== typeof c && a.push(I, b, Jb);
          break;
        case "capture":
        case "download":
          true === c ? a.push(I, b, Jb) : false !== c && "function" !== typeof c && "symbol" !== typeof c && a.push(I, b, J, A(c), G);
          break;
        case "cols":
        case "rows":
        case "size":
        case "span":
          "function" !== typeof c && "symbol" !== typeof c && !isNaN(c) && 1 <= c && a.push(I, b, J, A(c), G);
          break;
        case "rowSpan":
        case "start":
          "function" === typeof c || "symbol" === typeof c || isNaN(c) || a.push(I, b, J, A(c), G);
          break;
        case "xlinkActuate":
          L(a, "xlink:actuate", c);
          break;
        case "xlinkArcrole":
          L(
            a,
            "xlink:arcrole",
            c
          );
          break;
        case "xlinkRole":
          L(a, "xlink:role", c);
          break;
        case "xlinkShow":
          L(a, "xlink:show", c);
          break;
        case "xlinkTitle":
          L(a, "xlink:title", c);
          break;
        case "xlinkType":
          L(a, "xlink:type", c);
          break;
        case "xmlBase":
          L(a, "xml:base", c);
          break;
        case "xmlLang":
          L(a, "xml:lang", c);
          break;
        case "xmlSpace":
          L(a, "xml:space", c);
          break;
        default:
          if (!(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) {
            if (b = Ia.get(b) || b, Ga(b)) {
              switch (typeof c) {
                case "function":
                case "symbol":
                  return;
                case "boolean":
                  var d = b.toLowerCase().slice(
                    0,
                    5
                  );
                  if ("data-" !== d && "aria-" !== d)
                    return;
              }
              a.push(I, b, J, A(c), G);
            }
          }
      }
    }
    var P = w(">");
    var Pb = w("/>");
    function Q(a, b, c) {
      if (null != b) {
        if (null != c)
          throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
        if ("object" !== typeof b || !("__html" in b))
          throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        b = b.__html;
        null !== b && void 0 !== b && a.push("" + b);
      }
    }
    function Sb(a) {
      var b = "";
      oa.Children.forEach(a, function(c) {
        null != c && (b += c);
      });
      return b;
    }
    var Zb = w(' selected=""');
    var $b = w(`addEventListener("submit",function(a){if(!a.defaultPrevented){var c=a.target,d=a.submitter,e=c.action,b=d;if(d){var f=d.getAttribute("formAction");null!=f&&(e=f,b=null)}"javascript:throw new Error('A React form was unexpectedly submitted.')"===e&&(a.preventDefault(),b?(a=document.createElement("input"),a.name=b.name,a.value=b.value,b.parentNode.insertBefore(a,b),b=new FormData(c),a.parentNode.removeChild(a)):b=new FormData(c),a=c.getRootNode(),(a.$$reactFormReplay=a.$$reactFormReplay||[]).push(c,
d,b))}});`);
    function Rb(a) {
      0 !== (a.instructions & 16) || a.externalRuntimeScript || (a.instructions |= 16, a.bootstrapChunks.unshift(a.startInlineScript, $b, sb));
    }
    function ac(a, b, c, d, e, f, g) {
      var l = b.rel, m = b.href, q = b.precedence;
      if (3 === f || g || null != b.itemProp || "string" !== typeof l || "string" !== typeof m || "" === m)
        return R(a, b), null;
      if ("stylesheet" === b.rel) {
        c = "[style]" + m;
        if ("string" !== typeof q || null != b.disabled || b.onLoad || b.onError)
          return R(a, b);
        f = d.stylesMap.get(c);
        f || (b = xa({}, b, { "data-precedence": b.precedence, precedence: null }), f = d.preloadsMap.get(c), g = 0, f && (f.state |= 4, l = f.props, null == b.crossOrigin && (b.crossOrigin = l.crossOrigin), null == b.integrity && (b.integrity = l.integrity), f.state & 3 && (g = 8)), f = { type: "stylesheet", chunks: [], state: g, props: b }, d.stylesMap.set(c, f), b = d.precedences.get(q), b || (b = /* @__PURE__ */ new Set(), d.precedences.set(q, b), c = { type: "style", chunks: [], state: 0, props: { precedence: q, hrefs: [] } }, b.add(c), d.stylePrecedences.set(q, c)), b.add(f));
        d.boundaryResources && d.boundaryResources.add(f);
        e && a.push(Cb);
        return null;
      }
      if (b.onLoad || b.onError)
        return R(a, b);
      e && a.push(Cb);
      switch (b.rel) {
        case "preconnect":
        case "dns-prefetch":
          return R(c.preconnectChunks, b);
        case "preload":
          return R(
            c.preloadChunks,
            b
          );
        default:
          return R(c.hoistableChunks, b);
      }
    }
    function R(a, b) {
      a.push(T("link"));
      for (var c in b)
        if (x.call(b, c)) {
          var d = b[c];
          if (null != d)
            switch (c) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              default:
                M(a, c, d);
            }
        }
      a.push(Pb);
      return null;
    }
    function bc(a, b, c) {
      a.push(T(c));
      for (var d in b)
        if (x.call(b, d)) {
          var e = b[d];
          if (null != e)
            switch (d) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw Error(c + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              default:
                M(a, d, e);
            }
        }
      a.push(Pb);
      return null;
    }
    function cc(a, b) {
      a.push(T("title"));
      var c = null, d = null, e;
      for (e in b)
        if (x.call(b, e)) {
          var f = b[e];
          if (null != f)
            switch (e) {
              case "children":
                c = f;
                break;
              case "dangerouslySetInnerHTML":
                d = f;
                break;
              default:
                M(a, e, f);
            }
        }
      a.push(P);
      b = Array.isArray(c) ? 2 > c.length ? c[0] : null : c;
      "function" !== typeof b && "symbol" !== typeof b && null !== b && void 0 !== b && a.push(A("" + b));
      Q(a, d, c);
      a.push(dc, "title", ec);
      return null;
    }
    function fc(a, b) {
      a.push(T("script"));
      var c = null, d = null, e;
      for (e in b)
        if (x.call(b, e)) {
          var f = b[e];
          if (null != f)
            switch (e) {
              case "children":
                c = f;
                break;
              case "dangerouslySetInnerHTML":
                d = f;
                break;
              default:
                M(a, e, f);
            }
        }
      a.push(P);
      Q(a, d, c);
      "string" === typeof c && a.push(A(c));
      a.push(dc, "script", ec);
      return null;
    }
    function gc(a, b, c) {
      a.push(T(c));
      var d = c = null, e;
      for (e in b)
        if (x.call(b, e)) {
          var f = b[e];
          if (null != f)
            switch (e) {
              case "children":
                c = f;
                break;
              case "dangerouslySetInnerHTML":
                d = f;
                break;
              default:
                M(a, e, f);
            }
        }
      a.push(P);
      Q(a, d, c);
      return "string" === typeof c ? (a.push(A(c)), null) : c;
    }
    var hc = w("\n");
    var ic = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
    var jc = /* @__PURE__ */ new Map();
    function T(a) {
      var b = jc.get(a);
      if (void 0 === b) {
        if (!ic.test(a))
          throw Error("Invalid tag: " + a);
        b = w("<" + a);
        jc.set(a, b);
      }
      return b;
    }
    var kc = w("<!DOCTYPE html>");
    function lc(a, b, c, d, e, f, g) {
      switch (b) {
        case "div":
        case "span":
        case "svg":
        case "path":
        case "a":
        case "g":
        case "p":
        case "li":
          break;
        case "select":
          a.push(T("select"));
          var l = null, m = null, q;
          for (q in c)
            if (x.call(c, q)) {
              var t = c[q];
              if (null != t)
                switch (q) {
                  case "children":
                    l = t;
                    break;
                  case "dangerouslySetInnerHTML":
                    m = t;
                    break;
                  case "defaultValue":
                  case "value":
                    break;
                  default:
                    M(a, q, t);
                }
            }
          a.push(P);
          Q(a, m, l);
          return l;
        case "option":
          var r = f.selectedValue;
          a.push(T("option"));
          var H = null, y = null, z = null, C = null, p;
          for (p in c)
            if (x.call(
              c,
              p
            )) {
              var F = c[p];
              if (null != F)
                switch (p) {
                  case "children":
                    H = F;
                    break;
                  case "selected":
                    z = F;
                    break;
                  case "dangerouslySetInnerHTML":
                    C = F;
                    break;
                  case "value":
                    y = F;
                  default:
                    M(a, p, F);
                }
            }
          if (null != r) {
            var N = null !== y ? "" + y : Sb(H);
            if (bb(r))
              for (var W = 0; W < r.length; W++) {
                if ("" + r[W] === N) {
                  a.push(Zb);
                  break;
                }
              }
            else
              "" + r === N && a.push(Zb);
          } else
            z && a.push(Zb);
          a.push(P);
          Q(a, C, H);
          return H;
        case "textarea":
          a.push(T("textarea"));
          var K = null, O = null, D = null, E;
          for (E in c)
            if (x.call(c, E)) {
              var ea = c[E];
              if (null != ea)
                switch (E) {
                  case "children":
                    D = ea;
                    break;
                  case "value":
                    K = ea;
                    break;
                  case "defaultValue":
                    O = ea;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                  default:
                    M(a, E, ea);
                }
            }
          null === K && null !== O && (K = O);
          a.push(P);
          if (null != D) {
            if (null != K)
              throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            if (bb(D) && 1 < D.length)
              throw Error("<textarea> can only have at most one child.");
            K = "" + D;
          }
          "string" === typeof K && "\n" === K[0] && a.push(hc);
          null !== K && a.push(A("" + K));
          return null;
        case "input":
          a.push(T("input"));
          var ya = null, sa = null, fa = null, aa = null, ta = null, ha = null, ia = null, ja = null, za = null, X;
          for (X in c)
            if (x.call(c, X)) {
              var U = c[X];
              if (null != U)
                switch (X) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                  case "name":
                    ya = U;
                    break;
                  case "formAction":
                    sa = U;
                    break;
                  case "formEncType":
                    fa = U;
                    break;
                  case "formMethod":
                    aa = U;
                    break;
                  case "formTarget":
                    ta = U;
                    break;
                  case "defaultChecked":
                    za = U;
                    break;
                  case "defaultValue":
                    ia = U;
                    break;
                  case "checked":
                    ja = U;
                    break;
                  case "value":
                    ha = U;
                    break;
                  default:
                    M(a, X, U);
                }
            }
          var Lc = Qb(a, e, sa, fa, aa, ta, ya);
          null !== ja ? Kb(a, "checked", ja) : null !== za && Kb(a, "checked", za);
          null !== ha ? M(a, "value", ha) : null !== ia && M(a, "value", ia);
          a.push(Pb);
          null !== Lc && Lc.forEach(Ob, a);
          return null;
        case "button":
          a.push(T("button"));
          var Ma = null, Mc = null, Nc = null, Oc = null, Pc = null, Qc = null, Rc = null, Na;
          for (Na in c)
            if (x.call(c, Na)) {
              var ba = c[Na];
              if (null != ba)
                switch (Na) {
                  case "children":
                    Ma = ba;
                    break;
                  case "dangerouslySetInnerHTML":
                    Mc = ba;
                    break;
                  case "name":
                    Nc = ba;
                    break;
                  case "formAction":
                    Oc = ba;
                    break;
                  case "formEncType":
                    Pc = ba;
                    break;
                  case "formMethod":
                    Qc = ba;
                    break;
                  case "formTarget":
                    Rc = ba;
                    break;
                  default:
                    M(a, Na, ba);
                }
            }
          var Sc = Qb(a, e, Oc, Pc, Qc, Rc, Nc);
          a.push(P);
          null !== Sc && Sc.forEach(Ob, a);
          Q(a, Mc, Ma);
          if ("string" === typeof Ma) {
            a.push(A(Ma));
            var Tc = null;
          } else
            Tc = Ma;
          return Tc;
        case "form":
          a.push(T("form"));
          var Oa = null, Uc = null, ka = null, Pa = null, Qa = null, Ra = null, Sa;
          for (Sa in c)
            if (x.call(c, Sa)) {
              var la = c[Sa];
              if (null != la)
                switch (Sa) {
                  case "children":
                    Oa = la;
                    break;
                  case "dangerouslySetInnerHTML":
                    Uc = la;
                    break;
                  case "action":
                    ka = la;
                    break;
                  case "encType":
                    Pa = la;
                    break;
                  case "method":
                    Qa = la;
                    break;
                  case "target":
                    Ra = la;
                    break;
                  default:
                    M(a, Sa, la);
                }
            }
          var Tb = null, Ub = null;
          if ("function" === typeof ka)
            if ("function" === typeof ka.$$FORM_ACTION) {
              var Ge = Lb(e), Aa = ka.$$FORM_ACTION(Ge);
              ka = Aa.action || "";
              Pa = Aa.encType;
              Qa = Aa.method;
              Ra = Aa.target;
              Tb = Aa.data;
              Ub = Aa.name;
            } else
              a.push(I, "action", J, Mb, G), Ra = Qa = Pa = ka = null, Rb(e);
          null != ka && M(a, "action", ka);
          null != Pa && M(a, "encType", Pa);
          null != Qa && M(a, "method", Qa);
          null != Ra && M(a, "target", Ra);
          a.push(P);
          null !== Ub && (a.push(Nb), L(a, "name", Ub), a.push(Pb), null !== Tb && Tb.forEach(Ob, a));
          Q(a, Uc, Oa);
          if ("string" === typeof Oa) {
            a.push(A(Oa));
            var Vc = null;
          } else
            Vc = Oa;
          return Vc;
        case "menuitem":
          a.push(T("menuitem"));
          for (var mb in c)
            if (x.call(c, mb)) {
              var Wc = c[mb];
              if (null != Wc)
                switch (mb) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                  default:
                    M(a, mb, Wc);
                }
            }
          a.push(P);
          return null;
        case "title":
          if (3 === f.insertionMode || f.noscriptTagInScope || null != c.itemProp)
            var Xc = cc(
              a,
              c
            );
          else
            cc(e.hoistableChunks, c), Xc = null;
          return Xc;
        case "link":
          return ac(a, c, e, d, g, f.insertionMode, f.noscriptTagInScope);
        case "script":
          var Vb = c.async;
          if ("string" !== typeof c.src || !c.src || !Vb || "function" === typeof Vb || "symbol" === typeof Vb || c.onLoad || c.onError || 3 === f.insertionMode || f.noscriptTagInScope || null != c.itemProp)
            var Yc = fc(a, c);
          else {
            var Wb = "[script]" + c.src, Ta = d.scriptsMap.get(Wb);
            if (!Ta) {
              Ta = { type: "script", chunks: [], state: 0, props: null };
              d.scriptsMap.set(Wb, Ta);
              d.scripts.add(Ta);
              var Zc = c, nb = d.preloadsMap.get(Wb);
              if (nb) {
                nb.state |= 4;
                var ob = Zc = xa({}, c), $c = nb.props;
                null == ob.crossOrigin && (ob.crossOrigin = $c.crossOrigin);
                null == ob.integrity && (ob.integrity = $c.integrity);
              }
              fc(Ta.chunks, Zc);
            }
            g && a.push(Cb);
            Yc = null;
          }
          return Yc;
        case "style":
          var Ua = c.precedence, Va = c.href;
          if (3 === f.insertionMode || f.noscriptTagInScope || null != c.itemProp || "string" !== typeof Ua || "string" !== typeof Va || "" === Va) {
            a.push(T("style"));
            var Ba = null, ad = null, Wa;
            for (Wa in c)
              if (x.call(c, Wa)) {
                var pb = c[Wa];
                if (null != pb)
                  switch (Wa) {
                    case "children":
                      Ba = pb;
                      break;
                    case "dangerouslySetInnerHTML":
                      ad = pb;
                      break;
                    default:
                      M(a, Wa, pb);
                  }
              }
            a.push(P);
            var Xa = Array.isArray(Ba) ? 2 > Ba.length ? Ba[0] : null : Ba;
            "function" !== typeof Xa && "symbol" !== typeof Xa && null !== Xa && void 0 !== Xa && a.push(A("" + Xa));
            Q(a, ad, Ba);
            a.push(dc, "style", ec);
            var bd = null;
          } else {
            var cd = "[style]" + Va, ca = d.stylesMap.get(cd);
            if (!ca) {
              if (ca = d.stylePrecedences.get(Ua))
                ca.props.hrefs.push(Va);
              else {
                ca = { type: "style", chunks: [], state: 0, props: { precedence: Ua, hrefs: [Va] } };
                d.stylePrecedences.set(Ua, ca);
                var dd = /* @__PURE__ */ new Set();
                dd.add(ca);
                d.precedences.set(Ua, dd);
              }
              d.stylesMap.set(
                cd,
                ca
              );
              d.boundaryResources && d.boundaryResources.add(ca);
              var ed = ca.chunks, Ca = null, fd = null, qb;
              for (qb in c)
                if (x.call(c, qb)) {
                  var Xb = c[qb];
                  if (null != Xb)
                    switch (qb) {
                      case "children":
                        Ca = Xb;
                        break;
                      case "dangerouslySetInnerHTML":
                        fd = Xb;
                    }
                }
              var Ya = Array.isArray(Ca) ? 2 > Ca.length ? Ca[0] : null : Ca;
              "function" !== typeof Ya && "symbol" !== typeof Ya && null !== Ya && void 0 !== Ya && ed.push(A("" + Ya));
              Q(ed, fd, Ca);
            }
            g && a.push(Cb);
            bd = void 0;
          }
          return bd;
        case "meta":
          if (3 === f.insertionMode || f.noscriptTagInScope || null != c.itemProp)
            var gd = bc(a, c, "meta");
          else
            g && a.push(Cb), gd = "string" === typeof c.charSet ? bc(e.charsetChunks, c, "meta") : bc(e.hoistableChunks, c, "meta");
          return gd;
        case "listing":
        case "pre":
          a.push(T(b));
          var Za = null, $a = null, ab;
          for (ab in c)
            if (x.call(c, ab)) {
              var rb = c[ab];
              if (null != rb)
                switch (ab) {
                  case "children":
                    Za = rb;
                    break;
                  case "dangerouslySetInnerHTML":
                    $a = rb;
                    break;
                  default:
                    M(a, ab, rb);
                }
            }
          a.push(P);
          if (null != $a) {
            if (null != Za)
              throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if ("object" !== typeof $a || !("__html" in $a))
              throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            var ua = $a.__html;
            null !== ua && void 0 !== ua && ("string" === typeof ua && 0 < ua.length && "\n" === ua[0] ? a.push(hc, ua) : a.push("" + ua));
          }
          "string" === typeof Za && "\n" === Za[0] && a.push(hc);
          return Za;
        case "base":
        case "area":
        case "br":
        case "col":
        case "embed":
        case "hr":
        case "img":
        case "keygen":
        case "param":
        case "source":
        case "track":
        case "wbr":
          return bc(a, c, b);
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          break;
        case "head":
          if (2 > f.insertionMode && null === e.headChunks) {
            e.headChunks = [];
            var hd = gc(e.headChunks, c, "head");
          } else
            hd = gc(a, c, "head");
          return hd;
        case "html":
          if (0 === f.insertionMode && null === e.htmlChunks) {
            e.htmlChunks = [kc];
            var id = gc(e.htmlChunks, c, "html");
          } else
            id = gc(a, c, "html");
          return id;
        default:
          if (-1 !== b.indexOf("-")) {
            a.push(T(b));
            var Yb = null, jd = null, ma;
            for (ma in c)
              if (x.call(c, ma)) {
                var S = c[ma];
                if (null != S && "function" !== typeof S && "object" !== typeof S && false !== S)
                  switch (true === S && (S = ""), "className" === ma && (ma = "class"), ma) {
                    case "children":
                      Yb = S;
                      break;
                    case "dangerouslySetInnerHTML":
                      jd = S;
                      break;
                    case "style":
                      Ib(a, S);
                      break;
                    case "suppressContentEditableWarning":
                    case "suppressHydrationWarning":
                      break;
                    default:
                      Ga(ma) && "function" !== typeof S && "symbol" !== typeof S && a.push(I, ma, J, A(S), G);
                  }
              }
            a.push(P);
            Q(a, jd, Yb);
            return Yb;
          }
      }
      return gc(a, c, b);
    }
    var dc = w("</");
    var ec = w(">");
    function mc(a, b) {
      b = b.bootstrapChunks;
      for (var c = 0; c < b.length - 1; c++)
        n(a, b[c]);
      return c < b.length ? (c = b[c], b.length = 0, v(a, c)) : true;
    }
    var nc = w('<template id="');
    var oc = w('"></template>');
    var pc = w("<!--$-->");
    var qc = w('<!--$?--><template id="');
    var rc = w('"></template>');
    var sc = w("<!--$!-->");
    var tc = w("<!--/$-->");
    var uc = w("<template");
    var vc = w('"');
    var wc = w(' data-dgst="');
    w(' data-msg="');
    w(' data-stck="');
    var xc = w("></template>");
    function yc(a, b, c) {
      n(a, qc);
      if (null === c)
        throw Error("An ID must have been assigned before we can complete the boundary.");
      n(a, c);
      return v(a, rc);
    }
    var zc = w('<div hidden id="');
    var Ac = w('">');
    var Bc = w("</div>");
    var Cc = w('<svg aria-hidden="true" style="display:none" id="');
    var Dc = w('">');
    var Ec = w("</svg>");
    var Fc = w('<math aria-hidden="true" style="display:none" id="');
    var Gc = w('">');
    var Hc = w("</math>");
    var Ic = w('<table hidden id="');
    var Jc = w('">');
    var Kc = w("</table>");
    var kd = w('<table hidden><tbody id="');
    var ld = w('">');
    var md = w("</tbody></table>");
    var nd = w('<table hidden><tr id="');
    var od = w('">');
    var pd = w("</tr></table>");
    var qd = w('<table hidden><colgroup id="');
    var rd = w('">');
    var sd = w("</colgroup></table>");
    function td(a, b, c, d) {
      switch (c.insertionMode) {
        case 0:
        case 1:
        case 2:
          return n(a, zc), n(a, b.segmentPrefix), n(a, d.toString(16)), v(a, Ac);
        case 3:
          return n(a, Cc), n(a, b.segmentPrefix), n(a, d.toString(16)), v(a, Dc);
        case 4:
          return n(a, Fc), n(a, b.segmentPrefix), n(a, d.toString(16)), v(a, Gc);
        case 5:
          return n(a, Ic), n(a, b.segmentPrefix), n(a, d.toString(16)), v(a, Jc);
        case 6:
          return n(a, kd), n(a, b.segmentPrefix), n(a, d.toString(16)), v(a, ld);
        case 7:
          return n(a, nd), n(a, b.segmentPrefix), n(a, d.toString(16)), v(a, od);
        case 8:
          return n(
            a,
            qd
          ), n(a, b.segmentPrefix), n(a, d.toString(16)), v(a, rd);
        default:
          throw Error("Unknown insertion mode. This is a bug in React.");
      }
    }
    function ud(a, b) {
      switch (b.insertionMode) {
        case 0:
        case 1:
        case 2:
          return v(a, Bc);
        case 3:
          return v(a, Ec);
        case 4:
          return v(a, Hc);
        case 5:
          return v(a, Kc);
        case 6:
          return v(a, md);
        case 7:
          return v(a, pd);
        case 8:
          return v(a, sd);
        default:
          throw Error("Unknown insertion mode. This is a bug in React.");
      }
    }
    var vd = w('$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};;$RS("');
    var wd = w('$RS("');
    var xd = w('","');
    var yd = w('")</script>');
    var zd = w('<template data-rsi="" data-sid="');
    var Ad = w('" data-pid="');
    var Bd = w('$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};$RC("');
    var Cd = w('$RC("');
    var Dd = w('$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};$RR("');
    var Ed = w('$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};$RR("');
    var Fd = w('$RR("');
    var Gd = w('","');
    var Hd = w('",');
    var Id = w('"');
    var Jd = w(")</script>");
    var Kd = w('<template data-rci="" data-bid="');
    var Ld = w('<template data-rri="" data-bid="');
    var Md = w('" data-sid="');
    var Nd = w('" data-sty="');
    var Od = w('$RX=function(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};;$RX("');
    var Pd = w('$RX("');
    var Qd = w('"');
    var Rd = w(",");
    var Sd = w(")</script>");
    var Td = w('<template data-rxi="" data-bid="');
    var Ud = w('" data-dgst="');
    var Vd = w('" data-msg="');
    var Wd = w('" data-stck="');
    var Xd = /[<\u2028\u2029]/g;
    function Yd(a) {
      return JSON.stringify(a).replace(Xd, function(b) {
        switch (b) {
          case "<":
            return "\\u003c";
          case "\u2028":
            return "\\u2028";
          case "\u2029":
            return "\\u2029";
          default:
            throw Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
        }
      });
    }
    var Zd = /[&><\u2028\u2029]/g;
    function $d(a) {
      return JSON.stringify(a).replace(Zd, function(b) {
        switch (b) {
          case "&":
            return "\\u0026";
          case ">":
            return "\\u003e";
          case "<":
            return "\\u003c";
          case "\u2028":
            return "\\u2028";
          case "\u2029":
            return "\\u2029";
          default:
            throw Error("escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
        }
      });
    }
    var ae = w('<style media="not all" data-precedence="');
    var be = w('" data-href="');
    var ce = w('">');
    var de = w("</style>");
    var ee = false;
    var fe = true;
    function ge(a) {
      if ("stylesheet" === a.type && 0 === (a.state & 1))
        ee = true;
      else if ("style" === a.type) {
        var b = a.chunks, c = a.props.hrefs, d = 0;
        if (b.length) {
          n(this, ae);
          n(this, A(a.props.precedence));
          if (c.length) {
            for (n(this, be); d < c.length - 1; d++)
              n(this, A(c[d])), n(this, he);
            n(this, A(c[d]));
          }
          n(this, ce);
          for (d = 0; d < b.length; d++)
            n(this, b[d]);
          fe = v(this, de);
          ee = true;
          b.length = 0;
          c.length = 0;
        }
      }
    }
    function ie(a, b, c) {
      ee = false;
      fe = true;
      b.forEach(ge, a);
      ee && (c.stylesToHoist = true);
      return fe;
    }
    function je(a) {
      if (0 === (a.state & 7)) {
        for (var b = a.chunks, c = 0; c < b.length; c++)
          n(this, b[c]);
        a.state |= 1;
      }
    }
    function ke(a) {
      if (0 === (a.state & 7)) {
        for (var b = a.chunks, c = 0; c < b.length; c++)
          n(this, b[c]);
        a.state |= 2;
      }
    }
    var le = null;
    var me = false;
    function ne(a, b, c) {
      b = a.chunks;
      if (a.state & 3)
        c.delete(a);
      else if ("style" === a.type)
        le = a;
      else {
        R(b, a.props);
        for (c = 0; c < b.length; c++)
          n(this, b[c]);
        a.state |= 1;
        me = true;
      }
    }
    var oe = w('<style data-precedence="');
    var pe = w('" data-href="');
    var he = w(" ");
    var qe = w('">');
    var re = w("</style>");
    function se(a, b) {
      me = false;
      a.forEach(ne, this);
      a.clear();
      a = le.chunks;
      var c = le.props.hrefs;
      if (false === me || a.length) {
        n(this, oe);
        n(this, A(b));
        b = 0;
        if (c.length) {
          for (n(this, pe); b < c.length - 1; b++)
            n(this, A(c[b])), n(this, he);
          n(this, A(c[b]));
        }
        n(this, qe);
        for (b = 0; b < a.length; b++)
          n(this, a[b]);
        n(this, re);
        a.length = 0;
        c.length = 0;
      }
    }
    function te(a) {
      if (!(a.state & 8) && "style" !== a.type) {
        var b = a.chunks, c = a.props;
        R(b, { rel: "preload", as: "style", href: a.props.href, crossOrigin: c.crossOrigin, fetchPriority: c.fetchPriority, integrity: c.integrity, media: c.media, hrefLang: c.hrefLang, referrerPolicy: c.referrerPolicy });
        for (c = 0; c < b.length; c++)
          n(this, b[c]);
        a.state |= 8;
        b.length = 0;
      }
    }
    function ue(a) {
      a.forEach(te, this);
      a.clear();
    }
    var ve = w("[");
    var we = w(",[");
    var xe = w(",");
    var ye = w("]");
    function ze(a, b) {
      n(a, ve);
      var c = ve;
      b.forEach(function(d) {
        if ("style" !== d.type && !(d.state & 1)) {
          if (d.state & 3)
            n(a, c), n(a, $d("" + d.props.href)), n(a, ye), c = we;
          else if ("stylesheet" === d.type) {
            n(a, c);
            var e = d.props["data-precedence"], f = d.props;
            n(a, $d("" + d.props.href));
            e = "" + e;
            n(a, xe);
            n(a, $d(e));
            for (var g in f)
              if (x.call(f, g)) {
                var l = f[g];
                if (null != l)
                  switch (g) {
                    case "href":
                    case "rel":
                    case "precedence":
                    case "data-precedence":
                      break;
                    case "children":
                    case "dangerouslySetInnerHTML":
                      throw Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                    default:
                      a: {
                        e = a;
                        var m = g.toLowerCase();
                        switch (typeof l) {
                          case "function":
                          case "symbol":
                            break a;
                        }
                        switch (g) {
                          case "innerHTML":
                          case "dangerouslySetInnerHTML":
                          case "suppressContentEditableWarning":
                          case "suppressHydrationWarning":
                          case "style":
                            break a;
                          case "className":
                            m = "class";
                            l = "" + l;
                            break;
                          case "hidden":
                            if (false === l)
                              break a;
                            l = "";
                            break;
                          case "src":
                          case "href":
                            l = "" + l;
                            break;
                          default:
                            if (2 < g.length && ("o" === g[0] || "O" === g[0]) && ("n" === g[1] || "N" === g[1]) || !Ga(g))
                              break a;
                            l = "" + l;
                        }
                        n(e, xe);
                        n(e, $d(m));
                        n(e, xe);
                        n(e, $d(l));
                      }
                  }
              }
            n(
              a,
              ye
            );
            c = we;
            d.state |= 2;
          }
        }
      });
      n(a, ye);
    }
    function Ae(a, b) {
      n(a, ve);
      var c = ve;
      b.forEach(function(d) {
        if ("style" !== d.type && !(d.state & 1)) {
          if (d.state & 3)
            n(a, c), n(a, A(JSON.stringify("" + d.props.href))), n(a, ye), c = we;
          else if ("stylesheet" === d.type) {
            n(a, c);
            var e = d.props["data-precedence"], f = d.props;
            n(a, A(JSON.stringify("" + d.props.href)));
            e = "" + e;
            n(a, xe);
            n(a, A(JSON.stringify(e)));
            for (var g in f)
              if (x.call(f, g)) {
                var l = f[g];
                if (null != l)
                  switch (g) {
                    case "href":
                    case "rel":
                    case "precedence":
                    case "data-precedence":
                      break;
                    case "children":
                    case "dangerouslySetInnerHTML":
                      throw Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                    default:
                      a: {
                        e = a;
                        var m = g.toLowerCase();
                        switch (typeof l) {
                          case "function":
                          case "symbol":
                            break a;
                        }
                        switch (g) {
                          case "innerHTML":
                          case "dangerouslySetInnerHTML":
                          case "suppressContentEditableWarning":
                          case "suppressHydrationWarning":
                          case "style":
                            break a;
                          case "className":
                            m = "class";
                            l = "" + l;
                            break;
                          case "hidden":
                            if (false === l)
                              break a;
                            l = "";
                            break;
                          case "src":
                          case "href":
                            l = "" + l;
                            break;
                          default:
                            if (2 < g.length && ("o" === g[0] || "O" === g[0]) && ("n" === g[1] || "N" === g[1]) || !Ga(g))
                              break a;
                            l = "" + l;
                        }
                        n(e, xe);
                        n(e, A(JSON.stringify(m)));
                        n(e, xe);
                        n(e, A(JSON.stringify(l)));
                      }
                  }
              }
            n(
              a,
              ye
            );
            c = we;
            d.state |= 2;
          }
        }
      });
      n(a, ye);
    }
    function fb(a) {
      var b = Be();
      if (b) {
        var c = b.resources;
        if ("string" === typeof a && a) {
          var d = "[prefetchDNS]" + a, e = c.preconnectsMap.get(d);
          e || (e = { type: "preconnect", chunks: [], state: 0, props: null }, c.preconnectsMap.set(d, e), R(e.chunks, { href: a, rel: "dns-prefetch" }));
          c.preconnects.add(e);
          Ce(b);
        }
      }
    }
    function gb(a, b) {
      var c = Be();
      if (c) {
        var d = c.resources;
        if ("string" === typeof a && a) {
          b = null == b || "string" !== typeof b.crossOrigin ? null : "use-credentials" === b.crossOrigin ? "use-credentials" : "";
          var e = "[preconnect][" + (null === b ? "null" : b) + "]" + a, f = d.preconnectsMap.get(e);
          f || (f = { type: "preconnect", chunks: [], state: 0, props: null }, d.preconnectsMap.set(e, f), R(f.chunks, { rel: "preconnect", href: a, crossOrigin: b }));
          d.preconnects.add(f);
          Ce(c);
        }
      }
    }
    function hb(a, b) {
      var c = Be();
      if (c) {
        var d = c.resources;
        if ("string" === typeof a && a && "object" === typeof b && null !== b && "string" === typeof b.as && b.as) {
          var e = b.as;
          if ("image" === e) {
            var f = b.imageSrcSet;
            var g = b.imageSizes, l = "";
            "string" === typeof f && "" !== f ? (l += "[" + f + "]", "string" === typeof g && (l += "[" + g + "]")) : l += "[][]" + a;
            f = "[" + e + "]" + l;
          } else
            f = "[" + e + "]" + a;
          g = d.preloadsMap.get(f);
          g || (g = { type: "preload", chunks: [], state: 0, props: {
            rel: "preload",
            as: e,
            href: "image" === e && b.imageSrcSet ? void 0 : a,
            crossOrigin: "font" === e ? "" : b.crossOrigin,
            integrity: b.integrity,
            type: b.type,
            nonce: b.nonce,
            fetchPriority: b.fetchPriority,
            imageSrcSet: b.imageSrcSet,
            imageSizes: b.imageSizes
          } }, d.preloadsMap.set(f, g), R(g.chunks, g.props));
          switch (e) {
            case "font":
              d.fontPreloads.add(g);
              break;
            case "style":
              d.explicitStylesheetPreloads.add(g);
              break;
            case "script":
              d.explicitScriptPreloads.add(g);
              break;
            default:
              d.explicitOtherPreloads.add(g);
          }
          Ce(c);
        }
      }
    }
    function ib(a, b) {
      var c = Be();
      if (c) {
        var d = c.resources;
        if ("string" === typeof a && a && "object" === typeof b && null !== b) {
          var e = b.as;
          switch (e) {
            case "style":
              var f = "[" + e + "]" + a, g = d.stylesMap.get(f);
              e = b.precedence || "default";
              if (!g) {
                g = 0;
                var l = d.preloadsMap.get(f);
                l && l.state & 3 && (g = 8);
                g = { type: "stylesheet", chunks: [], state: g, props: { rel: "stylesheet", href: a, "data-precedence": e, crossOrigin: b.crossOrigin, integrity: b.integrity, fetchPriority: b.fetchPriority } };
                d.stylesMap.set(f, g);
                a = d.precedences.get(e);
                a || (a = /* @__PURE__ */ new Set(), d.precedences.set(
                  e,
                  a
                ), b = { type: "style", chunks: [], state: 0, props: { precedence: e, hrefs: [] } }, a.add(b), d.stylePrecedences.set(e, b));
                a.add(g);
                Ce(c);
              }
              break;
            case "script":
              f = "[" + e + "]" + a, e = d.scriptsMap.get(f), e || (e = { type: "script", chunks: [], state: 0, props: null }, d.scriptsMap.set(f, e), a = { src: a, async: true, crossOrigin: b.crossOrigin, integrity: b.integrity, nonce: b.nonce, fetchPriority: b.fetchPriority }, d.scripts.add(e), fc(e.chunks, a), Ce(c));
          }
        }
      }
    }
    function De(a) {
      this.add(a);
    }
    var Ee = new na.AsyncLocalStorage();
    var Fe = Symbol.for("react.element");
    var He = Symbol.for("react.portal");
    var Ie = Symbol.for("react.fragment");
    var Je = Symbol.for("react.strict_mode");
    var Ke = Symbol.for("react.profiler");
    var Le = Symbol.for("react.provider");
    var Me = Symbol.for("react.context");
    var Ne = Symbol.for("react.server_context");
    var Oe = Symbol.for("react.forward_ref");
    var Pe = Symbol.for("react.suspense");
    var Qe = Symbol.for("react.suspense_list");
    var Re = Symbol.for("react.memo");
    var Se = Symbol.for("react.lazy");
    var Te = Symbol.for("react.scope");
    var Ue = Symbol.for("react.debug_trace_mode");
    var Ve = Symbol.for("react.offscreen");
    var We = Symbol.for("react.legacy_hidden");
    var Xe = Symbol.for("react.cache");
    var Ye = Symbol.for("react.default_value");
    var Ze = Symbol.for("react.memo_cache_sentinel");
    var $e = Symbol.iterator;
    function af(a) {
      if (null == a)
        return null;
      if ("function" === typeof a)
        return a.displayName || a.name || null;
      if ("string" === typeof a)
        return a;
      switch (a) {
        case Ie:
          return "Fragment";
        case He:
          return "Portal";
        case Ke:
          return "Profiler";
        case Je:
          return "StrictMode";
        case Pe:
          return "Suspense";
        case Qe:
          return "SuspenseList";
        case Xe:
          return "Cache";
      }
      if ("object" === typeof a)
        switch (a.$$typeof) {
          case Me:
            return (a.displayName || "Context") + ".Consumer";
          case Le:
            return (a._context.displayName || "Context") + ".Provider";
          case Oe:
            var b = a.render;
            a = a.displayName;
            a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
            return a;
          case Re:
            return b = a.displayName || null, null !== b ? b : af(a.type) || "Memo";
          case Se:
            b = a._payload;
            a = a._init;
            try {
              return af(a(b));
            } catch (c) {
              break;
            }
          case Ne:
            return (a.displayName || a._globalName) + ".Provider";
        }
      return null;
    }
    var bf = {};
    function cf(a, b) {
      a = a.contextTypes;
      if (!a)
        return bf;
      var c = {}, d;
      for (d in a)
        c[d] = b[d];
      return c;
    }
    var df = null;
    function ef(a, b) {
      if (a !== b) {
        a.context._currentValue = a.parentValue;
        a = a.parent;
        var c = b.parent;
        if (null === a) {
          if (null !== c)
            throw Error("The stacks must reach the root at the same time. This is a bug in React.");
        } else {
          if (null === c)
            throw Error("The stacks must reach the root at the same time. This is a bug in React.");
          ef(a, c);
        }
        b.context._currentValue = b.value;
      }
    }
    function ff(a) {
      a.context._currentValue = a.parentValue;
      a = a.parent;
      null !== a && ff(a);
    }
    function gf(a) {
      var b = a.parent;
      null !== b && gf(b);
      a.context._currentValue = a.value;
    }
    function hf(a, b) {
      a.context._currentValue = a.parentValue;
      a = a.parent;
      if (null === a)
        throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
      a.depth === b.depth ? ef(a, b) : hf(a, b);
    }
    function jf(a, b) {
      var c = b.parent;
      if (null === c)
        throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
      a.depth === c.depth ? ef(a, c) : jf(a, c);
      b.context._currentValue = b.value;
    }
    function kf(a) {
      var b = df;
      b !== a && (null === b ? gf(a) : null === a ? ff(b) : b.depth === a.depth ? ef(b, a) : b.depth > a.depth ? hf(b, a) : jf(b, a), df = a);
    }
    var lf = { isMounted: function() {
      return false;
    }, enqueueSetState: function(a, b) {
      a = a._reactInternals;
      null !== a.queue && a.queue.push(b);
    }, enqueueReplaceState: function(a, b) {
      a = a._reactInternals;
      a.replace = true;
      a.queue = [b];
    }, enqueueForceUpdate: function() {
    } };
    function mf(a, b, c, d) {
      var e = void 0 !== a.state ? a.state : null;
      a.updater = lf;
      a.props = c;
      a.state = e;
      var f = { queue: [], replace: false };
      a._reactInternals = f;
      var g = b.contextType;
      a.context = "object" === typeof g && null !== g ? g._currentValue : d;
      g = b.getDerivedStateFromProps;
      "function" === typeof g && (g = g(c, e), e = null === g || void 0 === g ? e : xa({}, e, g), a.state = e);
      if ("function" !== typeof b.getDerivedStateFromProps && "function" !== typeof a.getSnapshotBeforeUpdate && ("function" === typeof a.UNSAFE_componentWillMount || "function" === typeof a.componentWillMount))
        if (b = a.state, "function" === typeof a.componentWillMount && a.componentWillMount(), "function" === typeof a.UNSAFE_componentWillMount && a.UNSAFE_componentWillMount(), b !== a.state && lf.enqueueReplaceState(a, a.state, null), null !== f.queue && 0 < f.queue.length)
          if (b = f.queue, g = f.replace, f.queue = null, f.replace = false, g && 1 === b.length)
            a.state = b[0];
          else {
            f = g ? b[0] : a.state;
            e = true;
            for (g = g ? 1 : 0; g < b.length; g++) {
              var l = b[g];
              l = "function" === typeof l ? l.call(a, f, c, d) : l;
              null != l && (e ? (e = false, f = xa({}, f, l)) : xa(f, l));
            }
            a.state = f;
          }
        else
          f.queue = null;
    }
    var nf = { id: 1, overflow: "" };
    function of(a, b, c) {
      var d = a.id;
      a = a.overflow;
      var e = 32 - pf(d) - 1;
      d &= ~(1 << e);
      c += 1;
      var f = 32 - pf(b) + e;
      if (30 < f) {
        var g = e - e % 5;
        f = (d & (1 << g) - 1).toString(32);
        d >>= g;
        e -= g;
        return { id: 1 << 32 - pf(b) + e | c << e | d, overflow: f + a };
      }
      return { id: 1 << f | c << e | d, overflow: a };
    }
    var pf = Math.clz32 ? Math.clz32 : qf;
    var rf = Math.log;
    var sf = Math.LN2;
    function qf(a) {
      a >>>= 0;
      return 0 === a ? 32 : 31 - (rf(a) / sf | 0) | 0;
    }
    var tf = Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`");
    function uf() {
    }
    function vf(a, b, c) {
      c = a[c];
      void 0 === c ? a.push(b) : c !== b && (b.then(uf, uf), b = c);
      switch (b.status) {
        case "fulfilled":
          return b.value;
        case "rejected":
          throw b.reason;
        default:
          if ("string" !== typeof b.status)
            switch (a = b, a.status = "pending", a.then(function(d) {
              if ("pending" === b.status) {
                var e = b;
                e.status = "fulfilled";
                e.value = d;
              }
            }, function(d) {
              if ("pending" === b.status) {
                var e = b;
                e.status = "rejected";
                e.reason = d;
              }
            }), b.status) {
              case "fulfilled":
                return b.value;
              case "rejected":
                throw b.reason;
            }
          wf = b;
          throw tf;
      }
    }
    var wf = null;
    function xf() {
      if (null === wf)
        throw Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
      var a = wf;
      wf = null;
      return a;
    }
    function yf(a, b) {
      return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
    }
    var zf = "function" === typeof Object.is ? Object.is : yf;
    var V = null;
    var Af = null;
    var Bf = null;
    var Y = null;
    var Cf = false;
    var Df = false;
    var Ef = 0;
    var Ff = 0;
    var Gf = null;
    var Hf = null;
    var If = 0;
    function Jf() {
      if (null === V)
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
      return V;
    }
    function Kf() {
      if (0 < If)
        throw Error("Rendered more hooks than during the previous render");
      return { memoizedState: null, queue: null, next: null };
    }
    function Lf() {
      null === Y ? null === Bf ? (Cf = false, Bf = Y = Kf()) : (Cf = true, Y = Bf) : null === Y.next ? (Cf = false, Y = Y.next = Kf()) : (Cf = true, Y = Y.next);
      return Y;
    }
    function Mf(a, b, c, d) {
      for (; Df; )
        Df = false, Ff = Ef = 0, If += 1, Y = null, c = a(b, d);
      Nf();
      return c;
    }
    function Of() {
      var a = Gf;
      Gf = null;
      return a;
    }
    function Nf() {
      Af = V = null;
      Df = false;
      Bf = null;
      If = 0;
      Y = Hf = null;
    }
    function Pf(a, b) {
      return "function" === typeof b ? b(a) : b;
    }
    function Qf(a, b, c) {
      V = Jf();
      Y = Lf();
      if (Cf) {
        var d = Y.queue;
        b = d.dispatch;
        if (null !== Hf && (c = Hf.get(d), void 0 !== c)) {
          Hf.delete(d);
          d = Y.memoizedState;
          do
            d = a(d, c.action), c = c.next;
          while (null !== c);
          Y.memoizedState = d;
          return [d, b];
        }
        return [Y.memoizedState, b];
      }
      a = a === Pf ? "function" === typeof b ? b() : b : void 0 !== c ? c(b) : b;
      Y.memoizedState = a;
      a = Y.queue = { last: null, dispatch: null };
      a = a.dispatch = Rf.bind(null, V, a);
      return [Y.memoizedState, a];
    }
    function Sf(a, b) {
      V = Jf();
      Y = Lf();
      b = void 0 === b ? null : b;
      if (null !== Y) {
        var c = Y.memoizedState;
        if (null !== c && null !== b) {
          var d = c[1];
          a:
            if (null === d)
              d = false;
            else {
              for (var e = 0; e < d.length && e < b.length; e++)
                if (!zf(b[e], d[e])) {
                  d = false;
                  break a;
                }
              d = true;
            }
          if (d)
            return c[0];
        }
      }
      a = a();
      Y.memoizedState = [a, b];
      return a;
    }
    function Rf(a, b, c) {
      if (25 <= If)
        throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
      if (a === V)
        if (Df = true, a = { action: c, next: null }, null === Hf && (Hf = /* @__PURE__ */ new Map()), c = Hf.get(b), void 0 === c)
          Hf.set(b, a);
        else {
          for (b = c; null !== b.next; )
            b = b.next;
          b.next = a;
        }
    }
    function Tf() {
      throw Error("A function wrapped in useEffectEvent can't be called during rendering.");
    }
    function Uf() {
      throw Error("startTransition cannot be called during server rendering.");
    }
    function Vf() {
      throw Error("Cannot update optimistic state while rendering.");
    }
    function Wf(a) {
      var b = Ff;
      Ff += 1;
      null === Gf && (Gf = []);
      return vf(Gf, a, b);
    }
    function Xf() {
      throw Error("Cache cannot be refreshed during server rendering.");
    }
    function Yf() {
    }
    var $f = {
      readContext: function(a) {
        return a._currentValue;
      },
      use: function(a) {
        if (null !== a && "object" === typeof a) {
          if ("function" === typeof a.then)
            return Wf(a);
          if (a.$$typeof === Me || a.$$typeof === Ne)
            return a._currentValue;
        }
        throw Error("An unsupported type was passed to use(): " + String(a));
      },
      useContext: function(a) {
        Jf();
        return a._currentValue;
      },
      useMemo: Sf,
      useReducer: Qf,
      useRef: function(a) {
        V = Jf();
        Y = Lf();
        var b = Y.memoizedState;
        return null === b ? (a = { current: a }, Y.memoizedState = a) : b;
      },
      useState: function(a) {
        return Qf(Pf, a);
      },
      useInsertionEffect: Yf,
      useLayoutEffect: Yf,
      useCallback: function(a, b) {
        return Sf(function() {
          return a;
        }, b);
      },
      useImperativeHandle: Yf,
      useEffect: Yf,
      useDebugValue: Yf,
      useDeferredValue: function(a) {
        Jf();
        return a;
      },
      useTransition: function() {
        Jf();
        return [false, Uf];
      },
      useId: function() {
        var a = Af.treeContext;
        var b = a.overflow;
        a = a.id;
        a = (a & ~(1 << 32 - pf(a) - 1)).toString(32) + b;
        var c = Zf;
        if (null === c)
          throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
        b = Ef++;
        a = ":" + c.idPrefix + "R" + a;
        0 < b && (a += "H" + b.toString(32));
        return a + ":";
      },
      useSyncExternalStore: function(a, b, c) {
        if (void 0 === c)
          throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        return c();
      },
      useCacheRefresh: function() {
        return Xf;
      },
      useEffectEvent: function() {
        return Tf;
      },
      useMemoCache: function(a) {
        for (var b = Array(a), c = 0; c < a; c++)
          b[c] = Ze;
        return b;
      },
      useHostTransitionStatus: function() {
        Jf();
        return db;
      },
      useOptimistic: function(a) {
        Jf();
        return [a, Vf];
      }
    };
    var Zf = null;
    var ag = { getCacheSignal: function() {
      throw Error("Not implemented.");
    }, getCacheForType: function() {
      throw Error("Not implemented.");
    } };
    var bg = cb.ReactCurrentDispatcher;
    var cg = cb.ReactCurrentCache;
    function dg(a) {
      console.error(a);
      return null;
    }
    function eg() {
    }
    var fg = null;
    function Be() {
      if (fg)
        return fg;
      var a = Ee.getStore();
      return a ? a : null;
    }
    function gg(a, b) {
      a.pingedTasks.push(b);
      1 === a.pingedTasks.length && (a.flushScheduled = null !== a.destination, setImmediate(function() {
        return hg(a);
      }));
    }
    function ig(a, b, c, d, e, f, g, l, m) {
      a.allPendingTasks++;
      null === d ? a.pendingRootTasks++ : d.pendingTasks++;
      var q = { node: c, ping: function() {
        return gg(a, q);
      }, blockedBoundary: d, blockedSegment: e, abortSet: f, legacyContext: g, context: l, treeContext: m, thenableState: b };
      f.add(q);
      return q;
    }
    function jg(a, b, c, d, e, f) {
      return { status: 0, id: -1, index: b, parentFlushed: false, chunks: [], children: [], formatContext: d, boundary: c, lastPushedText: e, textEmbedded: f };
    }
    function kg(a, b) {
      a = a.onError(b);
      if (null != a && "string" !== typeof a)
        throw Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof a + '" instead');
      return a;
    }
    function lg(a, b) {
      var c = a.onShellError;
      c(b);
      c = a.onFatalError;
      c(b);
      null !== a.destination ? (a.status = 2, a.destination.destroy(b)) : (a.status = 1, a.fatalError = b);
    }
    function mg(a, b, c, d) {
      var e = c.render(), f = d.childContextTypes;
      if (null !== f && void 0 !== f) {
        var g = b.legacyContext;
        if ("function" !== typeof c.getChildContext)
          d = g;
        else {
          c = c.getChildContext();
          for (var l in c)
            if (!(l in f))
              throw Error((af(d) || "Unknown") + '.getChildContext(): key "' + l + '" is not defined in childContextTypes.');
          d = xa({}, g, c);
        }
        b.legacyContext = d;
        Z(a, b, null, e);
        b.legacyContext = g;
      } else
        Z(a, b, null, e);
    }
    function ng(a, b) {
      if (a && a.defaultProps) {
        b = xa({}, b);
        a = a.defaultProps;
        for (var c in a)
          void 0 === b[c] && (b[c] = a[c]);
        return b;
      }
      return b;
    }
    function og(a, b, c, d, e, f) {
      if ("function" === typeof d)
        if (d.prototype && d.prototype.isReactComponent)
          c = cf(d, b.legacyContext), f = d.contextType, f = new d(e, "object" === typeof f && null !== f ? f._currentValue : c), mf(f, d, e, c), mg(a, b, f, d);
        else {
          f = cf(d, b.legacyContext);
          V = {};
          Af = b;
          Ff = Ef = 0;
          Gf = c;
          c = d(e, f);
          c = Mf(d, e, c, f);
          var g = 0 !== Ef;
          if ("object" === typeof c && null !== c && "function" === typeof c.render && void 0 === c.$$typeof)
            mf(c, d, e, f), mg(a, b, c, d);
          else if (g) {
            e = b.treeContext;
            b.treeContext = of(e, 1, 0);
            try {
              Z(a, b, null, c);
            } finally {
              b.treeContext = e;
            }
          } else
            Z(a, b, null, c);
        }
      else if ("string" === typeof d) {
        c = b.blockedSegment;
        g = lc(c.chunks, d, e, a.resources, a.responseState, c.formatContext, c.lastPushedText);
        c.lastPushedText = false;
        f = c.formatContext;
        c.formatContext = Bb(f, d, e);
        pg(a, b, g);
        c.formatContext = f;
        a: {
          b = c.chunks;
          switch (d) {
            case "title":
            case "style":
            case "script":
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr":
              break a;
            case "body":
              if (1 >= f.insertionMode) {
                a.responseState.hasBody = true;
                break a;
              }
              break;
            case "html":
              if (0 === f.insertionMode)
                break a;
          }
          b.push(dc, d, ec);
        }
        c.lastPushedText = false;
      } else {
        switch (d) {
          case We:
          case Ue:
          case Je:
          case Ke:
          case Ie:
            Z(a, b, null, e.children);
            return;
          case Ve:
            "hidden" !== e.mode && Z(a, b, null, e.children);
            return;
          case Qe:
            Z(a, b, null, e.children);
            return;
          case Te:
            throw Error("ReactDOMServer does not yet support scope components.");
          case Pe:
            a: {
              d = b.blockedBoundary;
              c = b.blockedSegment;
              f = e.fallback;
              e = e.children;
              g = /* @__PURE__ */ new Set();
              var l = {
                id: null,
                rootSegmentID: -1,
                parentFlushed: false,
                pendingTasks: 0,
                forceClientRender: false,
                completedSegments: [],
                byteSize: 0,
                fallbackAbortableTasks: g,
                errorDigest: null,
                resources: /* @__PURE__ */ new Set()
              }, m = jg(a, c.chunks.length, l, c.formatContext, false, false);
              c.children.push(m);
              c.lastPushedText = false;
              var q = jg(a, 0, null, c.formatContext, false, false);
              q.parentFlushed = true;
              b.blockedBoundary = l;
              b.blockedSegment = q;
              a.resources.boundaryResources = l.resources;
              try {
                if (pg(a, b, e), q.lastPushedText && q.textEmbedded && q.chunks.push(Cb), q.status = 1, qg(l, q), 0 === l.pendingTasks)
                  break a;
              } catch (t) {
                q.status = 4, l.forceClientRender = true, l.errorDigest = kg(a, t);
              } finally {
                a.resources.boundaryResources = d ? d.resources : null, b.blockedBoundary = d, b.blockedSegment = c;
              }
              b = ig(a, null, f, d, m, g, b.legacyContext, b.context, b.treeContext);
              a.pingedTasks.push(b);
            }
            return;
        }
        if ("object" === typeof d && null !== d)
          switch (d.$$typeof) {
            case Oe:
              d = d.render;
              V = {};
              Af = b;
              Ff = Ef = 0;
              Gf = c;
              c = d(e, f);
              e = Mf(d, e, c, f);
              if (0 !== Ef) {
                d = b.treeContext;
                b.treeContext = of(d, 1, 0);
                try {
                  Z(a, b, null, e);
                } finally {
                  b.treeContext = d;
                }
              } else
                Z(a, b, null, e);
              return;
            case Re:
              d = d.type;
              e = ng(d, e);
              og(
                a,
                b,
                c,
                d,
                e,
                f
              );
              return;
            case Le:
              c = e.children;
              d = d._context;
              e = e.value;
              f = d._currentValue;
              d._currentValue = e;
              g = df;
              df = e = { parent: g, depth: null === g ? 0 : g.depth + 1, context: d, parentValue: f, value: e };
              b.context = e;
              Z(a, b, null, c);
              a = df;
              if (null === a)
                throw Error("Tried to pop a Context at the root of the app. This is a bug in React.");
              e = a.parentValue;
              a.context._currentValue = e === Ye ? a.context._defaultValue : e;
              a = df = a.parent;
              b.context = a;
              return;
            case Me:
              e = e.children;
              e = e(d._currentValue);
              Z(a, b, null, e);
              return;
            case Se:
              f = d._init;
              d = f(d._payload);
              e = ng(d, e);
              og(a, b, c, d, e, void 0);
              return;
          }
        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null == d ? d : typeof d) + "."));
      }
    }
    function Z(a, b, c, d) {
      b.node = d;
      if ("object" === typeof d && null !== d) {
        switch (d.$$typeof) {
          case Fe:
            og(a, b, c, d.type, d.props, d.ref);
            return;
          case He:
            throw Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
          case Se:
            c = d._init;
            d = c(d._payload);
            Z(a, b, null, d);
            return;
        }
        if (bb(d)) {
          rg(a, b, d);
          return;
        }
        null === d || "object" !== typeof d ? c = null : (c = $e && d[$e] || d["@@iterator"], c = "function" === typeof c ? c : null);
        if (c && (c = c.call(d))) {
          d = c.next();
          if (!d.done) {
            var e = [];
            do
              e.push(d.value), d = c.next();
            while (!d.done);
            rg(a, b, e);
          }
          return;
        }
        if ("function" === typeof d.then)
          return Z(a, b, null, Wf(d));
        if (d.$$typeof === Me || d.$$typeof === Ne)
          return Z(a, b, null, d._currentValue);
        a = Object.prototype.toString.call(d);
        throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === a ? "object with keys {" + Object.keys(d).join(", ") + "}" : a) + "). If you meant to render a collection of children, use an array instead.");
      }
      "string" === typeof d ? (c = b.blockedSegment, c.lastPushedText = Db(b.blockedSegment.chunks, d, a.responseState, c.lastPushedText)) : "number" === typeof d && (c = b.blockedSegment, c.lastPushedText = Db(b.blockedSegment.chunks, "" + d, a.responseState, c.lastPushedText));
    }
    function rg(a, b, c) {
      for (var d = c.length, e = 0; e < d; e++) {
        var f = b.treeContext;
        b.treeContext = of(f, d, e);
        try {
          pg(a, b, c[e]);
        } finally {
          b.treeContext = f;
        }
      }
    }
    function pg(a, b, c) {
      var d = b.blockedSegment, e = d.children.length, f = d.chunks.length, g = b.blockedSegment.formatContext, l = b.legacyContext, m = b.context;
      try {
        return Z(a, b, null, c);
      } catch (q) {
        if (Nf(), d.children.length = e, d.chunks.length = f, c = q === tf ? xf() : q, "object" === typeof c && null !== c && "function" === typeof c.then)
          d = Of(), e = b.blockedSegment, f = jg(a, e.chunks.length, null, e.formatContext, e.lastPushedText, true), e.children.push(f), e.lastPushedText = false, a = ig(a, d, b.node, b.blockedBoundary, f, b.abortSet, b.legacyContext, b.context, b.treeContext).ping, c.then(a, a), b.blockedSegment.formatContext = g, b.legacyContext = l, b.context = m, kf(m);
        else
          throw b.blockedSegment.formatContext = g, b.legacyContext = l, b.context = m, kf(m), c;
      }
    }
    function sg(a) {
      var b = a.blockedBoundary;
      a = a.blockedSegment;
      a.status = 3;
      tg(this, b, a);
    }
    function ug(a, b, c) {
      var d = a.blockedBoundary;
      a.blockedSegment.status = 3;
      null === d ? (b.allPendingTasks--, 1 !== b.status && 2 !== b.status && (kg(b, c), lg(b, c))) : (d.pendingTasks--, d.forceClientRender || (d.forceClientRender = true, d.errorDigest = b.onError(c), d.parentFlushed && b.clientRenderedBoundaries.push(d)), d.fallbackAbortableTasks.forEach(function(e) {
        return ug(e, b, c);
      }), d.fallbackAbortableTasks.clear(), b.allPendingTasks--, 0 === b.allPendingTasks && (a = b.onAllReady, a()));
    }
    function qg(a, b) {
      if (0 === b.chunks.length && 1 === b.children.length && null === b.children[0].boundary) {
        var c = b.children[0];
        c.id = b.id;
        c.parentFlushed = true;
        1 === c.status && qg(a, c);
      } else
        a.completedSegments.push(b);
    }
    function tg(a, b, c) {
      if (null === b) {
        if (c.parentFlushed) {
          if (null !== a.completedRootSegment)
            throw Error("There can only be one root segment. This is a bug in React.");
          a.completedRootSegment = c;
        }
        a.pendingRootTasks--;
        0 === a.pendingRootTasks && (a.onShellError = eg, b = a.onShellReady, b());
      } else
        b.pendingTasks--, b.forceClientRender || (0 === b.pendingTasks ? (c.parentFlushed && 1 === c.status && qg(b, c), b.parentFlushed && a.completedBoundaries.push(b), b.fallbackAbortableTasks.forEach(sg, a), b.fallbackAbortableTasks.clear()) : c.parentFlushed && 1 === c.status && (qg(b, c), 1 === b.completedSegments.length && b.parentFlushed && a.partialBoundaries.push(b)));
      a.allPendingTasks--;
      0 === a.allPendingTasks && (a = a.onAllReady, a());
    }
    function hg(a) {
      if (2 !== a.status) {
        var b = df, c = bg.current;
        bg.current = $f;
        var d = cg.current;
        cg.current = ag;
        var e = fg;
        fg = a;
        var f = Zf;
        Zf = a.responseState;
        try {
          var g = a.pingedTasks, l;
          for (l = 0; l < g.length; l++) {
            var m = g[l];
            var q = a, t = m.blockedBoundary;
            q.resources.boundaryResources = t ? t.resources : null;
            var r = m.blockedSegment;
            if (0 === r.status) {
              kf(m.context);
              var H = r.children.length, y = r.chunks.length;
              try {
                var z = m.thenableState;
                m.thenableState = null;
                Z(q, m, z, m.node);
                r.lastPushedText && r.textEmbedded && r.chunks.push(Cb);
                m.abortSet.delete(m);
                r.status = 1;
                tg(q, m.blockedBoundary, r);
              } catch (D) {
                Nf();
                r.children.length = H;
                r.chunks.length = y;
                var C = D === tf ? xf() : D;
                if ("object" === typeof C && null !== C && "function" === typeof C.then) {
                  var p = m.ping;
                  C.then(p, p);
                  m.thenableState = Of();
                } else {
                  m.abortSet.delete(m);
                  r.status = 4;
                  var F = q, N = m.blockedBoundary, W = C, K = kg(F, W);
                  null === N ? lg(F, W) : (N.pendingTasks--, N.forceClientRender || (N.forceClientRender = true, N.errorDigest = K, N.parentFlushed && F.clientRenderedBoundaries.push(N)));
                  F.allPendingTasks--;
                  if (0 === F.allPendingTasks) {
                    var O = F.onAllReady;
                    O();
                  }
                }
              } finally {
                q.resources.boundaryResources = null;
              }
            }
          }
          g.splice(0, l);
          null !== a.destination && vg(a, a.destination);
        } catch (D) {
          kg(a, D), lg(a, D);
        } finally {
          Zf = f, bg.current = c, cg.current = d, c === $f && kf(b), fg = e;
        }
      }
    }
    function wg(a, b, c) {
      c.parentFlushed = true;
      switch (c.status) {
        case 0:
          var d = c.id = a.nextSegmentId++;
          c.lastPushedText = false;
          c.textEmbedded = false;
          a = a.responseState;
          n(b, nc);
          n(b, a.placeholderPrefix);
          a = d.toString(16);
          n(b, a);
          return v(b, oc);
        case 1:
          c.status = 2;
          var e = true;
          d = c.chunks;
          var f = 0;
          c = c.children;
          for (var g = 0; g < c.length; g++) {
            for (e = c[g]; f < e.index; f++)
              n(b, d[f]);
            e = xg(a, b, e);
          }
          for (; f < d.length - 1; f++)
            n(b, d[f]);
          f < d.length && (e = v(b, d[f]));
          return e;
        default:
          throw Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
      }
    }
    function xg(a, b, c) {
      var d = c.boundary;
      if (null === d)
        return wg(a, b, c);
      d.parentFlushed = true;
      if (d.forceClientRender)
        d = d.errorDigest, v(b, sc), n(b, uc), d && (n(b, wc), n(b, A(d)), n(b, vc)), v(b, xc), wg(a, b, c);
      else if (0 < d.pendingTasks) {
        d.rootSegmentID = a.nextSegmentId++;
        0 < d.completedSegments.length && a.partialBoundaries.push(d);
        var e = a.responseState;
        var f = e.nextSuspenseID++;
        e = w(e.boundaryPrefix + f.toString(16));
        d = d.id = e;
        yc(b, a.responseState, d);
        wg(a, b, c);
      } else if (d.byteSize > a.progressiveChunkSize)
        d.rootSegmentID = a.nextSegmentId++, a.completedBoundaries.push(d), yc(b, a.responseState, d.id), wg(a, b, c);
      else {
        (c = a.resources.boundaryResources) && d.resources.forEach(De, c);
        v(b, pc);
        c = d.completedSegments;
        if (1 !== c.length)
          throw Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
        xg(a, b, c[0]);
      }
      return v(b, tc);
    }
    function yg(a, b, c) {
      td(b, a.responseState, c.formatContext, c.id);
      xg(a, b, c);
      return ud(b, c.formatContext);
    }
    function zg(a, b, c) {
      a.resources.boundaryResources = c.resources;
      for (var d = c.completedSegments, e = 0; e < d.length; e++)
        Ag(a, b, c, d[e]);
      d.length = 0;
      ie(b, c.resources, a.responseState);
      a = a.responseState;
      d = c.id;
      e = c.rootSegmentID;
      c = c.resources;
      var f = a.stylesToHoist;
      a.stylesToHoist = false;
      var g = 0 === a.streamingFormat;
      g ? (n(b, a.startInlineScript), f ? 0 === (a.instructions & 2) ? (a.instructions |= 10, n(b, 2048 < Dd.length ? Dd.slice() : Dd)) : 0 === (a.instructions & 8) ? (a.instructions |= 8, n(b, Ed)) : n(b, Fd) : 0 === (a.instructions & 2) ? (a.instructions |= 2, n(b, Bd)) : n(b, Cd)) : f ? n(b, Ld) : n(b, Kd);
      if (null === d)
        throw Error("An ID must have been assigned before we can complete the boundary.");
      e = e.toString(16);
      n(b, d);
      g ? n(b, Gd) : n(b, Md);
      n(b, a.segmentPrefix);
      n(b, e);
      f ? g ? (n(b, Hd), ze(b, c)) : (n(b, Nd), Ae(b, c)) : g && n(b, Id);
      d = g ? v(b, Jd) : v(b, kb);
      return mc(b, a) && d;
    }
    function Ag(a, b, c, d) {
      if (2 === d.status)
        return true;
      var e = d.id;
      if (-1 === e) {
        if (-1 === (d.id = c.rootSegmentID))
          throw Error("A root segment ID must have been assigned by now. This is a bug in React.");
        return yg(a, b, d);
      }
      yg(a, b, d);
      a = a.responseState;
      (c = 0 === a.streamingFormat) ? (n(b, a.startInlineScript), 0 === (a.instructions & 1) ? (a.instructions |= 1, n(b, vd)) : n(b, wd)) : n(b, zd);
      n(b, a.segmentPrefix);
      e = e.toString(16);
      n(b, e);
      c ? n(b, xd) : n(b, Ad);
      n(b, a.placeholderPrefix);
      n(b, e);
      b = c ? v(b, yd) : v(b, kb);
      return b;
    }
    function vg(a, b) {
      h = new Uint8Array(2048);
      k = 0;
      ra = true;
      try {
        var c, d = a.completedRootSegment;
        if (null !== d)
          if (0 === a.pendingRootTasks) {
            var e = a.resources, f = a.responseState;
            if (0 !== a.allPendingTasks && f.externalRuntimeScript) {
              var g = f.externalRuntimeScript, l = g.chunks, m = "[script]" + g.src, q = e.scriptsMap.get(m);
              q || (q = { type: "script", chunks: l, state: 0, props: null }, e.scriptsMap.set(m, q), e.scripts.add(q));
            }
            var t = f.htmlChunks, r = f.headChunks;
            g = 0;
            if (t) {
              for (g = 0; g < t.length; g++)
                n(b, t[g]);
              if (r)
                for (g = 0; g < r.length; g++)
                  n(b, r[g]);
              else
                n(
                  b,
                  T("head")
                ), n(b, P);
            } else if (r)
              for (g = 0; g < r.length; g++)
                n(b, r[g]);
            var H = f.charsetChunks;
            for (g = 0; g < H.length; g++)
              n(b, H[g]);
            H.length = 0;
            e.preconnects.forEach(je, b);
            e.preconnects.clear();
            var y = f.preconnectChunks;
            for (g = 0; g < y.length; g++)
              n(b, y[g]);
            y.length = 0;
            e.fontPreloads.forEach(je, b);
            e.fontPreloads.clear();
            e.precedences.forEach(se, b);
            e.scripts.forEach(je, b);
            e.scripts.clear();
            e.explicitStylesheetPreloads.forEach(je, b);
            e.explicitStylesheetPreloads.clear();
            e.explicitScriptPreloads.forEach(je, b);
            e.explicitScriptPreloads.clear();
            e.explicitOtherPreloads.forEach(je, b);
            e.explicitOtherPreloads.clear();
            var z = f.preloadChunks;
            for (g = 0; g < z.length; g++)
              n(b, z[g]);
            z.length = 0;
            var C = f.hoistableChunks;
            for (g = 0; g < C.length; g++)
              n(b, C[g]);
            C.length = 0;
            t && null === r && (n(b, dc), n(b, "head"), n(b, ec));
            xg(a, b, d);
            a.completedRootSegment = null;
            mc(b, a.responseState);
          } else
            return;
        else if (0 < a.pendingRootTasks)
          return;
        var p = a.resources, F = a.responseState;
        d = 0;
        p.preconnects.forEach(ke, b);
        p.preconnects.clear();
        var N = F.preconnectChunks;
        for (d = 0; d < N.length; d++)
          n(b, N[d]);
        N.length = 0;
        p.fontPreloads.forEach(ke, b);
        p.fontPreloads.clear();
        p.precedences.forEach(ue, b);
        p.scripts.forEach(ke, b);
        p.scripts.clear();
        p.explicitStylesheetPreloads.forEach(ke, b);
        p.explicitStylesheetPreloads.clear();
        p.explicitScriptPreloads.forEach(ke, b);
        p.explicitScriptPreloads.clear();
        p.explicitOtherPreloads.forEach(ke, b);
        p.explicitOtherPreloads.clear();
        var W = F.preloadChunks;
        for (d = 0; d < W.length; d++)
          n(b, W[d]);
        W.length = 0;
        var K = F.hoistableChunks;
        for (d = 0; d < K.length; d++)
          n(b, K[d]);
        K.length = 0;
        var O = a.clientRenderedBoundaries;
        for (c = 0; c < O.length; c++) {
          var D = O[c];
          p = b;
          var E = a.responseState, ea = D.id, ya = D.errorDigest, sa = D.errorMessage, fa = D.errorComponentStack, aa = 0 === E.streamingFormat;
          aa ? (n(p, E.startInlineScript), 0 === (E.instructions & 4) ? (E.instructions |= 4, n(p, Od)) : n(p, Pd)) : n(p, Td);
          if (null === ea)
            throw Error("An ID must have been assigned before we can complete the boundary.");
          n(p, ea);
          aa && n(p, Qd);
          if (ya || sa || fa)
            aa ? (n(p, Rd), n(p, Yd(ya || ""))) : (n(p, Ud), n(p, A(ya || "")));
          if (sa || fa)
            aa ? (n(p, Rd), n(p, Yd(sa || ""))) : (n(p, Vd), n(p, A(sa || "")));
          fa && (aa ? (n(p, Rd), n(p, Yd(fa))) : (n(p, Wd), n(p, A(fa))));
          if (aa ? !v(p, Sd) : !v(p, kb)) {
            a.destination = null;
            c++;
            O.splice(0, c);
            return;
          }
        }
        O.splice(0, c);
        var ta = a.completedBoundaries;
        for (c = 0; c < ta.length; c++)
          if (!zg(a, b, ta[c])) {
            a.destination = null;
            c++;
            ta.splice(0, c);
            return;
          }
        ta.splice(0, c);
        wa(b);
        h = new Uint8Array(2048);
        k = 0;
        ra = true;
        var ha = a.partialBoundaries;
        for (c = 0; c < ha.length; c++) {
          var ia = ha[c];
          a: {
            O = a;
            D = b;
            O.resources.boundaryResources = ia.resources;
            var ja = ia.completedSegments;
            for (E = 0; E < ja.length; E++)
              if (!Ag(O, D, ia, ja[E])) {
                E++;
                ja.splice(
                  0,
                  E
                );
                var za = false;
                break a;
              }
            ja.splice(0, E);
            za = ie(D, ia.resources, O.responseState);
          }
          if (!za) {
            a.destination = null;
            c++;
            ha.splice(0, c);
            return;
          }
        }
        ha.splice(0, c);
        var X = a.completedBoundaries;
        for (c = 0; c < X.length; c++)
          if (!zg(a, b, X[c])) {
            a.destination = null;
            c++;
            X.splice(0, c);
            return;
          }
        X.splice(0, c);
      } finally {
        0 === a.allPendingTasks && 0 === a.pingedTasks.length && 0 === a.clientRenderedBoundaries.length && 0 === a.completedBoundaries.length ? (a.flushScheduled = false, a = a.responseState, a.hasBody && (n(b, dc), n(b, "body"), n(b, ec)), a.htmlChunks && (n(b, dc), n(b, "html"), n(b, ec)), wa(b), qa(b), b.end()) : (wa(b), qa(b));
      }
    }
    function Bg(a) {
      a.flushScheduled = null !== a.destination;
      setImmediate(function() {
        return Ee.run(a, hg, a);
      });
    }
    function Ce(a) {
      if (false === a.flushScheduled && 0 === a.pingedTasks.length && null !== a.destination) {
        var b = a.destination;
        a.flushScheduled = true;
        setImmediate(function() {
          return vg(a, b);
        });
      }
    }
    function Cg(a, b) {
      if (1 === a.status)
        a.status = 2, b.destroy(a.fatalError);
      else if (2 !== a.status && null === a.destination) {
        a.destination = b;
        try {
          vg(a, b);
        } catch (c) {
          kg(a, c), lg(a, c);
        }
      }
    }
    function Dg(a, b) {
      try {
        var c = a.abortableTasks;
        if (0 < c.size) {
          var d = void 0 === b ? Error("The render was aborted by the server without a reason.") : b;
          c.forEach(function(e) {
            return ug(e, a, d);
          });
          c.clear();
        }
        null !== a.destination && vg(a, a.destination);
      } catch (e) {
        kg(a, e), lg(a, e);
      }
    }
    function Eg(a, b) {
      return function() {
        return Cg(b, a);
      };
    }
    function Fg(a, b) {
      return function() {
        return Dg(a, Error(b));
      };
    }
    function Gg(a, b) {
      var c = { preloadsMap: /* @__PURE__ */ new Map(), preconnectsMap: /* @__PURE__ */ new Map(), stylesMap: /* @__PURE__ */ new Map(), scriptsMap: /* @__PURE__ */ new Map(), preconnects: /* @__PURE__ */ new Set(), fontPreloads: /* @__PURE__ */ new Set(), precedences: /* @__PURE__ */ new Map(), stylePrecedences: /* @__PURE__ */ new Map(), scripts: /* @__PURE__ */ new Set(), explicitStylesheetPreloads: /* @__PURE__ */ new Set(), explicitScriptPreloads: /* @__PURE__ */ new Set(), explicitOtherPreloads: /* @__PURE__ */ new Set(), boundaryResources: null }, d = b ? b.identifierPrefix : void 0;
      var e = b ? b.nonce : void 0;
      var f = b ? b.bootstrapScriptContent : void 0, g = b ? b.bootstrapScripts : void 0, l = b ? b.bootstrapModules : void 0, m = b ? b.unstable_externalRuntimeSrc : void 0;
      d = void 0 === d ? "" : d;
      var q = void 0 === e ? lb : w('<script nonce="' + A(e) + '">'), t = [], r = null, H = 0;
      void 0 !== f && t.push(q, ("" + f).replace(zb, Ab), sb);
      void 0 !== m && (H = 1, "string" === typeof m ? (r = { src: m, chunks: [] }, fc(r.chunks, { src: m, async: true, integrity: void 0, nonce: e })) : (r = { src: m.src, chunks: [] }, fc(r.chunks, { src: m.src, async: true, integrity: m.integrity, nonce: e })));
      if (void 0 !== g)
        for (f = 0; f < g.length; f++) {
          var y = g[f];
          m = "string" === typeof y ? y : y.src;
          var z = "string" === typeof y ? void 0 : y.integrity;
          y = "string" === typeof y || null == y.crossOrigin ? void 0 : "use-credentials" === y.crossOrigin ? "use-credentials" : "";
          var C = { rel: "preload", href: m, as: "script", nonce: e, integrity: z, crossOrigin: y }, p = { type: "preload", chunks: [], state: 0, props: C };
          c.preloadsMap.set("[script]" + m, p);
          c.explicitScriptPreloads.add(p);
          R(p.chunks, C);
          t.push(tb, A(m));
          e && t.push(vb, A(e));
          z && t.push(wb, A(z));
          "string" === typeof y && t.push(xb, A(y));
          t.push(yb);
        }
      if (void 0 !== l)
        for (g = 0; g < l.length; g++)
          z = l[g], f = "string" === typeof z ? z : z.src, m = "string" === typeof z ? void 0 : z.integrity, z = "string" === typeof z || null == z.crossOrigin ? void 0 : "use-credentials" === z.crossOrigin ? "use-credentials" : "", y = { rel: "modulepreload", href: f, nonce: e, integrity: m, crossOrigin: z }, C = { type: "preload", chunks: [], state: 0, props: y }, c.preloadsMap.set("[script]" + f, C), c.explicitScriptPreloads.add(C), R(C.chunks, y), t.push(ub, A(f)), e && t.push(vb, A(e)), m && t.push(wb, A(m)), "string" === typeof z && t.push(xb, A(z)), t.push(yb);
      e = {
        bootstrapChunks: t,
        placeholderPrefix: w(d + "P:"),
        segmentPrefix: w(d + "S:"),
        boundaryPrefix: d + "B:",
        idPrefix: d,
        nextSuspenseID: 0,
        streamingFormat: H,
        startInlineScript: q,
        instructions: 0,
        externalRuntimeScript: r,
        htmlChunks: null,
        headChunks: null,
        hasBody: false,
        charsetChunks: [],
        preconnectChunks: [],
        preloadChunks: [],
        hoistableChunks: [],
        stylesToHoist: false,
        nonce: e
      };
      l = b ? b.namespaceURI : void 0;
      l = B("http://www.w3.org/2000/svg" === l ? 3 : "http://www.w3.org/1998/Math/MathML" === l ? 4 : 0, null, false);
      q = b ? b.progressiveChunkSize : void 0;
      t = b ? b.onError : void 0;
      r = b ? b.onAllReady : void 0;
      H = b ? b.onShellReady : void 0;
      g = b ? b.onShellError : void 0;
      eb.current = jb;
      b = [];
      d = /* @__PURE__ */ new Set();
      c = {
        destination: null,
        flushScheduled: false,
        responseState: e,
        progressiveChunkSize: void 0 === q ? 12800 : q,
        status: 0,
        fatalError: null,
        nextSegmentId: 0,
        allPendingTasks: 0,
        pendingRootTasks: 0,
        resources: c,
        completedRootSegment: null,
        abortableTasks: d,
        pingedTasks: b,
        clientRenderedBoundaries: [],
        completedBoundaries: [],
        partialBoundaries: [],
        onError: void 0 === t ? dg : t,
        onAllReady: void 0 === r ? eg : r,
        onShellReady: void 0 === H ? eg : H,
        onShellError: void 0 === g ? eg : g,
        onFatalError: eg
      };
      e = jg(c, 0, null, l, false, false);
      e.parentFlushed = true;
      a = ig(c, null, a, null, e, d, bf, null, nf);
      b.push(a);
      return c;
    }
    exports.renderToPipeableStream = function(a, b) {
      var c = Gg(a, b), d = false;
      Bg(c);
      return { pipe: function(e) {
        if (d)
          throw Error("React currently only supports piping to one writable stream.");
        d = true;
        Cg(c, e);
        e.on("drain", Eg(e, c));
        e.on("error", Fg(c, "The destination stream errored while writing data."));
        e.on("close", Fg(c, "The destination stream closed early."));
        return e;
      }, abort: function(e) {
        Dg(c, e);
      } };
    };
    exports.version = "18.3.0-experimental-a1c62b8a7-20230627";
  }
});

// node_modules/react-dom/cjs/react-dom-server-legacy.node.development.js
var require_react_dom_server_legacy_node_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server-legacy.node.development.js"(exports) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var React = require_react();
        var ReactDOM = require_react_dom();
        var stream = require("stream");
        var ReactVersion = "18.3.0-experimental-a1c62b8a7-20230627";
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function scheduleWork(callback) {
          callback();
        }
        function beginWriting(destination) {
        }
        function writeChunk(destination, chunk) {
          writeChunkAndReturn(destination, chunk);
        }
        function writeChunkAndReturn(destination, chunk) {
          return destination.push(chunk);
        }
        function completeWriting(destination) {
        }
        function close(destination) {
          destination.push(null);
        }
        function stringToChunk(content) {
          return content;
        }
        function stringToPrecomputedChunk(content) {
          return content;
        }
        function clonePrecomputedChunk(chunk) {
          return chunk;
        }
        function closeWithError(destination, error2) {
          destination.destroy(error2);
        }
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var assign = Object.assign;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var enableFloat = true;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        var unitlessNumbers = /* @__PURE__ */ new Set([
          "animationIterationCount",
          "aspectRatio",
          "borderImageOutset",
          "borderImageSlice",
          "borderImageWidth",
          "boxFlex",
          "boxFlexGroup",
          "boxOrdinalGroup",
          "columnCount",
          "columns",
          "flex",
          "flexGrow",
          "flexPositive",
          "flexShrink",
          "flexNegative",
          "flexOrder",
          "gridArea",
          "gridRow",
          "gridRowEnd",
          "gridRowSpan",
          "gridRowStart",
          "gridColumn",
          "gridColumnEnd",
          "gridColumnSpan",
          "gridColumnStart",
          "fontWeight",
          "lineClamp",
          "lineHeight",
          "opacity",
          "order",
          "orphans",
          "scale",
          "tabSize",
          "widows",
          "zIndex",
          "zoom",
          "fillOpacity",
          // SVG-related properties
          "floodOpacity",
          "stopOpacity",
          "strokeDasharray",
          "strokeDashoffset",
          "strokeMiterlimit",
          "strokeOpacity",
          "strokeWidth",
          "MozAnimationIterationCount",
          // Known Prefixed Properties
          "MozBoxFlex",
          // TODO: Remove these since they shouldn't be used in modern code
          "MozBoxFlexGroup",
          "MozLineClamp",
          "msAnimationIterationCount",
          "msFlex",
          "msZoom",
          "msFlexGrow",
          "msFlexNegative",
          "msFlexOrder",
          "msFlexPositive",
          "msFlexShrink",
          "msGridColumn",
          "msGridColumnSpan",
          "msGridRow",
          "msGridRowSpan",
          "WebkitAnimationIterationCount",
          "WebkitBoxFlex",
          "WebKitBoxFlexGroup",
          "WebkitBoxOrdinalGroup",
          "WebkitColumnCount",
          "WebkitColumns",
          "WebkitFlex",
          "WebkitFlexGrow",
          "WebkitFlexPositive",
          "WebkitFlexShrink",
          "WebkitLineClamp"
        ]);
        function isUnitlessNumber(name) {
          return unitlessNumbers.has(name);
        }
        var aliases = /* @__PURE__ */ new Map([
          ["acceptCharset", "accept-charset"],
          ["htmlFor", "for"],
          ["httpEquiv", "http-equiv"],
          // HTML and SVG attributes, but the SVG attribute is case sensitive.],
          ["crossOrigin", "crossorigin"],
          // This is a list of all SVG attributes that need special casing.
          // Regular attributes that just accept strings.],
          ["accentHeight", "accent-height"],
          ["alignmentBaseline", "alignment-baseline"],
          ["arabicForm", "arabic-form"],
          ["baselineShift", "baseline-shift"],
          ["capHeight", "cap-height"],
          ["clipPath", "clip-path"],
          ["clipRule", "clip-rule"],
          ["colorInterpolation", "color-interpolation"],
          ["colorInterpolationFilters", "color-interpolation-filters"],
          ["colorProfile", "color-profile"],
          ["colorRendering", "color-rendering"],
          ["dominantBaseline", "dominant-baseline"],
          ["enableBackground", "enable-background"],
          ["fillOpacity", "fill-opacity"],
          ["fillRule", "fill-rule"],
          ["floodColor", "flood-color"],
          ["floodOpacity", "flood-opacity"],
          ["fontFamily", "font-family"],
          ["fontSize", "font-size"],
          ["fontSizeAdjust", "font-size-adjust"],
          ["fontStretch", "font-stretch"],
          ["fontStyle", "font-style"],
          ["fontVariant", "font-variant"],
          ["fontWeight", "font-weight"],
          ["glyphName", "glyph-name"],
          ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
          ["glyphOrientationVertical", "glyph-orientation-vertical"],
          ["horizAdvX", "horiz-adv-x"],
          ["horizOriginX", "horiz-origin-x"],
          ["imageRendering", "image-rendering"],
          ["letterSpacing", "letter-spacing"],
          ["lightingColor", "lighting-color"],
          ["markerEnd", "marker-end"],
          ["markerMid", "marker-mid"],
          ["markerStart", "marker-start"],
          ["overlinePosition", "overline-position"],
          ["overlineThickness", "overline-thickness"],
          ["paintOrder", "paint-order"],
          ["panose-1", "panose-1"],
          ["pointerEvents", "pointer-events"],
          ["renderingIntent", "rendering-intent"],
          ["shapeRendering", "shape-rendering"],
          ["stopColor", "stop-color"],
          ["stopOpacity", "stop-opacity"],
          ["strikethroughPosition", "strikethrough-position"],
          ["strikethroughThickness", "strikethrough-thickness"],
          ["strokeDasharray", "stroke-dasharray"],
          ["strokeDashoffset", "stroke-dashoffset"],
          ["strokeLinecap", "stroke-linecap"],
          ["strokeLinejoin", "stroke-linejoin"],
          ["strokeMiterlimit", "stroke-miterlimit"],
          ["strokeOpacity", "stroke-opacity"],
          ["strokeWidth", "stroke-width"],
          ["textAnchor", "text-anchor"],
          ["textDecoration", "text-decoration"],
          ["textRendering", "text-rendering"],
          ["transformOrigin", "transform-origin"],
          ["underlinePosition", "underline-position"],
          ["underlineThickness", "underline-thickness"],
          ["unicodeBidi", "unicode-bidi"],
          ["unicodeRange", "unicode-range"],
          ["unitsPerEm", "units-per-em"],
          ["vAlphabetic", "v-alphabetic"],
          ["vHanging", "v-hanging"],
          ["vIdeographic", "v-ideographic"],
          ["vMathematical", "v-mathematical"],
          ["vectorEffect", "vector-effect"],
          ["vertAdvY", "vert-adv-y"],
          ["vertOriginX", "vert-origin-x"],
          ["vertOriginY", "vert-origin-y"],
          ["wordSpacing", "word-spacing"],
          ["writingMode", "writing-mode"],
          ["xmlnsXlink", "xmlns:xlink"],
          ["xHeight", "x-height"]
        ]);
        function getAttributeAlias(name) {
          return aliases.get(name) || name;
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties$1 = {};
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty$1(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            if (rARIACamel$1.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties$1[name] = true;
                return true;
              }
            }
            if (rARIA$1.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties$1[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function validateProperties$2(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        function isCustomElement(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return false;
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          fetchpriority: "fetchPriority",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          transformorigin: "transformOrigin",
          "transform-origin": "transformOrigin",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var warnedProperties = {};
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name, value, eventRegistry) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties[name] = true;
              return true;
            }
            {
              if (typeof value === "function") {
                if (tagName === "form" && name === "action") {
                  return true;
                }
                if (tagName === "input" && name === "formAction") {
                  return true;
                }
                if (tagName === "button" && name === "formAction") {
                  return true;
                }
              }
            }
            if (eventRegistry != null) {
              var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties[name] = true;
              return true;
            }
            if (rARIA.test(name) || rARIACamel.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            } else if (name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties[name] = true;
              return true;
            }
            switch (name) {
              case "dangerouslySetInnerHTML":
              case "children":
              case "style":
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
              case "defaultValue":
              case "defaultChecked":
              case "innerHTML": {
                return true;
              }
              case "innerText":
              case "textContent": {
                return true;
              }
            }
            switch (typeof value) {
              case "boolean": {
                switch (name) {
                  case "autoFocus":
                  case "checked":
                  case "multiple":
                  case "muted":
                  case "selected":
                  case "contentEditable":
                  case "spellCheck":
                  case "draggable":
                  case "value":
                  case "autoReverse":
                  case "externalResourcesRequired":
                  case "focusable":
                  case "preserveAlpha":
                  case "allowFullScreen":
                  case "async":
                  case "autoPlay":
                  case "controls":
                  case "default":
                  case "defer":
                  case "disabled":
                  case "disablePictureInPicture":
                  case "disableRemotePlayback":
                  case "formNoValidate":
                  case "hidden":
                  case "loop":
                  case "noModule":
                  case "noValidate":
                  case "open":
                  case "playsInline":
                  case "readOnly":
                  case "required":
                  case "reversed":
                  case "scoped":
                  case "seamless":
                  case "itemScope":
                  case "capture":
                  case "download": {
                    return true;
                  }
                  default: {
                    var prefix2 = name.toLowerCase().slice(0, 5);
                    if (prefix2 === "data-" || prefix2 === "aria-") {
                      return true;
                    }
                    if (value) {
                      error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                    } else {
                      error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                    }
                    warnedProperties[name] = true;
                    return true;
                  }
                }
              }
              case "function":
              case "symbol":
                warnedProperties[name] = true;
                return false;
              case "string": {
                if (value === "false" || value === "true") {
                  switch (name) {
                    case "checked":
                    case "selected":
                    case "multiple":
                    case "muted":
                    case "allowFullScreen":
                    case "async":
                    case "autoPlay":
                    case "controls":
                    case "default":
                    case "defer":
                    case "disabled":
                    case "disablePictureInPicture":
                    case "disableRemotePlayback":
                    case "formNoValidate":
                    case "hidden":
                    case "loop":
                    case "noModule":
                    case "noValidate":
                    case "open":
                    case "playsInline":
                    case "readOnly":
                    case "required":
                    case "reversed":
                    case "scoped":
                    case "seamless":
                    case "itemScope": {
                      break;
                    }
                    default: {
                      return true;
                    }
                  }
                  error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
        }
        function warnUnknownProperties(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props, eventRegistry) {
          if (isCustomElement(type) || typeof props.is === "string") {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        function camelize(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }
        function warnHyphenatedStyleName(name) {
          {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern$1, "ms-"))
            );
          }
        }
        function warnBadVendoredStyleName(name) {
          {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          }
        }
        function warnStyleValueWithSemicolon(name, value) {
          {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          }
        }
        function warnStyleValueIsNaN(name, value) {
          {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          }
        }
        function warnStyleValueIsInfinity(name, value) {
          {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          }
        }
        function warnValidStyle(name, value) {
          {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name);
              }
            }
          }
        }
        var matchHtmlRegExp = /["'&<>]/;
        function escapeHtml(string) {
          {
            checkHtmlStringCoercion(string);
          }
          var str = "" + string;
          var match = matchHtmlRegExp.exec(str);
          if (!match) {
            return str;
          }
          var escape;
          var html = "";
          var index;
          var lastIndex = 0;
          for (index = match.index; index < str.length; index++) {
            switch (str.charCodeAt(index)) {
              case 34:
                escape = "&quot;";
                break;
              case 38:
                escape = "&amp;";
                break;
              case 39:
                escape = "&#x27;";
                break;
              case 60:
                escape = "&lt;";
                break;
              case 62:
                escape = "&gt;";
                break;
              default:
                continue;
            }
            if (lastIndex !== index) {
              html += str.slice(lastIndex, index);
            }
            lastIndex = index + 1;
            html += escape;
          }
          return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
        }
        function escapeTextForBrowser(text) {
          if (typeof text === "boolean" || typeof text === "number") {
            return "" + text;
          }
          return escapeHtml(text);
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          var stringifiedURL = "" + url;
          {
            if (!didWarn && isJavaScriptProtocol.test(stringifiedURL)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(stringifiedURL));
            }
          }
          return url;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var clientRenderBoundary = '$RX=function(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};';
        var completeBoundary = '$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};';
        var completeBoundaryWithStyles = '$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};';
        var completeSegment = "$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};";
        var formReplaying = `addEventListener("submit",function(a){if(!a.defaultPrevented){var c=a.target,d=a.submitter,e=c.action,b=d;if(d){var f=d.getAttribute("formAction");null!=f&&(e=f,b=null)}"javascript:throw new Error('A React form was unexpectedly submitted.')"===e&&(a.preventDefault(),b?(a=document.createElement("input"),a.name=b.name,a.value=b.value,b.parentNode.insertBefore(a,b),b=new FormData(c),a.parentNode.removeChild(a)):b=new FormData(c),a=c.getRootNode(),(a.$$reactFormReplay=a.$$reactFormReplay||[]).push(c,
d,b))}});`;
        function getValueDescriptorExpectingObjectForWarning(thing) {
          return thing === null ? "`null`" : thing === void 0 ? "`undefined`" : thing === "" ? "an empty string" : 'something with type "' + typeof thing + '"';
        }
        function getValueDescriptorExpectingEnumForWarning(thing) {
          return thing === null ? "`null`" : thing === void 0 ? "`undefined`" : thing === "" ? "an empty string" : typeof thing === "string" ? JSON.stringify(thing) : 'something with type "' + typeof thing + '"';
        }
        function compareResourcePropsForWarning(newProps, currentProps) {
          {
            var propDiffs = null;
            var allProps = Array.from(new Set(Object.keys(currentProps).concat(Object.keys(newProps))));
            for (var i = 0; i < allProps.length; i++) {
              var propName = allProps[i];
              var newValue = newProps[propName];
              var currentValue = currentProps[propName];
              if (newValue !== currentValue && !(newValue == null && currentValue == null)) {
                if (newValue == null) {
                  if (propDiffs === null) {
                    propDiffs = {
                      missing: {},
                      extra: {},
                      different: {}
                    };
                  }
                  propDiffs.missing[propName] = currentValue;
                } else if (currentValue == null) {
                  if (propDiffs === null) {
                    propDiffs = {
                      missing: {},
                      extra: {},
                      different: {}
                    };
                  }
                  propDiffs.extra[propName] = newValue;
                } else {
                  if (propDiffs === null) {
                    propDiffs = {
                      missing: {},
                      extra: {},
                      different: {}
                    };
                  }
                  propDiffs.different[propName] = {
                    original: currentValue,
                    latest: newValue
                  };
                }
              }
            }
            return propDiffs;
          }
        }
        function describeDifferencesForStylesheets(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.missing) {
            var propValue = diff.missing[propName];
            if (propName === "media") {
              description += '\n  "' + propName + '" missing for props, original value: ' + getValueDescriptorExpectingEnumForWarning(propValue);
            }
          }
          for (var _propName in diff.extra) {
            var _propValue = diff.extra[_propName];
            description += '\n  "' + _propName + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(_propValue) + ", missing from original props";
          }
          for (var _propName2 in diff.different) {
            var latestValue = diff.different[_propName2].latest;
            var originalValue = diff.different[_propName2].original;
            description += '\n  "' + _propName2 + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", original value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
          }
          return description;
        }
        function describeDifferencesForStylesheetOverPreinit(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.extra) {
            var propValue = diff.extra[propName];
            if (propName === "precedence" || propName === "crossOrigin" || propName === "integrity") {
              description += '\n  "' + propName + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + ", option missing";
            } else {
              description += '\n  "' + propName + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + ", option not available with ReactDOM.preinit()";
            }
          }
          for (var _propName3 in diff.different) {
            var latestValue = diff.different[_propName3].latest;
            var originalValue = diff.different[_propName3].original;
            if (_propName3 === "precedence" && originalValue === "default") {
              description += '\n  "' + _propName3 + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", missing from options";
            } else {
              description += '\n  "' + _propName3 + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", option value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
            }
          }
          return description;
        }
        function describeDifferencesForPreinitOverStylesheet(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.missing) {
            var propValue = diff.missing[propName];
            if (propName === "precedence" && propValue !== "default") {
              description += '\n  "' + propName + '" missing from options, prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue);
            }
          }
          for (var _propName4 in diff.extra) {
            var _propValue2 = diff.extra[_propName4];
            if (_propName4 === "precedence" || _propName4 === "crossOrigin" || _propName4 === "integrity") {
              description += '\n  "' + _propName4 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(_propValue2) + ", missing from props";
            }
          }
          for (var _propName5 in diff.different) {
            var latestValue = diff.different[_propName5].latest;
            var originalValue = diff.different[_propName5].original;
            description += '\n  "' + _propName5 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", prop value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
          }
          return description;
        }
        function describeDifferencesForPreinits(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.missing) {
            var propValue = diff.missing[propName];
            if (propName === "precedence" && propValue !== "default") {
              description += '\n  "' + propName + '" missing from options, original option value: ' + getValueDescriptorExpectingEnumForWarning(propValue);
            }
          }
          for (var _propName6 in diff.extra) {
            var _propValue3 = diff.extra[_propName6];
            if (_propName6 === "precedence" && _propValue3 !== "default" || _propName6 === "crossOrigin" || _propName6 === "integrity") {
              description += '\n  "' + _propName6 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(_propValue3) + ", missing from original options";
            }
          }
          for (var _propName7 in diff.different) {
            var latestValue = diff.different[_propName7].latest;
            var originalValue = diff.different[_propName7].original;
            description += '\n  "' + _propName7 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", original option value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
          }
          return description;
        }
        var preloadOptionsForComparison = ["as", "crossOrigin", "integrity", "media"];
        function describeDifferencesForPreloads(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.missing) {
            var propValue = diff.missing[propName];
            if (preloadOptionsForComparison.includes(propName)) {
              description += '\n  "' + propName + '" missing from options, original option value: ' + getValueDescriptorExpectingEnumForWarning(propValue);
            }
          }
          for (var _propName8 in diff.extra) {
            var _propValue4 = diff.extra[_propName8];
            if (preloadOptionsForComparison.includes(_propName8)) {
              description += '\n  "' + _propName8 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(_propValue4) + ", missing from original options";
            }
          }
          for (var _propName9 in diff.different) {
            var latestValue = diff.different[_propName9].latest;
            var originalValue = diff.different[_propName9].original;
            if (preloadOptionsForComparison.includes(_propName9)) {
              description += '\n  "' + _propName9 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", original option value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
            }
          }
          return description;
        }
        function describeDifferencesForPreloadOverImplicitPreload(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.missing) {
            var propValue = diff.missing[propName];
            if (preloadOptionsForComparison.includes(propName)) {
              description += '\n  "' + propName + '" missing from options, underlying prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue);
            }
          }
          for (var _propName10 in diff.extra) {
            var _propValue5 = diff.extra[_propName10];
            if (preloadOptionsForComparison.includes(_propName10)) {
              description += '\n  "' + _propName10 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(_propValue5) + ", missing from underlying props";
            }
          }
          for (var _propName11 in diff.different) {
            var latestValue = diff.different[_propName11].latest;
            var originalValue = diff.different[_propName11].original;
            if (preloadOptionsForComparison.includes(_propName11)) {
              description += '\n  "' + _propName11 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", underlying prop value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
            }
          }
          return description;
        }
        function describeDifferencesForScripts(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.missing) {
            var propValue = diff.missing[propName];
            description += '\n  "' + propName + '" missing for props, original value: ' + getValueDescriptorExpectingEnumForWarning(propValue);
          }
          for (var _propName12 in diff.extra) {
            var _propValue6 = diff.extra[_propName12];
            description += '\n  "' + _propName12 + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(_propValue6) + ", missing from original props";
          }
          for (var _propName13 in diff.different) {
            var latestValue = diff.different[_propName13].latest;
            var originalValue = diff.different[_propName13].original;
            description += '\n  "' + _propName13 + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", original value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
          }
          return description;
        }
        function describeDifferencesForScriptOverPreinit(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.extra) {
            var propValue = diff.extra[propName];
            if (propName === "crossOrigin" || propName === "integrity") {
              description += '\n  "' + propName + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + ", option missing";
            } else {
              description += '\n  "' + propName + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + ", option not available with ReactDOM.preinit()";
            }
          }
          for (var _propName14 in diff.different) {
            var latestValue = diff.different[_propName14].latest;
            var originalValue = diff.different[_propName14].original;
            description += '\n  "' + _propName14 + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", option value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
          }
          return description;
        }
        function describeDifferencesForPreinitOverScript(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.extra) {
            var propValue = diff.extra[propName];
            if (propName === "crossOrigin" || propName === "integrity") {
              description += '\n  "' + propName + '" option value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + ", missing from props";
            }
          }
          for (var _propName15 in diff.different) {
            var latestValue = diff.different[_propName15].latest;
            var originalValue = diff.different[_propName15].original;
            description += '\n  "' + _propName15 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", prop value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
          }
          return description;
        }
        var sharedNotPendingObject = {
          pending: false,
          data: null,
          method: null,
          action: null
        };
        var NotPending = Object.freeze(sharedNotPendingObject);
        var ReactDOMSharedInternals = ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var ReactDOMCurrentDispatcher = ReactDOMSharedInternals.Dispatcher;
        var ReactDOMServerDispatcher = {
          prefetchDNS,
          preconnect,
          preload,
          preinit
        };
        function prepareHostDispatcher() {
          ReactDOMCurrentDispatcher.current = ReactDOMServerDispatcher;
        }
        var ScriptStreamingFormat = 0;
        var DataStreamingFormat = 1;
        var NothingSent = 0;
        var SentCompleteSegmentFunction = 1;
        var SentCompleteBoundaryFunction = 2;
        var SentClientRenderFunction = 4;
        var SentStyleInsertionFunction = 8;
        var SentFormReplayingRuntime = 16;
        var dataElementQuotedEnd = stringToPrecomputedChunk('"></template>');
        var startInlineScript = stringToPrecomputedChunk("<script>");
        var endInlineScript = stringToPrecomputedChunk("</script>");
        var startScriptSrc = stringToPrecomputedChunk('<script src="');
        var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
        var scriptNonce = stringToPrecomputedChunk('" nonce="');
        var scriptIntegirty = stringToPrecomputedChunk('" integrity="');
        var scriptCrossOrigin = stringToPrecomputedChunk('" crossorigin="');
        var endAsyncScript = stringToPrecomputedChunk('" async=""></script>');
        function escapeBootstrapScriptContent(scriptText) {
          {
            checkHtmlStringCoercion(scriptText);
          }
          return ("" + scriptText).replace(scriptRegex, scriptReplacer);
        }
        var scriptRegex = /(<\/|<)(s)(cript)/gi;
        var scriptReplacer = function(match, prefix2, s, suffix) {
          return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
        };
        function createResponseState$1(resources, identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules, externalRuntimeConfig) {
          var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
          var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
          var bootstrapChunks = [];
          var externalRuntimeScript = null;
          var streamingFormat = ScriptStreamingFormat;
          if (bootstrapScriptContent !== void 0) {
            bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript);
          }
          {
            if (externalRuntimeConfig !== void 0) {
              streamingFormat = DataStreamingFormat;
              if (typeof externalRuntimeConfig === "string") {
                externalRuntimeScript = {
                  src: externalRuntimeConfig,
                  chunks: []
                };
                pushScriptImpl(externalRuntimeScript.chunks, {
                  src: externalRuntimeConfig,
                  async: true,
                  integrity: void 0,
                  nonce
                });
              } else {
                externalRuntimeScript = {
                  src: externalRuntimeConfig.src,
                  chunks: []
                };
                pushScriptImpl(externalRuntimeScript.chunks, {
                  src: externalRuntimeConfig.src,
                  async: true,
                  integrity: externalRuntimeConfig.integrity,
                  nonce
                });
              }
            }
          }
          if (bootstrapScripts !== void 0) {
            for (var i = 0; i < bootstrapScripts.length; i++) {
              var scriptConfig = bootstrapScripts[i];
              var src = typeof scriptConfig === "string" ? scriptConfig : scriptConfig.src;
              var integrity = typeof scriptConfig === "string" ? void 0 : scriptConfig.integrity;
              var crossOrigin = typeof scriptConfig === "string" || scriptConfig.crossOrigin == null ? void 0 : scriptConfig.crossOrigin === "use-credentials" ? "use-credentials" : "";
              preloadBootstrapScript(resources, src, nonce, integrity, crossOrigin);
              bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(src)));
              if (nonce) {
                bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));
              }
              if (integrity) {
                bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(integrity)));
              }
              if (typeof crossOrigin === "string") {
                bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(crossOrigin)));
              }
              bootstrapChunks.push(endAsyncScript);
            }
          }
          if (bootstrapModules !== void 0) {
            for (var _i = 0; _i < bootstrapModules.length; _i++) {
              var _scriptConfig = bootstrapModules[_i];
              var _src = typeof _scriptConfig === "string" ? _scriptConfig : _scriptConfig.src;
              var _integrity = typeof _scriptConfig === "string" ? void 0 : _scriptConfig.integrity;
              var _crossOrigin = typeof _scriptConfig === "string" || _scriptConfig.crossOrigin == null ? void 0 : _scriptConfig.crossOrigin === "use-credentials" ? "use-credentials" : "";
              preloadBootstrapModule(resources, _src, nonce, _integrity, _crossOrigin);
              bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(_src)));
              if (nonce) {
                bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));
              }
              if (_integrity) {
                bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(_integrity)));
              }
              if (typeof _crossOrigin === "string") {
                bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(_crossOrigin)));
              }
              bootstrapChunks.push(endAsyncScript);
            }
          }
          return {
            bootstrapChunks,
            placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
            segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
            boundaryPrefix: idPrefix + "B:",
            idPrefix,
            nextSuspenseID: 0,
            streamingFormat,
            startInlineScript: inlineScriptWithNonce,
            instructions: NothingSent,
            externalRuntimeScript,
            htmlChunks: null,
            headChunks: null,
            hasBody: false,
            charsetChunks: [],
            preconnectChunks: [],
            preloadChunks: [],
            hoistableChunks: [],
            stylesToHoist: false,
            nonce
          };
        }
        var ROOT_HTML_MODE = 0;
        var HTML_HTML_MODE = 1;
        var HTML_MODE = 2;
        var SVG_MODE = 3;
        var MATHML_MODE = 4;
        var HTML_TABLE_MODE = 5;
        var HTML_TABLE_BODY_MODE = 6;
        var HTML_TABLE_ROW_MODE = 7;
        var HTML_COLGROUP_MODE = 8;
        function createFormatContext(insertionMode, selectedValue, noscriptTagInScope) {
          return {
            insertionMode,
            selectedValue,
            noscriptTagInScope
          };
        }
        function getChildFormatContext(parentContext, type, props) {
          switch (type) {
            case "noscript":
              return createFormatContext(HTML_MODE, null, true);
            case "select":
              return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue, parentContext.noscriptTagInScope);
            case "svg":
              return createFormatContext(SVG_MODE, null, parentContext.noscriptTagInScope);
            case "math":
              return createFormatContext(MATHML_MODE, null, parentContext.noscriptTagInScope);
            case "foreignObject":
              return createFormatContext(HTML_MODE, null, parentContext.noscriptTagInScope);
            case "table":
              return createFormatContext(HTML_TABLE_MODE, null, parentContext.noscriptTagInScope);
            case "thead":
            case "tbody":
            case "tfoot":
              return createFormatContext(HTML_TABLE_BODY_MODE, null, parentContext.noscriptTagInScope);
            case "colgroup":
              return createFormatContext(HTML_COLGROUP_MODE, null, parentContext.noscriptTagInScope);
            case "tr":
              return createFormatContext(HTML_TABLE_ROW_MODE, null, parentContext.noscriptTagInScope);
          }
          if (parentContext.insertionMode >= HTML_TABLE_MODE) {
            return createFormatContext(HTML_MODE, null, parentContext.noscriptTagInScope);
          }
          if (parentContext.insertionMode === ROOT_HTML_MODE) {
            if (type === "html") {
              return createFormatContext(HTML_HTML_MODE, null, false);
            } else {
              return createFormatContext(HTML_MODE, null, false);
            }
          } else if (parentContext.insertionMode === HTML_HTML_MODE) {
            return createFormatContext(HTML_MODE, null, false);
          }
          return parentContext;
        }
        var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
        function assignSuspenseBoundaryID(responseState) {
          var generatedID = responseState.nextSuspenseID++;
          return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
        }
        function makeId(responseState, treeId, localId) {
          var idPrefix = responseState.idPrefix;
          var id = ":" + idPrefix + "R" + treeId;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          return id + ":";
        }
        function encodeHTMLTextNode(text) {
          return escapeTextForBrowser(text);
        }
        var textSeparator = stringToPrecomputedChunk("<!-- -->");
        function pushTextInstance$1(target, text, responseState, textEmbedded) {
          if (text === "") {
            return textEmbedded;
          }
          if (textEmbedded) {
            target.push(textSeparator);
          }
          target.push(stringToChunk(encodeHTMLTextNode(text)));
          return true;
        }
        function pushSegmentFinale$1(target, responseState, lastPushedText, textEmbedded) {
          if (lastPushedText && textEmbedded) {
            target.push(textSeparator);
          }
        }
        var styleNameCache = /* @__PURE__ */ new Map();
        function processStyleName(styleName) {
          var chunk = styleNameCache.get(styleName);
          if (chunk !== void 0) {
            return chunk;
          }
          var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
          styleNameCache.set(styleName, result);
          return result;
        }
        var styleAttributeStart = stringToPrecomputedChunk(' style="');
        var styleAssign = stringToPrecomputedChunk(":");
        var styleSeparator = stringToPrecomputedChunk(";");
        function pushStyleAttribute(target, style) {
          if (typeof style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
          var isFirst = true;
          for (var styleName in style) {
            if (!hasOwnProperty.call(style, styleName)) {
              continue;
            }
            var styleValue = style[styleName];
            if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
              continue;
            }
            var nameChunk = void 0;
            var valueChunk = void 0;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (isCustomProperty) {
              nameChunk = stringToChunk(escapeTextForBrowser(styleName));
              {
                checkCSSPropertyStringCoercion(styleValue, styleName);
              }
              valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
            } else {
              {
                warnValidStyle(styleName, styleValue);
              }
              nameChunk = processStyleName(styleName);
              if (typeof styleValue === "number") {
                if (styleValue !== 0 && !isUnitlessNumber(styleName)) {
                  valueChunk = stringToChunk(styleValue + "px");
                } else {
                  valueChunk = stringToChunk("" + styleValue);
                }
              } else {
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              }
            }
            if (isFirst) {
              isFirst = false;
              target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
            } else {
              target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
          if (!isFirst) {
            target.push(attributeEnd);
          }
        }
        var attributeSeparator = stringToPrecomputedChunk(" ");
        var attributeAssign = stringToPrecomputedChunk('="');
        var attributeEnd = stringToPrecomputedChunk('"');
        var attributeEmptyString = stringToPrecomputedChunk('=""');
        function pushBooleanAttribute(target, name, value) {
          if (value && typeof value !== "function" && typeof value !== "symbol") {
            target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
          }
        }
        function pushStringAttribute(target, name, value) {
          if (typeof value !== "function" && typeof value !== "symbol" && typeof value !== "boolean") {
            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
          }
        }
        function makeFormFieldPrefix(responseState) {
          var id = responseState.nextSuspenseID++;
          return responseState.idPrefix + id;
        }
        var actionJavaScriptURL = stringToPrecomputedChunk(escapeTextForBrowser(
          // eslint-disable-next-line no-script-url
          "javascript:throw new Error('A React form was unexpectedly submitted.')"
        ));
        var startHiddenInputChunk = stringToPrecomputedChunk('<input type="hidden"');
        function pushAdditionalFormField(value, key) {
          var target = this;
          target.push(startHiddenInputChunk);
          if (typeof value !== "string") {
            throw new Error("File/Blob fields are not yet supported in progressive forms. It probably means you are closing over binary data or FormData in a Server Action.");
          }
          pushStringAttribute(target, "name", key);
          pushStringAttribute(target, "value", value);
          target.push(endOfStartTagSelfClosing);
        }
        function pushAdditionalFormFields(target, formData) {
          if (formData !== null) {
            formData.forEach(pushAdditionalFormField, target);
          }
        }
        function pushFormActionAttribute(target, responseState, formAction, formEncType, formMethod, formTarget, name) {
          var formData = null;
          if (typeof formAction === "function") {
            {
              if (name !== null && !didWarnFormActionName) {
                didWarnFormActionName = true;
                error('Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.');
              }
              if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {
                didWarnFormActionMethod = true;
                error("Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden.");
              }
              if (formTarget !== null && !didWarnFormActionTarget) {
                didWarnFormActionTarget = true;
                error("Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window.");
              }
            }
            var customAction = formAction.$$FORM_ACTION;
            if (typeof customAction === "function") {
              var prefix2 = makeFormFieldPrefix(responseState);
              var customFields = formAction.$$FORM_ACTION(prefix2);
              name = customFields.name;
              formAction = customFields.action || "";
              formEncType = customFields.encType;
              formMethod = customFields.method;
              formTarget = customFields.target;
              formData = customFields.data;
            } else {
              target.push(attributeSeparator, stringToChunk("formAction"), attributeAssign, actionJavaScriptURL, attributeEnd);
              name = null;
              formAction = null;
              formEncType = null;
              formMethod = null;
              formTarget = null;
              injectFormReplayingRuntime(responseState);
            }
          }
          if (name != null) {
            pushAttribute(target, "name", name);
          }
          if (formAction != null) {
            pushAttribute(target, "formAction", formAction);
          }
          if (formEncType != null) {
            pushAttribute(target, "formEncType", formEncType);
          }
          if (formMethod != null) {
            pushAttribute(target, "formMethod", formMethod);
          }
          if (formTarget != null) {
            pushAttribute(target, "formTarget", formTarget);
          }
          return formData;
        }
        function pushAttribute(target, name, value) {
          switch (name) {
            case "className": {
              pushStringAttribute(target, "class", value);
              break;
            }
            case "tabIndex": {
              pushStringAttribute(target, "tabindex", value);
              break;
            }
            case "dir":
            case "role":
            case "viewBox":
            case "width":
            case "height": {
              pushStringAttribute(target, name, value);
              break;
            }
            case "style": {
              pushStyleAttribute(target, value);
              return;
            }
            case "src":
            case "href": {
              {
                if (value === "") {
                  {
                    if (name === "src") {
                      error('An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', name, name);
                    } else {
                      error('An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', name, name);
                    }
                  }
                  return;
                }
              }
            }
            case "action":
            case "formAction": {
              if (value == null || typeof value === "function" || typeof value === "symbol" || typeof value === "boolean") {
                return;
              }
              {
                checkAttributeStringCoercion(value, name);
              }
              var sanitizedValue = sanitizeURL("" + value);
              target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(sanitizedValue)), attributeEnd);
              return;
            }
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
              return;
            case "autoFocus":
            case "multiple":
            case "muted": {
              pushBooleanAttribute(target, name.toLowerCase(), value);
              return;
            }
            case "xlinkHref": {
              if (typeof value === "function" || typeof value === "symbol" || typeof value === "boolean") {
                return;
              }
              {
                checkAttributeStringCoercion(value, name);
              }
              var _sanitizedValue = sanitizeURL("" + value);
              target.push(attributeSeparator, stringToChunk("xlink:href"), attributeAssign, stringToChunk(escapeTextForBrowser(_sanitizedValue)), attributeEnd);
              return;
            }
            case "contentEditable":
            case "spellCheck":
            case "draggable":
            case "value":
            case "autoReverse":
            case "externalResourcesRequired":
            case "focusable":
            case "preserveAlpha": {
              if (typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "allowFullScreen":
            case "async":
            case "autoPlay":
            case "controls":
            case "default":
            case "defer":
            case "disabled":
            case "disablePictureInPicture":
            case "disableRemotePlayback":
            case "formNoValidate":
            case "hidden":
            case "loop":
            case "noModule":
            case "noValidate":
            case "open":
            case "playsInline":
            case "readOnly":
            case "required":
            case "reversed":
            case "scoped":
            case "seamless":
            case "itemScope": {
              if (value && typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
              }
              return;
            }
            case "capture":
            case "download": {
              if (value === true) {
                target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
              } else if (value === false)
                ;
              else if (typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "cols":
            case "rows":
            case "size":
            case "span": {
              if (typeof value !== "function" && typeof value !== "symbol" && !isNaN(value) && value >= 1) {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "rowSpan":
            case "start": {
              if (typeof value !== "function" && typeof value !== "symbol" && !isNaN(value)) {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "xlinkActuate":
              pushStringAttribute(target, "xlink:actuate", value);
              return;
            case "xlinkArcrole":
              pushStringAttribute(target, "xlink:arcrole", value);
              return;
            case "xlinkRole":
              pushStringAttribute(target, "xlink:role", value);
              return;
            case "xlinkShow":
              pushStringAttribute(target, "xlink:show", value);
              return;
            case "xlinkTitle":
              pushStringAttribute(target, "xlink:title", value);
              return;
            case "xlinkType":
              pushStringAttribute(target, "xlink:type", value);
              return;
            case "xmlBase":
              pushStringAttribute(target, "xml:base", value);
              return;
            case "xmlLang":
              pushStringAttribute(target, "xml:lang", value);
              return;
            case "xmlSpace":
              pushStringAttribute(target, "xml:space", value);
              return;
            default:
              if (
                // shouldIgnoreAttribute
                // We have already filtered out null/undefined and reserved words.
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              var attributeName = getAttributeAlias(name);
              if (isAttributeNameSafe(attributeName)) {
                switch (typeof value) {
                  case "function":
                  case "symbol":
                    return;
                  case "boolean": {
                    var prefix2 = attributeName.toLowerCase().slice(0, 5);
                    if (prefix2 !== "data-" && prefix2 !== "aria-") {
                      return;
                    }
                  }
                }
                target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
          }
        }
        var endOfStartTag = stringToPrecomputedChunk(">");
        var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
        function pushInnerHTML(target, innerHTML, children) {
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              {
                checkHtmlStringCoercion(html);
              }
              target.push(stringToChunk("" + html));
            }
          }
        }
        var didWarnDefaultInputValue = false;
        var didWarnDefaultChecked = false;
        var didWarnDefaultSelectValue = false;
        var didWarnDefaultTextareaValue = false;
        var didWarnInvalidOptionChildren = false;
        var didWarnInvalidOptionInnerHTML = false;
        var didWarnSelectedSetOnOption = false;
        var didWarnFormActionType = false;
        var didWarnFormActionName = false;
        var didWarnFormActionTarget = false;
        var didWarnFormActionMethod = false;
        function checkSelectProp(props, propName) {
          {
            var value = props[propName];
            if (value != null) {
              var array = isArray(value);
              if (props.multiple && !array) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
              } else if (!props.multiple && array) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
              }
            }
          }
        }
        function pushStartSelect(target, props) {
          {
            checkControlledValueProps("select", props);
            checkSelectProp(props, "value");
            checkSelectProp(props, "defaultValue");
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultSelectValue = true;
            }
          }
          target.push(startChunkForTag("select"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "defaultValue":
                case "value":
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function flattenOptionChildren(children) {
          var content = "";
          React.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
            {
              if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number") {
                didWarnInvalidOptionChildren = true;
                error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            }
          });
          return content;
        }
        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
        function pushStartOption(target, props, formatContext) {
          var selectedValue = formatContext.selectedValue;
          target.push(startChunkForTag("option"));
          var children = null;
          var value = null;
          var selected = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "selected":
                  selected = propValue;
                  {
                    if (!didWarnSelectedSetOnOption) {
                      error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                      didWarnSelectedSetOnOption = true;
                    }
                  }
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "value":
                  value = propValue;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          if (selectedValue != null) {
            var stringValue;
            if (value !== null) {
              {
                checkAttributeStringCoercion(value, "value");
              }
              stringValue = "" + value;
            } else {
              {
                if (innerHTML !== null) {
                  if (!didWarnInvalidOptionInnerHTML) {
                    didWarnInvalidOptionInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              stringValue = flattenOptionChildren(children);
            }
            if (isArray(selectedValue)) {
              for (var i = 0; i < selectedValue.length; i++) {
                {
                  checkAttributeStringCoercion(selectedValue[i], "value");
                }
                var v = "" + selectedValue[i];
                if (v === stringValue) {
                  target.push(selectedMarkerAttribute);
                  break;
                }
              }
            } else {
              {
                checkAttributeStringCoercion(selectedValue, "select.value");
              }
              if ("" + selectedValue === stringValue) {
                target.push(selectedMarkerAttribute);
              }
            }
          } else if (selected) {
            target.push(selectedMarkerAttribute);
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var formReplayingRuntimeScript = stringToPrecomputedChunk(formReplaying);
        function injectFormReplayingRuntime(responseState) {
          if ((responseState.instructions & SentFormReplayingRuntime) === NothingSent && !responseState.externalRuntimeScript) {
            responseState.instructions |= SentFormReplayingRuntime;
            responseState.bootstrapChunks.unshift(responseState.startInlineScript, formReplayingRuntimeScript, endInlineScript);
          }
        }
        function pushStartForm(target, props, responseState) {
          target.push(startChunkForTag("form"));
          var children = null;
          var innerHTML = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "action":
                  formAction = propValue;
                  break;
                case "encType":
                  formEncType = propValue;
                  break;
                case "method":
                  formMethod = propValue;
                  break;
                case "target":
                  formTarget = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          var formData = null;
          var formActionName = null;
          if (typeof formAction === "function") {
            {
              if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {
                didWarnFormActionMethod = true;
                error("Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden.");
              }
              if (formTarget !== null && !didWarnFormActionTarget) {
                didWarnFormActionTarget = true;
                error("Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window.");
              }
            }
            var customAction = formAction.$$FORM_ACTION;
            if (typeof customAction === "function") {
              var prefix2 = makeFormFieldPrefix(responseState);
              var customFields = formAction.$$FORM_ACTION(prefix2);
              formAction = customFields.action || "";
              formEncType = customFields.encType;
              formMethod = customFields.method;
              formTarget = customFields.target;
              formData = customFields.data;
              formActionName = customFields.name;
            } else {
              target.push(attributeSeparator, stringToChunk("action"), attributeAssign, actionJavaScriptURL, attributeEnd);
              formAction = null;
              formEncType = null;
              formMethod = null;
              formTarget = null;
              injectFormReplayingRuntime(responseState);
            }
          }
          if (formAction != null) {
            pushAttribute(target, "action", formAction);
          }
          if (formEncType != null) {
            pushAttribute(target, "encType", formEncType);
          }
          if (formMethod != null) {
            pushAttribute(target, "method", formMethod);
          }
          if (formTarget != null) {
            pushAttribute(target, "target", formTarget);
          }
          target.push(endOfStartTag);
          if (formActionName !== null) {
            target.push(startHiddenInputChunk);
            pushStringAttribute(target, "name", formActionName);
            target.push(endOfStartTagSelfClosing);
            pushAdditionalFormFields(target, formData);
          }
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushInput(target, props, responseState) {
          {
            checkControlledValueProps("input", props);
          }
          target.push(startChunkForTag("input"));
          var name = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          var value = null;
          var defaultValue = null;
          var checked = null;
          var defaultChecked = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "name":
                  name = propValue;
                  break;
                case "formAction":
                  formAction = propValue;
                  break;
                case "formEncType":
                  formEncType = propValue;
                  break;
                case "formMethod":
                  formMethod = propValue;
                  break;
                case "formTarget":
                  formTarget = propValue;
                  break;
                case "defaultChecked":
                  defaultChecked = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "checked":
                  checked = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          {
            if (formAction !== null && props.type !== "image" && props.type !== "submit" && !didWarnFormActionType) {
              didWarnFormActionType = true;
              error('An input can only specify a formAction along with type="submit" or type="image".');
            }
          }
          var formData = pushFormActionAttribute(target, responseState, formAction, formEncType, formMethod, formTarget, name);
          {
            if (checked !== null && defaultChecked !== null && !didWarnDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultChecked = true;
            }
            if (value !== null && defaultValue !== null && !didWarnDefaultInputValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultInputValue = true;
            }
          }
          if (checked !== null) {
            pushBooleanAttribute(target, "checked", checked);
          } else if (defaultChecked !== null) {
            pushBooleanAttribute(target, "checked", defaultChecked);
          }
          if (value !== null) {
            pushAttribute(target, "value", value);
          } else if (defaultValue !== null) {
            pushAttribute(target, "value", defaultValue);
          }
          target.push(endOfStartTagSelfClosing);
          pushAdditionalFormFields(target, formData);
          return null;
        }
        function pushStartButton(target, props, responseState) {
          target.push(startChunkForTag("button"));
          var children = null;
          var innerHTML = null;
          var name = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "name":
                  name = propValue;
                  break;
                case "formAction":
                  formAction = propValue;
                  break;
                case "formEncType":
                  formEncType = propValue;
                  break;
                case "formMethod":
                  formMethod = propValue;
                  break;
                case "formTarget":
                  formTarget = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          {
            if (formAction !== null && props.type != null && props.type !== "submit" && !didWarnFormActionType) {
              didWarnFormActionType = true;
              error('A button can only specify a formAction along with type="submit" or no type.');
            }
          }
          var formData = pushFormActionAttribute(target, responseState, formAction, formEncType, formMethod, formTarget, name);
          target.push(endOfStartTag);
          pushAdditionalFormFields(target, formData);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartTextArea(target, props) {
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
              error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultTextareaValue = true;
            }
          }
          target.push(startChunkForTag("textarea"));
          var value = null;
          var defaultValue = null;
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          if (value === null && defaultValue !== null) {
            value = defaultValue;
          }
          target.push(endOfStartTag);
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            if (value != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray(children)) {
              if (children.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              {
                checkHtmlStringCoercion(children[0]);
              }
              value = "" + children[0];
            }
            {
              checkHtmlStringCoercion(children);
            }
            value = "" + children;
          }
          if (typeof value === "string" && value[0] === "\n") {
            target.push(leadingNewline);
          }
          if (value !== null) {
            {
              checkAttributeStringCoercion(value, "value");
            }
            target.push(stringToChunk(encodeHTMLTextNode("" + value)));
          }
          return null;
        }
        function pushMeta(target, props, responseState, textEmbedded, insertionMode, noscriptTagInScope) {
          {
            if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {
              return pushSelfClosing(target, props, "meta");
            } else {
              if (textEmbedded) {
                target.push(textSeparator);
              }
              if (typeof props.charSet === "string") {
                return pushSelfClosing(responseState.charsetChunks, props, "meta");
              } else {
                return pushSelfClosing(responseState.hoistableChunks, props, "meta");
              }
            }
          }
        }
        function pushLink(target, props, responseState, resources, textEmbedded, insertionMode, noscriptTagInScope) {
          {
            var rel = props.rel;
            var href = props.href;
            var precedence = props.precedence;
            if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof rel !== "string" || typeof href !== "string" || href === "") {
              {
                if (rel === "stylesheet" && typeof props.precedence === "string") {
                  if (typeof href !== "string" || !href) {
                    error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and expected the `href` prop to be a non-empty string but ecountered %s instead. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop ensure there is a non-empty string `href` prop as well, otherwise remove the `precedence` prop.', getValueDescriptorExpectingObjectForWarning(href));
                  }
                }
              }
              pushLinkImpl(target, props);
              return null;
            }
            if (props.rel === "stylesheet") {
              var key = getResourceKey("style", href);
              if (typeof precedence !== "string" || props.disabled != null || props.onLoad || props.onError) {
                {
                  if (typeof precedence === "string") {
                    if (props.disabled != null) {
                      error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and a `disabled` prop. The presence of the `disabled` prop indicates an intent to manage the stylesheet active state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the `disabled` prop, otherwise remove the `precedence` prop.');
                    } else if (props.onLoad || props.onError) {
                      var propDescription = props.onLoad && props.onError ? "`onLoad` and `onError` props" : props.onLoad ? "`onLoad` prop" : "`onError` prop";
                      error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.', propDescription, propDescription);
                    }
                  }
                }
                return pushLinkImpl(target, props);
              } else {
                var resource = resources.stylesMap.get(key);
                {
                  var devResource = getAsResourceDEV(resource);
                  if (devResource) {
                    switch (devResource.__provenance) {
                      case "rendered": {
                        var differenceDescription = describeDifferencesForStylesheets(
                          // Diff the props from the JSX element, not the derived resource props
                          props,
                          devResource.__originalProps
                        );
                        if (differenceDescription) {
                          error('React encountered a <link rel="stylesheet" href="%s" .../> with a `precedence` prop that has props that conflict with another hoistable stylesheet with the same `href`. When using `precedence` with <link rel="stylsheet" .../> the props from the first encountered instance will be used and props from later instances will be ignored. Update the props on either <link rel="stylesheet" .../> instance so they agree.%s', href, differenceDescription);
                        }
                        break;
                      }
                      case "preinit": {
                        var _differenceDescription = describeDifferencesForStylesheetOverPreinit(
                          // Diff the props from the JSX element, not the derived resource props
                          props,
                          devResource.__propsEquivalent
                        );
                        if (_differenceDescription) {
                          error('React encountered a <link rel="stylesheet" precedence="%s" href="%s" .../> with props that conflict with the options provided to `ReactDOM.preinit("%s", { as: "style", ... })`. React will use the first props or preinitialization options encountered when rendering a hoistable stylesheet with a particular `href` and will ignore any newer props or options. The first instance of this stylesheet resource was created using the `ReactDOM.preinit()` function. Please note, `ReactDOM.preinit()` is modeled off of module import assertions capabilities and does not support arbitrary props. If you need to have props not included with the preinit options you will need to rely on rendering <link> tags only.%s', precedence, href, href, _differenceDescription);
                        }
                        break;
                      }
                    }
                  }
                }
                if (!resource) {
                  var resourceProps = stylesheetPropsFromRawProps(props);
                  var preloadResource = resources.preloadsMap.get(key);
                  var state = NoState;
                  if (preloadResource) {
                    preloadResource.state |= Blocked;
                    adoptPreloadPropsForStylesheetProps(resourceProps, preloadResource.props);
                    if (preloadResource.state & Flushed) {
                      state = PreloadFlushed;
                    }
                  }
                  resource = {
                    type: "stylesheet",
                    chunks: [],
                    state,
                    props: resourceProps
                  };
                  resources.stylesMap.set(key, resource);
                  {
                    markAsRenderedResourceDEV(resource, props);
                  }
                  var precedenceSet = resources.precedences.get(precedence);
                  if (!precedenceSet) {
                    precedenceSet = /* @__PURE__ */ new Set();
                    resources.precedences.set(precedence, precedenceSet);
                    var emptyStyleResource = {
                      type: "style",
                      chunks: [],
                      state: NoState,
                      props: {
                        precedence,
                        hrefs: []
                      }
                    };
                    precedenceSet.add(emptyStyleResource);
                    {
                      if (resources.stylePrecedences.has(precedence)) {
                        error('React constructed an empty style resource when a style resource already exists for this precedence: "%s". This is a bug in React.', precedence);
                      }
                    }
                    resources.stylePrecedences.set(precedence, emptyStyleResource);
                  }
                  precedenceSet.add(resource);
                }
                if (resources.boundaryResources) {
                  resources.boundaryResources.add(resource);
                }
                if (textEmbedded) {
                  target.push(textSeparator);
                }
                return null;
              }
            } else if (props.onLoad || props.onError) {
              return pushLinkImpl(target, props);
            } else {
              if (textEmbedded) {
                target.push(textSeparator);
              }
              switch (props.rel) {
                case "preconnect":
                case "dns-prefetch":
                  return pushLinkImpl(responseState.preconnectChunks, props);
                case "preload":
                  return pushLinkImpl(responseState.preloadChunks, props);
                default:
                  return pushLinkImpl(responseState.hoistableChunks, props);
              }
            }
          }
        }
        function pushLinkImpl(target, props) {
          target.push(startChunkForTag("link"));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStyle(target, props, resources, textEmbedded, insertionMode, noscriptTagInScope) {
          {
            if (hasOwnProperty.call(props, "children")) {
              var children = props.children;
              var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
              if (typeof child === "function" || typeof child === "symbol" || Array.isArray(child)) {
                var childType = typeof child === "function" ? "a Function" : typeof child === "symbol" ? "a Sybmol" : "an Array";
                error("React expect children of <style> tags to be a string, number, or object with a `toString` method but found %s instead. In browsers style Elements can only have `Text` Nodes as children.", childType);
              }
            }
          }
          {
            var precedence = props.precedence;
            var href = props.href;
            if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof precedence !== "string" || typeof href !== "string" || href === "") {
              return pushStyleImpl(target, props);
            }
            {
              if (href.includes(" ")) {
                error('React expected the `href` prop for a <style> tag opting into hoisting semantics using the `precedence` prop to not have any spaces but ecountered spaces instead. using spaces in this prop will cause hydration of this style to fail on the client. The href for the <style> where this ocurred is "%s".', href);
              }
            }
            var key = getResourceKey("style", href);
            var resource = resources.stylesMap.get(key);
            if (!resource) {
              resource = resources.stylePrecedences.get(precedence);
              if (!resource) {
                resource = {
                  type: "style",
                  chunks: [],
                  state: NoState,
                  props: {
                    precedence,
                    hrefs: [href]
                  }
                };
                resources.stylePrecedences.set(precedence, resource);
                var precedenceSet = /* @__PURE__ */ new Set();
                precedenceSet.add(resource);
                {
                  if (resources.precedences.has(precedence)) {
                    error('React constructed a new style precedence set when one already exists for this precedence: "%s". This is a bug in React.', precedence);
                  }
                }
                resources.precedences.set(precedence, precedenceSet);
              } else {
                resource.props.hrefs.push(href);
              }
              resources.stylesMap.set(key, resource);
              if (resources.boundaryResources) {
                resources.boundaryResources.add(resource);
              }
              pushStyleContents(resource.chunks, props);
            }
            if (textEmbedded) {
              target.push(textSeparator);
            }
          }
        }
        function pushStyleImpl(target, props) {
          target.push(startChunkForTag("style"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeTextForBrowser("" + child)));
          }
          pushInnerHTML(target, innerHTML, children);
          target.push(endTag1, stringToChunk("style"), endTag2);
          return null;
        }
        function pushStyleContents(target, props) {
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
              }
            }
          }
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeTextForBrowser("" + child)));
          }
          pushInnerHTML(target, innerHTML, children);
          return;
        }
        function pushSelfClosing(target, props, tag) {
          target.push(startChunkForTag(tag));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartMenuItem(target, props) {
          target.push(startChunkForTag("menuitem"));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          return null;
        }
        function pushTitle(target, props, responseState, insertionMode, noscriptTagInScope) {
          {
            if (hasOwnProperty.call(props, "children")) {
              var children = props.children;
              var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
              if (Array.isArray(children) && children.length > 1) {
                error("React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an Array with length %s instead. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert `children` of <title> tags to a single string value which is why Arrays of length greater than 1 are not supported. When using JSX it can be commong to combine text nodes and value nodes. For example: <title>hello {nameOfUser}</title>. While not immediately apparent, `children` in this case is an Array with length 2. If your `children` prop is using this form try rewriting it using a template string: <title>{`hello ${nameOfUser}`}</title>.", children.length);
              } else if (typeof child === "function" || typeof child === "symbol") {
                var childType = typeof child === "function" ? "a Function" : "a Sybmol";
                error("React expect children of <title> tags to be a string, number, or object with a novel `toString` method but found %s instead. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value.", childType);
              } else if (child && child.toString === {}.toString) {
                if (child.$$typeof != null) {
                  error("React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an object that appears to be a React element which never implements a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value which is why rendering React elements is not supported. If the `children` of <title> is a React Component try moving the <title> tag into that component. If the `children` of <title> is some HTML markup change it to be Text only to be valid HTML.");
                } else {
                  error("React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an object that does not implement a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value. Using the default `toString` method available on every object is almost certainly an error. Consider whether the `children` of this <title> is an object in error and change it to a string or number value if so. Otherwise implement a `toString` method that React can use to produce a valid <title>.");
                }
              }
            }
          }
          {
            if (insertionMode !== SVG_MODE && !noscriptTagInScope && props.itemProp == null) {
              pushTitleImpl(responseState.hoistableChunks, props);
              return null;
            } else {
              return pushTitleImpl(target, props);
            }
          }
        }
        function pushTitleImpl(target, props) {
          target.push(startChunkForTag("title"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeTextForBrowser("" + child)));
          }
          pushInnerHTML(target, innerHTML, children);
          target.push(endTag1, stringToChunk("title"), endTag2);
          return null;
        }
        function pushStartHead(target, props, responseState, insertionMode) {
          {
            if (insertionMode < HTML_MODE && responseState.headChunks === null) {
              responseState.headChunks = [];
              return pushStartGenericElement(responseState.headChunks, props, "head");
            } else {
              return pushStartGenericElement(target, props, "head");
            }
          }
        }
        function pushStartHtml(target, props, responseState, insertionMode) {
          {
            if (insertionMode === ROOT_HTML_MODE && responseState.htmlChunks === null) {
              responseState.htmlChunks = [DOCTYPE];
              return pushStartGenericElement(responseState.htmlChunks, props, "html");
            } else {
              return pushStartGenericElement(target, props, "html");
            }
          }
        }
        function pushScript(target, props, resources, textEmbedded, insertionMode, noscriptTagInScope) {
          {
            var asyncProp = props.async;
            if (typeof props.src !== "string" || !props.src || !(asyncProp && typeof asyncProp !== "function" && typeof asyncProp !== "symbol") || props.onLoad || props.onError || insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {
              return pushScriptImpl(target, props);
            }
            var src = props.src;
            var key = getResourceKey("script", src);
            var resource = resources.scriptsMap.get(key);
            {
              var devResource = getAsResourceDEV(resource);
              if (devResource) {
                switch (devResource.__provenance) {
                  case "rendered": {
                    var differenceDescription = describeDifferencesForScripts(
                      // Diff the props from the JSX element, not the derived resource props
                      props,
                      devResource.__originalProps
                    );
                    if (differenceDescription) {
                      error('React encountered a <script async={true} src="%s" .../> that has props that conflict with another hoistable script with the same `src`. When rendering hoistable scripts (async scripts without any loading handlers) the props from the first encountered instance will be used and props from later instances will be ignored. Update the props on both <script async={true} .../> instance so they agree.%s', src, differenceDescription);
                    }
                    break;
                  }
                  case "preinit": {
                    var _differenceDescription2 = describeDifferencesForScriptOverPreinit(
                      // Diff the props from the JSX element, not the derived resource props
                      props,
                      devResource.__propsEquivalent
                    );
                    if (_differenceDescription2) {
                      error('React encountered a <script async={true} src="%s" .../> with props that conflict with the options provided to `ReactDOM.preinit("%s", { as: "script", ... })`. React will use the first props or preinitialization options encountered when rendering a hoistable script with a particular `src` and will ignore any newer props or options. The first instance of this script resource was created using the `ReactDOM.preinit()` function. Please note, `ReactDOM.preinit()` is modeled off of module import assertions capabilities and does not support arbitrary props. If you need to have props not included with the preinit options you will need to rely on rendering <script> tags only.%s', src, src, _differenceDescription2);
                    }
                    break;
                  }
                }
              }
            }
            if (!resource) {
              resource = {
                type: "script",
                chunks: [],
                state: NoState,
                props: null
              };
              resources.scriptsMap.set(key, resource);
              {
                markAsRenderedResourceDEV(resource, props);
              }
              resources.scripts.add(resource);
              var scriptProps = props;
              var preloadResource = resources.preloadsMap.get(key);
              if (preloadResource) {
                preloadResource.state |= Blocked;
                scriptProps = assign({}, props);
                adoptPreloadPropsForScriptProps(scriptProps, preloadResource.props);
              }
              pushScriptImpl(resource.chunks, scriptProps);
            }
            if (textEmbedded) {
              target.push(textSeparator);
            }
            return null;
          }
        }
        function pushScriptImpl(target, props) {
          target.push(startChunkForTag("script"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          {
            if (children != null && typeof children !== "string") {
              var descriptiveStatement = typeof children === "number" ? "a number for children" : Array.isArray(children) ? "an array for children" : "something unexpected for children";
              error("A script element was rendered with %s. If script element has children it must be a single string. Consider using dangerouslySetInnerHTML or passing a plain string as children.", descriptiveStatement);
            }
          }
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
          }
          target.push(endTag1, stringToChunk("script"), endTag2);
          return null;
        }
        function pushStartGenericElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartCustomElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              if (typeof propValue === "function" || typeof propValue === "object") {
                continue;
              }
              if (propValue === false) {
                continue;
              }
              if (propValue === true) {
                propValue = "";
              }
              if (propKey === "className") {
                propKey = "class";
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "style":
                  pushStyleAttribute(target, propValue);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                  break;
                default:
                  if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                    target.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                  }
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var leadingNewline = stringToPrecomputedChunk("\n");
        function pushStartPreformattedElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              if (typeof html === "string" && html.length > 0 && html[0] === "\n") {
                target.push(leadingNewline, stringToChunk(html));
              } else {
                {
                  checkHtmlStringCoercion(html);
                }
                target.push(stringToChunk("" + html));
              }
            }
          }
          if (typeof children === "string" && children[0] === "\n") {
            target.push(leadingNewline);
          }
          return children;
        }
        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
        var validatedTagCache = /* @__PURE__ */ new Map();
        function startChunkForTag(tag) {
          var tagStartChunk = validatedTagCache.get(tag);
          if (tagStartChunk === void 0) {
            if (!VALID_TAG_REGEX.test(tag)) {
              throw new Error("Invalid tag: " + tag);
            }
            tagStartChunk = stringToPrecomputedChunk("<" + tag);
            validatedTagCache.set(tag, tagStartChunk);
          }
          return tagStartChunk;
        }
        var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
        function pushStartInstance(target, type, props, resources, responseState, formatContext, textEmbedded) {
          {
            validateProperties$2(type, props);
            validateProperties$1(type, props);
            validateProperties(type, props, null);
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
            if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
              if (type.indexOf("-") === -1 && type.toLowerCase() !== type) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
          }
          switch (type) {
            case "div":
            case "span":
            case "svg":
            case "path":
            case "a":
            case "g":
            case "p":
            case "li":
              break;
            case "select":
              return pushStartSelect(target, props);
            case "option":
              return pushStartOption(target, props, formatContext);
            case "textarea":
              return pushStartTextArea(target, props);
            case "input":
              return pushInput(target, props, responseState);
            case "button":
              return pushStartButton(target, props, responseState);
            case "form":
              return pushStartForm(target, props, responseState);
            case "menuitem":
              return pushStartMenuItem(target, props);
            case "title":
              return pushTitle(target, props, responseState, formatContext.insertionMode, formatContext.noscriptTagInScope);
            case "link":
              return pushLink(target, props, responseState, resources, textEmbedded, formatContext.insertionMode, formatContext.noscriptTagInScope);
            case "script":
              return pushScript(target, props, resources, textEmbedded, formatContext.insertionMode, formatContext.noscriptTagInScope);
            case "style":
              return pushStyle(target, props, resources, textEmbedded, formatContext.insertionMode, formatContext.noscriptTagInScope);
            case "meta":
              return pushMeta(target, props, responseState, textEmbedded, formatContext.insertionMode, formatContext.noscriptTagInScope);
            case "listing":
            case "pre": {
              return pushStartPreformattedElement(target, props, type);
            }
            case "base":
            case "area":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "keygen":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return pushSelfClosing(target, props, type);
            }
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph": {
              break;
            }
            case "head":
              return pushStartHead(target, props, responseState, formatContext.insertionMode);
            case "html": {
              return pushStartHtml(target, props, responseState, formatContext.insertionMode);
            }
            default: {
              if (type.indexOf("-") !== -1) {
                return pushStartCustomElement(target, props, type);
              }
            }
          }
          return pushStartGenericElement(target, props, type);
        }
        var endTag1 = stringToPrecomputedChunk("</");
        var endTag2 = stringToPrecomputedChunk(">");
        function pushEndInstance(target, type, props, responseState, formatContext) {
          switch (type) {
            case "title":
            case "style":
            case "script":
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return;
            }
            case "body": {
              if (formatContext.insertionMode <= HTML_HTML_MODE) {
                responseState.hasBody = true;
                return;
              }
              break;
            }
            case "html":
              if (formatContext.insertionMode === ROOT_HTML_MODE) {
                return;
              }
              break;
          }
          target.push(endTag1, stringToChunk(type), endTag2);
        }
        function writeBootstrap(destination, responseState) {
          var bootstrapChunks = responseState.bootstrapChunks;
          var i = 0;
          for (; i < bootstrapChunks.length - 1; i++) {
            writeChunk(destination, bootstrapChunks[i]);
          }
          if (i < bootstrapChunks.length) {
            var lastChunk = bootstrapChunks[i];
            bootstrapChunks.length = 0;
            return writeChunkAndReturn(destination, lastChunk);
          }
          return true;
        }
        function writeCompletedRoot(destination, responseState) {
          return writeBootstrap(destination, responseState);
        }
        var placeholder1 = stringToPrecomputedChunk('<template id="');
        var placeholder2 = stringToPrecomputedChunk('"></template>');
        function writePlaceholder(destination, responseState, id) {
          writeChunk(destination, placeholder1);
          writeChunk(destination, responseState.placeholderPrefix);
          var formattedID = stringToChunk(id.toString(16));
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, placeholder2);
        }
        var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
        var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
        var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
        var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
        var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
        var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="');
        var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="');
        var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
        function writeStartCompletedSuspenseBoundary$1(destination, responseState) {
          return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
        }
        function writeStartPendingSuspenseBoundary(destination, responseState, id) {
          writeChunk(destination, startPendingSuspenseBoundary1);
          if (id === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, id);
          return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
        }
        function writeStartClientRenderedSuspenseBoundary$1(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
          var result;
          result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
          writeChunk(destination, clientRenderedSuspenseBoundaryError1);
          if (errorDigest) {
            writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
            writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));
            writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
          }
          {
            if (errorMesssage) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
          }
          result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);
          return result;
        }
        function writeEndCompletedSuspenseBoundary$1(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndPendingSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndClientRenderedSuspenseBoundary$1(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
        var startSegmentHTML2 = stringToPrecomputedChunk('">');
        var endSegmentHTML = stringToPrecomputedChunk("</div>");
        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
        var startSegmentSVG2 = stringToPrecomputedChunk('">');
        var endSegmentSVG = stringToPrecomputedChunk("</svg>");
        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
        var startSegmentMathML2 = stringToPrecomputedChunk('">');
        var endSegmentMathML = stringToPrecomputedChunk("</math>");
        var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
        var startSegmentTable2 = stringToPrecomputedChunk('">');
        var endSegmentTable = stringToPrecomputedChunk("</table>");
        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
        var startSegmentTableBody2 = stringToPrecomputedChunk('">');
        var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
        var startSegmentTableRow2 = stringToPrecomputedChunk('">');
        var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
        var startSegmentColGroup2 = stringToPrecomputedChunk('">');
        var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
        function writeStartSegment(destination, responseState, formatContext, id) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_HTML_MODE:
            case HTML_MODE: {
              writeChunk(destination, startSegmentHTML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentHTML2);
            }
            case SVG_MODE: {
              writeChunk(destination, startSegmentSVG);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentSVG2);
            }
            case MATHML_MODE: {
              writeChunk(destination, startSegmentMathML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentMathML2);
            }
            case HTML_TABLE_MODE: {
              writeChunk(destination, startSegmentTable);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTable2);
            }
            case HTML_TABLE_BODY_MODE: {
              writeChunk(destination, startSegmentTableBody);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableBody2);
            }
            case HTML_TABLE_ROW_MODE: {
              writeChunk(destination, startSegmentTableRow);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableRow2);
            }
            case HTML_COLGROUP_MODE: {
              writeChunk(destination, startSegmentColGroup);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentColGroup2);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        function writeEndSegment(destination, formatContext) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_HTML_MODE:
            case HTML_MODE: {
              return writeChunkAndReturn(destination, endSegmentHTML);
            }
            case SVG_MODE: {
              return writeChunkAndReturn(destination, endSegmentSVG);
            }
            case MATHML_MODE: {
              return writeChunkAndReturn(destination, endSegmentMathML);
            }
            case HTML_TABLE_MODE: {
              return writeChunkAndReturn(destination, endSegmentTable);
            }
            case HTML_TABLE_BODY_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableBody);
            }
            case HTML_TABLE_ROW_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableRow);
            }
            case HTML_COLGROUP_MODE: {
              return writeChunkAndReturn(destination, endSegmentColGroup);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegment + ';$RS("');
        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
        var completeSegmentScript2 = stringToPrecomputedChunk('","');
        var completeSegmentScriptEnd = stringToPrecomputedChunk('")</script>');
        var completeSegmentData1 = stringToPrecomputedChunk('<template data-rsi="" data-sid="');
        var completeSegmentData2 = stringToPrecomputedChunk('" data-pid="');
        var completeSegmentDataEnd = dataElementQuotedEnd;
        function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
          var scriptFormat = responseState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, responseState.startInlineScript);
            if ((responseState.instructions & SentCompleteSegmentFunction) === NothingSent) {
              responseState.instructions |= SentCompleteSegmentFunction;
              writeChunk(destination, completeSegmentScript1Full);
            } else {
              writeChunk(destination, completeSegmentScript1Partial);
            }
          } else {
            writeChunk(destination, completeSegmentData1);
          }
          writeChunk(destination, responseState.segmentPrefix);
          var formattedID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, formattedID);
          if (scriptFormat) {
            writeChunk(destination, completeSegmentScript2);
          } else {
            writeChunk(destination, completeSegmentData2);
          }
          writeChunk(destination, responseState.placeholderPrefix);
          writeChunk(destination, formattedID);
          if (scriptFormat) {
            return writeChunkAndReturn(destination, completeSegmentScriptEnd);
          } else {
            return writeChunkAndReturn(destination, completeSegmentDataEnd);
          }
        }
        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundary + '$RC("');
        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
        var completeBoundaryWithStylesScript1FullBoth = stringToPrecomputedChunk(completeBoundary + completeBoundaryWithStyles + '$RR("');
        var completeBoundaryWithStylesScript1FullPartial = stringToPrecomputedChunk(completeBoundaryWithStyles + '$RR("');
        var completeBoundaryWithStylesScript1Partial = stringToPrecomputedChunk('$RR("');
        var completeBoundaryScript2 = stringToPrecomputedChunk('","');
        var completeBoundaryScript3a = stringToPrecomputedChunk('",');
        var completeBoundaryScript3b = stringToPrecomputedChunk('"');
        var completeBoundaryScriptEnd = stringToPrecomputedChunk(")</script>");
        var completeBoundaryData1 = stringToPrecomputedChunk('<template data-rci="" data-bid="');
        var completeBoundaryWithStylesData1 = stringToPrecomputedChunk('<template data-rri="" data-bid="');
        var completeBoundaryData2 = stringToPrecomputedChunk('" data-sid="');
        var completeBoundaryData3a = stringToPrecomputedChunk('" data-sty="');
        var completeBoundaryDataEnd = dataElementQuotedEnd;
        function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID, boundaryResources) {
          var requiresStyleInsertion;
          {
            requiresStyleInsertion = responseState.stylesToHoist;
            responseState.stylesToHoist = false;
          }
          var scriptFormat = responseState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, responseState.startInlineScript);
            if (requiresStyleInsertion) {
              if ((responseState.instructions & SentCompleteBoundaryFunction) === NothingSent) {
                responseState.instructions |= SentStyleInsertionFunction | SentCompleteBoundaryFunction;
                writeChunk(destination, clonePrecomputedChunk(completeBoundaryWithStylesScript1FullBoth));
              } else if ((responseState.instructions & SentStyleInsertionFunction) === NothingSent) {
                responseState.instructions |= SentStyleInsertionFunction;
                writeChunk(destination, completeBoundaryWithStylesScript1FullPartial);
              } else {
                writeChunk(destination, completeBoundaryWithStylesScript1Partial);
              }
            } else {
              if ((responseState.instructions & SentCompleteBoundaryFunction) === NothingSent) {
                responseState.instructions |= SentCompleteBoundaryFunction;
                writeChunk(destination, completeBoundaryScript1Full);
              } else {
                writeChunk(destination, completeBoundaryScript1Partial);
              }
            }
          } else {
            if (requiresStyleInsertion) {
              writeChunk(destination, completeBoundaryWithStylesData1);
            } else {
              writeChunk(destination, completeBoundaryData1);
            }
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          var formattedContentID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, boundaryID);
          if (scriptFormat) {
            writeChunk(destination, completeBoundaryScript2);
          } else {
            writeChunk(destination, completeBoundaryData2);
          }
          writeChunk(destination, responseState.segmentPrefix);
          writeChunk(destination, formattedContentID);
          if (requiresStyleInsertion) {
            if (scriptFormat) {
              writeChunk(destination, completeBoundaryScript3a);
              writeStyleResourceDependenciesInJS(destination, boundaryResources);
            } else {
              writeChunk(destination, completeBoundaryData3a);
              writeStyleResourceDependenciesInAttr(destination, boundaryResources);
            }
          } else {
            if (scriptFormat) {
              writeChunk(destination, completeBoundaryScript3b);
            }
          }
          var writeMore;
          if (scriptFormat) {
            writeMore = writeChunkAndReturn(destination, completeBoundaryScriptEnd);
          } else {
            writeMore = writeChunkAndReturn(destination, completeBoundaryDataEnd);
          }
          return writeBootstrap(destination, responseState) && writeMore;
        }
        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderBoundary + ';$RX("');
        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
        var clientRenderScript1A = stringToPrecomputedChunk('"');
        var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
        var clientRenderScriptEnd = stringToPrecomputedChunk(")</script>");
        var clientRenderData1 = stringToPrecomputedChunk('<template data-rxi="" data-bid="');
        var clientRenderData2 = stringToPrecomputedChunk('" data-dgst="');
        var clientRenderData3 = stringToPrecomputedChunk('" data-msg="');
        var clientRenderData4 = stringToPrecomputedChunk('" data-stck="');
        var clientRenderDataEnd = dataElementQuotedEnd;
        function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
          var scriptFormat = responseState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, responseState.startInlineScript);
            if ((responseState.instructions & SentClientRenderFunction) === NothingSent) {
              responseState.instructions |= SentClientRenderFunction;
              writeChunk(destination, clientRenderScript1Full);
            } else {
              writeChunk(destination, clientRenderScript1Partial);
            }
          } else {
            writeChunk(destination, clientRenderData1);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, boundaryID);
          if (scriptFormat) {
            writeChunk(destination, clientRenderScript1A);
          }
          if (errorDigest || errorMessage || errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")));
            } else {
              writeChunk(destination, clientRenderData2);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest || "")));
            }
          }
          if (errorMessage || errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")));
            } else {
              writeChunk(destination, clientRenderData3);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMessage || "")));
            }
          }
          if (errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));
            } else {
              writeChunk(destination, clientRenderData4);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
            }
          }
          if (scriptFormat) {
            return writeChunkAndReturn(destination, clientRenderScriptEnd);
          } else {
            return writeChunkAndReturn(destination, clientRenderDataEnd);
          }
        }
        var regexForJSStringsInInstructionScripts = /[<\u2028\u2029]/g;
        function escapeJSStringsForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInInstructionScripts, function(match) {
            switch (match) {
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        var regexForJSStringsInScripts = /[&><\u2028\u2029]/g;
        function escapeJSObjectForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInScripts, function(match) {
            switch (match) {
              case "&":
                return "\\u0026";
              case ">":
                return "\\u003e";
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        var lateStyleTagResourceOpen1 = stringToPrecomputedChunk('<style media="not all" data-precedence="');
        var lateStyleTagResourceOpen2 = stringToPrecomputedChunk('" data-href="');
        var lateStyleTagResourceOpen3 = stringToPrecomputedChunk('">');
        var lateStyleTagTemplateClose = stringToPrecomputedChunk("</style>");
        var currentlyRenderingBoundaryHasStylesToHoist = false;
        var destinationHasCapacity = true;
        function flushStyleTagsLateForBoundary(resource) {
          if (resource.type === "stylesheet" && (resource.state & FlushedInPreamble) === NoState) {
            currentlyRenderingBoundaryHasStylesToHoist = true;
          } else if (resource.type === "style") {
            var chunks = resource.chunks;
            var hrefs = resource.props.hrefs;
            var i = 0;
            if (chunks.length) {
              writeChunk(this, lateStyleTagResourceOpen1);
              writeChunk(this, stringToChunk(escapeTextForBrowser(resource.props.precedence)));
              if (hrefs.length) {
                writeChunk(this, lateStyleTagResourceOpen2);
                for (; i < hrefs.length - 1; i++) {
                  writeChunk(this, stringToChunk(escapeTextForBrowser(hrefs[i])));
                  writeChunk(this, spaceSeparator);
                }
                writeChunk(this, stringToChunk(escapeTextForBrowser(hrefs[i])));
              }
              writeChunk(this, lateStyleTagResourceOpen3);
              for (i = 0; i < chunks.length; i++) {
                writeChunk(this, chunks[i]);
              }
              destinationHasCapacity = writeChunkAndReturn(this, lateStyleTagTemplateClose);
              currentlyRenderingBoundaryHasStylesToHoist = true;
              chunks.length = 0;
              hrefs.length = 0;
            }
          }
        }
        function writeResourcesForBoundary(destination, boundaryResources, responseState) {
          currentlyRenderingBoundaryHasStylesToHoist = false;
          destinationHasCapacity = true;
          boundaryResources.forEach(flushStyleTagsLateForBoundary, destination);
          if (currentlyRenderingBoundaryHasStylesToHoist) {
            responseState.stylesToHoist = true;
          }
          return destinationHasCapacity;
        }
        function flushResourceInPreamble(resource) {
          if ((resource.state & (Flushed | Blocked)) === NoState) {
            var chunks = resource.chunks;
            for (var i = 0; i < chunks.length; i++) {
              writeChunk(this, chunks[i]);
            }
            resource.state |= FlushedInPreamble;
          }
        }
        function flushResourceLate(resource) {
          if ((resource.state & (Flushed | Blocked)) === NoState) {
            var chunks = resource.chunks;
            for (var i = 0; i < chunks.length; i++) {
              writeChunk(this, chunks[i]);
            }
            resource.state |= FlushedLate;
          }
        }
        var precedenceStyleTagResource = null;
        var didFlushPrecedence = false;
        function flushStyleInPreamble(resource, key, set2) {
          var chunks = resource.chunks;
          if (resource.state & Flushed) {
            set2.delete(resource);
          } else {
            if (resource.type === "style") {
              precedenceStyleTagResource = resource;
              return;
            }
            pushLinkImpl(chunks, resource.props);
            for (var i = 0; i < chunks.length; i++) {
              writeChunk(this, chunks[i]);
            }
            resource.state |= FlushedInPreamble;
            didFlushPrecedence = true;
          }
        }
        var styleTagResourceOpen1 = stringToPrecomputedChunk('<style data-precedence="');
        var styleTagResourceOpen2 = stringToPrecomputedChunk('" data-href="');
        var spaceSeparator = stringToPrecomputedChunk(" ");
        var styleTagResourceOpen3 = stringToPrecomputedChunk('">');
        var styleTagResourceClose = stringToPrecomputedChunk("</style>");
        function flushAllStylesInPreamble(set2, precedence) {
          didFlushPrecedence = false;
          set2.forEach(flushStyleInPreamble, this);
          set2.clear();
          var chunks = precedenceStyleTagResource.chunks;
          var hrefs = precedenceStyleTagResource.props.hrefs;
          if (didFlushPrecedence === false || chunks.length) {
            writeChunk(this, styleTagResourceOpen1);
            writeChunk(this, stringToChunk(escapeTextForBrowser(precedence)));
            var i = 0;
            if (hrefs.length) {
              writeChunk(this, styleTagResourceOpen2);
              for (; i < hrefs.length - 1; i++) {
                writeChunk(this, stringToChunk(escapeTextForBrowser(hrefs[i])));
                writeChunk(this, spaceSeparator);
              }
              writeChunk(this, stringToChunk(escapeTextForBrowser(hrefs[i])));
            }
            writeChunk(this, styleTagResourceOpen3);
            for (i = 0; i < chunks.length; i++) {
              writeChunk(this, chunks[i]);
            }
            writeChunk(this, styleTagResourceClose);
            chunks.length = 0;
            hrefs.length = 0;
          }
        }
        function preloadLateStyle(resource) {
          if (resource.state & PreloadFlushed) {
            return;
          }
          if (resource.type === "style") {
            return;
          }
          var chunks = resource.chunks;
          var preloadProps = preloadAsStylePropsFromProps(resource.props.href, resource.props);
          pushLinkImpl(chunks, preloadProps);
          for (var i = 0; i < chunks.length; i++) {
            writeChunk(this, chunks[i]);
          }
          resource.state |= PreloadFlushed;
          chunks.length = 0;
        }
        function preloadLateStyles(set2, precedence) {
          set2.forEach(preloadLateStyle, this);
          set2.clear();
        }
        function writePreamble(destination, resources, responseState, willFlushAllSegments) {
          if (!willFlushAllSegments && responseState.externalRuntimeScript) {
            var _responseState$extern = responseState.externalRuntimeScript, src = _responseState$extern.src, chunks = _responseState$extern.chunks;
            internalPreinitScript(resources, src, chunks);
          }
          var htmlChunks = responseState.htmlChunks;
          var headChunks = responseState.headChunks;
          var i = 0;
          if (htmlChunks) {
            for (i = 0; i < htmlChunks.length; i++) {
              writeChunk(destination, htmlChunks[i]);
            }
            if (headChunks) {
              for (i = 0; i < headChunks.length; i++) {
                writeChunk(destination, headChunks[i]);
              }
            } else {
              writeChunk(destination, startChunkForTag("head"));
              writeChunk(destination, endOfStartTag);
            }
          } else if (headChunks) {
            for (i = 0; i < headChunks.length; i++) {
              writeChunk(destination, headChunks[i]);
            }
          }
          var charsetChunks = responseState.charsetChunks;
          for (i = 0; i < charsetChunks.length; i++) {
            writeChunk(destination, charsetChunks[i]);
          }
          charsetChunks.length = 0;
          resources.preconnects.forEach(flushResourceInPreamble, destination);
          resources.preconnects.clear();
          var preconnectChunks = responseState.preconnectChunks;
          for (i = 0; i < preconnectChunks.length; i++) {
            writeChunk(destination, preconnectChunks[i]);
          }
          preconnectChunks.length = 0;
          resources.fontPreloads.forEach(flushResourceInPreamble, destination);
          resources.fontPreloads.clear();
          resources.precedences.forEach(flushAllStylesInPreamble, destination);
          resources.scripts.forEach(flushResourceInPreamble, destination);
          resources.scripts.clear();
          resources.explicitStylesheetPreloads.forEach(flushResourceInPreamble, destination);
          resources.explicitStylesheetPreloads.clear();
          resources.explicitScriptPreloads.forEach(flushResourceInPreamble, destination);
          resources.explicitScriptPreloads.clear();
          resources.explicitOtherPreloads.forEach(flushResourceInPreamble, destination);
          resources.explicitOtherPreloads.clear();
          var preloadChunks = responseState.preloadChunks;
          for (i = 0; i < preloadChunks.length; i++) {
            writeChunk(destination, preloadChunks[i]);
          }
          preloadChunks.length = 0;
          var hoistableChunks = responseState.hoistableChunks;
          for (i = 0; i < hoistableChunks.length; i++) {
            writeChunk(destination, hoistableChunks[i]);
          }
          hoistableChunks.length = 0;
          if (htmlChunks && headChunks === null) {
            writeChunk(destination, endTag1);
            writeChunk(destination, stringToChunk("head"));
            writeChunk(destination, endTag2);
          }
        }
        function writeHoistables(destination, resources, responseState) {
          var i = 0;
          resources.preconnects.forEach(flushResourceLate, destination);
          resources.preconnects.clear();
          var preconnectChunks = responseState.preconnectChunks;
          for (i = 0; i < preconnectChunks.length; i++) {
            writeChunk(destination, preconnectChunks[i]);
          }
          preconnectChunks.length = 0;
          resources.fontPreloads.forEach(flushResourceLate, destination);
          resources.fontPreloads.clear();
          resources.precedences.forEach(preloadLateStyles, destination);
          resources.scripts.forEach(flushResourceLate, destination);
          resources.scripts.clear();
          resources.explicitStylesheetPreloads.forEach(flushResourceLate, destination);
          resources.explicitStylesheetPreloads.clear();
          resources.explicitScriptPreloads.forEach(flushResourceLate, destination);
          resources.explicitScriptPreloads.clear();
          resources.explicitOtherPreloads.forEach(flushResourceLate, destination);
          resources.explicitOtherPreloads.clear();
          var preloadChunks = responseState.preloadChunks;
          for (i = 0; i < preloadChunks.length; i++) {
            writeChunk(destination, preloadChunks[i]);
          }
          preloadChunks.length = 0;
          var hoistableChunks = responseState.hoistableChunks;
          for (i = 0; i < hoistableChunks.length; i++) {
            writeChunk(destination, hoistableChunks[i]);
          }
          hoistableChunks.length = 0;
        }
        function writePostamble(destination, responseState) {
          if (responseState.hasBody) {
            writeChunk(destination, endTag1);
            writeChunk(destination, stringToChunk("body"));
            writeChunk(destination, endTag2);
          }
          if (responseState.htmlChunks) {
            writeChunk(destination, endTag1);
            writeChunk(destination, stringToChunk("html"));
            writeChunk(destination, endTag2);
          }
        }
        var arrayFirstOpenBracket = stringToPrecomputedChunk("[");
        var arraySubsequentOpenBracket = stringToPrecomputedChunk(",[");
        var arrayInterstitial = stringToPrecomputedChunk(",");
        var arrayCloseBracket = stringToPrecomputedChunk("]");
        function writeStyleResourceDependenciesInJS(destination, boundaryResources) {
          writeChunk(destination, arrayFirstOpenBracket);
          var nextArrayOpenBrackChunk = arrayFirstOpenBracket;
          boundaryResources.forEach(function(resource) {
            if (resource.type === "style")
              ;
            else if (resource.state & FlushedInPreamble)
              ;
            else if (resource.state & Flushed) {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyHrefOnlyInJS(destination, resource.props.href);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
            } else if (resource.type === "stylesheet") {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyInJS(destination, resource.props.href, resource.props["data-precedence"], resource.props);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
              resource.state |= FlushedLate;
            }
          });
          writeChunk(destination, arrayCloseBracket);
        }
        function writeStyleResourceDependencyHrefOnlyInJS(destination, href) {
          {
            checkAttributeStringCoercion(href, "href");
          }
          var coercedHref = "" + href;
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));
        }
        function writeStyleResourceDependencyInJS(destination, href, precedence, props) {
          var coercedHref = sanitizeURL("" + href);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));
          {
            checkAttributeStringCoercion(precedence, "precedence");
          }
          var coercedPrecedence = "" + precedence;
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedPrecedence)));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "href":
                case "rel":
                case "precedence":
                case "data-precedence": {
                  break;
                }
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  writeStyleResourceAttributeInJS(destination, propKey, propValue);
                  break;
              }
            }
          }
          return null;
        }
        function writeStyleResourceAttributeInJS(destination, name, value) {
          var attributeName = name.toLowerCase();
          var attributeValue;
          switch (typeof value) {
            case "function":
            case "symbol":
              return;
          }
          switch (name) {
            case "innerHTML":
            case "dangerouslySetInnerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "style":
              return;
            case "className": {
              attributeName = "class";
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            case "hidden": {
              if (value === false) {
                return;
              }
              attributeValue = "";
              break;
            }
            case "src":
            case "href": {
              value = sanitizeURL(value);
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            default: {
              if (
                // unrecognized event handlers are not SSR'd and we (apparently)
                // use on* as hueristic for these handler props
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              if (!isAttributeNameSafe(name)) {
                return;
              }
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
          }
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeName)));
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeValue)));
        }
        function writeStyleResourceDependenciesInAttr(destination, boundaryResources) {
          writeChunk(destination, arrayFirstOpenBracket);
          var nextArrayOpenBrackChunk = arrayFirstOpenBracket;
          boundaryResources.forEach(function(resource) {
            if (resource.type === "style")
              ;
            else if (resource.state & FlushedInPreamble)
              ;
            else if (resource.state & Flushed) {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyHrefOnlyInAttr(destination, resource.props.href);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
            } else if (resource.type === "stylesheet") {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyInAttr(destination, resource.props.href, resource.props["data-precedence"], resource.props);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
              resource.state |= FlushedLate;
            }
          });
          writeChunk(destination, arrayCloseBracket);
        }
        function writeStyleResourceDependencyHrefOnlyInAttr(destination, href) {
          {
            checkAttributeStringCoercion(href, "href");
          }
          var coercedHref = "" + href;
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));
        }
        function writeStyleResourceDependencyInAttr(destination, href, precedence, props) {
          var coercedHref = sanitizeURL("" + href);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));
          {
            checkAttributeStringCoercion(precedence, "precedence");
          }
          var coercedPrecedence = "" + precedence;
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedPrecedence))));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "href":
                case "rel":
                case "precedence":
                case "data-precedence": {
                  break;
                }
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  writeStyleResourceAttributeInAttr(destination, propKey, propValue);
                  break;
              }
            }
          }
          return null;
        }
        function writeStyleResourceAttributeInAttr(destination, name, value) {
          var attributeName = name.toLowerCase();
          var attributeValue;
          switch (typeof value) {
            case "function":
            case "symbol":
              return;
          }
          switch (name) {
            case "innerHTML":
            case "dangerouslySetInnerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "style":
              return;
            case "className": {
              attributeName = "class";
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            case "hidden": {
              if (value === false) {
                return;
              }
              attributeValue = "";
              break;
            }
            case "src":
            case "href": {
              value = sanitizeURL(value);
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            default: {
              if (
                // unrecognized event handlers are not SSR'd and we (apparently)
                // use on* as hueristic for these handler props
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              if (!isAttributeNameSafe(name)) {
                return;
              }
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
          }
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeName))));
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeValue))));
        }
        var NoState = 0;
        var FlushedInPreamble = 1;
        var FlushedLate = 2;
        var Flushed = 3;
        var Blocked = 4;
        var PreloadFlushed = 8;
        function createResources() {
          return {
            // persistent
            preloadsMap: /* @__PURE__ */ new Map(),
            preconnectsMap: /* @__PURE__ */ new Map(),
            stylesMap: /* @__PURE__ */ new Map(),
            scriptsMap: /* @__PURE__ */ new Map(),
            // cleared on flush
            preconnects: /* @__PURE__ */ new Set(),
            fontPreloads: /* @__PURE__ */ new Set(),
            // usedImagePreloads: new Set(),
            precedences: /* @__PURE__ */ new Map(),
            stylePrecedences: /* @__PURE__ */ new Map(),
            scripts: /* @__PURE__ */ new Set(),
            explicitStylesheetPreloads: /* @__PURE__ */ new Set(),
            // explicitImagePreloads: new Set(),
            explicitScriptPreloads: /* @__PURE__ */ new Set(),
            explicitOtherPreloads: /* @__PURE__ */ new Set(),
            // like a module global for currently rendering boundary
            boundaryResources: null
          };
        }
        function createBoundaryResources() {
          return /* @__PURE__ */ new Set();
        }
        function setCurrentlyRenderingBoundaryResourcesTarget(resources, boundaryResources) {
          resources.boundaryResources = boundaryResources;
        }
        function getResourceKey(as, href) {
          return "[" + as + "]" + href;
        }
        function prefetchDNS(href, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resources = getResources(request);
          {
            if (typeof href !== "string" || !href) {
              error("ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
            } else if (options != null) {
              if (typeof options === "object" && options.hasOwnProperty("crossOrigin")) {
                error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options));
              } else {
                error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options));
              }
            }
          }
          if (typeof href === "string" && href) {
            var key = getResourceKey("prefetchDNS", href);
            var resource = resources.preconnectsMap.get(key);
            if (!resource) {
              resource = {
                type: "preconnect",
                chunks: [],
                state: NoState,
                props: null
              };
              resources.preconnectsMap.set(key, resource);
              pushLinkImpl(resource.chunks, {
                href,
                rel: "dns-prefetch"
              });
            }
            resources.preconnects.add(resource);
            flushResources(request);
          }
        }
        function preconnect(href, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resources = getResources(request);
          {
            if (typeof href !== "string" || !href) {
              error("ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
            } else if (options != null && typeof options !== "object") {
              error("ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.", getValueDescriptorExpectingEnumForWarning(options));
            } else if (options != null && typeof options.crossOrigin !== "string") {
              error("ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.", getValueDescriptorExpectingObjectForWarning(options.crossOrigin));
            }
          }
          if (typeof href === "string" && href) {
            var crossOrigin = options == null || typeof options.crossOrigin !== "string" ? null : options.crossOrigin === "use-credentials" ? "use-credentials" : "";
            var key = "[preconnect][" + (crossOrigin === null ? "null" : crossOrigin) + "]" + href;
            var resource = resources.preconnectsMap.get(key);
            if (!resource) {
              resource = {
                type: "preconnect",
                chunks: [],
                state: NoState,
                props: null
              };
              resources.preconnectsMap.set(key, resource);
              pushLinkImpl(resource.chunks, {
                rel: "preconnect",
                href,
                crossOrigin
              });
            }
            resources.preconnects.add(resource);
            flushResources(request);
          }
        }
        function preload(href, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resources = getResources(request);
          {
            var encountered = "";
            if (typeof href !== "string" || !href) {
              encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".";
            }
            if (options == null || typeof options !== "object") {
              encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + ".";
            } else if (typeof options.as !== "string" || !options.as) {
              encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".";
            }
            if (encountered) {
              error('ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s', encountered);
            }
          }
          if (typeof href === "string" && href && typeof options === "object" && options !== null && typeof options.as === "string" && options.as) {
            var as = options.as;
            var key;
            if (as === "image") {
              var imageSrcSet = options.imageSrcSet, imageSizes = options.imageSizes;
              var uniquePart = "";
              if (typeof imageSrcSet === "string" && imageSrcSet !== "") {
                uniquePart += "[" + imageSrcSet + "]";
                if (typeof imageSizes === "string") {
                  uniquePart += "[" + imageSizes + "]";
                }
              } else {
                uniquePart += "[][]" + href;
              }
              key = getResourceKey(as, uniquePart);
            } else {
              key = getResourceKey(as, href);
            }
            var resource = resources.preloadsMap.get(key);
            {
              var devResource = getAsResourceDEV(resource);
              if (devResource) {
                switch (devResource.__provenance) {
                  case "preload": {
                    var differenceDescription = describeDifferencesForPreloads(options, devResource.__originalOptions);
                    if (differenceDescription) {
                      error('ReactDOM.preload(): The options provided conflict with another call to `ReactDOM.preload("%s", { as: "%s", ...})`. React will always use the options it first encounters when preloading a resource for a given `href` and `as` type, and any later options will be ignored if different. Try updating all calls to `ReactDOM.preload()` with the same `href` and `as` type to use the same options, or eliminate one of the calls.%s', href, as, differenceDescription);
                    }
                    break;
                  }
                  case "implicit": {
                    var _differenceDescription3 = describeDifferencesForPreloadOverImplicitPreload(options, devResource.__impliedProps);
                    if (_differenceDescription3) {
                      var elementDescription = as === "style" ? '<link rel="stylesheet" ... />' : as === "script" ? "<script ... />" : null;
                      if (elementDescription) {
                        error('ReactDOM.preload(): For `href` "%s", The options provided conflict with props on a matching %s element. When the preload options disagree with the underlying resource it usually means the browser will not be able to use the preload when the resource is fetched, negating any benefit the preload would provide. React will preload the resource using props derived from the resource instead and ignore the options provided to the `ReactDOM.preload()` call. In general, preloading is useful when you expect to render a resource soon but have not yet done so. In this case since the underlying resource was already rendered the preload call may be extraneous. Try removing the call, otherwise try adjusting both the props on the %s and the options passed to `ReactDOM.preload()` to agree.%s', href, elementDescription, elementDescription, _differenceDescription3);
                      }
                    }
                    break;
                  }
                }
              }
            }
            if (!resource) {
              resource = {
                type: "preload",
                chunks: [],
                state: NoState,
                props: preloadPropsFromPreloadOptions(href, as, options)
              };
              resources.preloadsMap.set(key, resource);
              {
                markAsImperativeResourceDEV(resource, "preload", href, options, resource.props);
              }
              pushLinkImpl(resource.chunks, resource.props);
            }
            switch (as) {
              case "font": {
                resources.fontPreloads.add(resource);
                break;
              }
              case "style": {
                resources.explicitStylesheetPreloads.add(resource);
                break;
              }
              case "script": {
                resources.explicitScriptPreloads.add(resource);
                break;
              }
              default: {
                resources.explicitOtherPreloads.add(resource);
              }
            }
            flushResources(request);
          }
        }
        function preinit(href, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resources = getResources(request);
          {
            if (typeof href !== "string" || !href) {
              error("ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
            } else if (options == null || typeof options !== "object") {
              error("ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.", getValueDescriptorExpectingEnumForWarning(options));
            } else if (options.as !== "style" && options.as !== "script") {
              error('ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".', getValueDescriptorExpectingEnumForWarning(options.as));
            }
          }
          if (typeof href === "string" && href && typeof options === "object" && options !== null) {
            var as = options.as;
            switch (as) {
              case "style": {
                var key = getResourceKey(as, href);
                var resource = resources.stylesMap.get(key);
                var precedence = options.precedence || "default";
                {
                  var devResource = getAsResourceDEV(resource);
                  if (devResource) {
                    var resourceProps = stylesheetPropsFromPreinitOptions(href, precedence, options);
                    var propsEquivalent = assign({}, resourceProps, _defineProperty({
                      precedence: options.precedence
                    }, "data-precedence", null));
                    switch (devResource.__provenance) {
                      case "rendered": {
                        var differenceDescription = describeDifferencesForPreinitOverStylesheet(
                          // Diff the props from the JSX element, not the derived resource props
                          propsEquivalent,
                          devResource.__originalProps
                        );
                        if (differenceDescription) {
                          error('ReactDOM.preinit(): For `href` "%s", the options provided conflict with props found on a <link rel="stylesheet" precedence="%s" href="%s" .../> that was already rendered. React will always use the props or options it first encounters for a hoistable stylesheet for a given `href` and any later props or options will be ignored if different. Generally, ReactDOM.preinit() is useful when you are not yet rendering a stylesheet but you anticipate it will be used soon. In this case the stylesheet was already rendered so preinitializing it does not provide any additional benefit. To resolve, try making the props and options agree between the <link rel="stylesheet" .../> and the `ReactDOM.preinit()` call or remove the `ReactDOM.preinit()` call.%s', href, devResource.__originalProps.precedence, href, differenceDescription);
                        }
                        break;
                      }
                      case "preinit": {
                        var _differenceDescription4 = describeDifferencesForPreinits(
                          // Diff the props from the JSX element, not the derived resource props
                          propsEquivalent,
                          devResource.__propsEquivalent
                        );
                        if (_differenceDescription4) {
                          error('ReactDOM.preinit(): For `href` "%s", the options provided conflict with another call to `ReactDOM.preinit("%s", { as: "style", ... })`. React will always use the options it first encounters when preinitializing a hoistable stylesheet for a given `href` and any later options will be ignored if different. Try updating all calls to `ReactDOM.preinit()` for a given `href` to use the same options, or only call `ReactDOM.preinit()` once per `href`.%s', href, href, _differenceDescription4);
                        }
                        break;
                      }
                    }
                  }
                }
                if (!resource) {
                  var state = NoState;
                  var preloadResource = resources.preloadsMap.get(key);
                  if (preloadResource && preloadResource.state & Flushed) {
                    state = PreloadFlushed;
                  }
                  resource = {
                    type: "stylesheet",
                    chunks: [],
                    state,
                    props: stylesheetPropsFromPreinitOptions(href, precedence, options)
                  };
                  resources.stylesMap.set(key, resource);
                  {
                    markAsImperativeResourceDEV(resource, "preinit", href, options, assign({}, resource.props, _defineProperty({
                      precedence
                    }, "data-precedence", void 0)));
                  }
                  var precedenceSet = resources.precedences.get(precedence);
                  if (!precedenceSet) {
                    precedenceSet = /* @__PURE__ */ new Set();
                    resources.precedences.set(precedence, precedenceSet);
                    var emptyStyleResource = {
                      type: "style",
                      chunks: [],
                      state: NoState,
                      props: {
                        precedence,
                        hrefs: []
                      }
                    };
                    precedenceSet.add(emptyStyleResource);
                    {
                      if (resources.stylePrecedences.has(precedence)) {
                        error('React constructed an empty style resource when a style resource already exists for this precedence: "%s". This is a bug in React.', precedence);
                      }
                    }
                    resources.stylePrecedences.set(precedence, emptyStyleResource);
                  }
                  precedenceSet.add(resource);
                  flushResources(request);
                }
                return;
              }
              case "script": {
                var src = href;
                var _key = getResourceKey(as, src);
                var _resource = resources.scriptsMap.get(_key);
                {
                  var _devResource = getAsResourceDEV(_resource);
                  if (_devResource) {
                    var _propsEquivalent = scriptPropsFromPreinitOptions(src, options);
                    switch (_devResource.__provenance) {
                      case "rendered": {
                        var _differenceDescription5 = describeDifferencesForPreinitOverScript(
                          // Diff the props from the JSX element, not the derived resource props
                          _propsEquivalent,
                          _devResource.__originalProps
                        );
                        if (_differenceDescription5) {
                          error('ReactDOM.preinit(): For `href` "%s", the options provided conflict with props found on a <script async={true} src="%s" .../> that was already rendered. React will always use the props or options it first encounters for a hoistable script for a given `href` and any later props or options will be ignored if different. Generally, ReactDOM.preinit() is useful when you are not yet rendering a script but you anticipate it will be used soon and want to go beyond preloading it and have it execute early. In this case the script was already rendered so preinitializing it does not provide any additional benefit. To resolve, try making the props and options agree between the <script .../> and the `ReactDOM.preinit()` call or remove the `ReactDOM.preinit()` call.%s', href, href, _differenceDescription5);
                        }
                        break;
                      }
                      case "preinit": {
                        var _differenceDescription6 = describeDifferencesForPreinits(
                          // Diff the props from the JSX element, not the derived resource props
                          _propsEquivalent,
                          _devResource.__propsEquivalent
                        );
                        if (_differenceDescription6) {
                          error('ReactDOM.preinit(): For `href` "%s", the options provided conflict with another call to `ReactDOM.preinit("%s", { as: "script", ... })`. React will always use the options it first encounters when preinitializing a hoistable script for a given `href` and any later options will be ignored if different. Try updating all calls to `ReactDOM.preinit()` for a given `href` to use the same options, or only call `ReactDOM.preinit()` once per `href`.%s', href, href, _differenceDescription6);
                        }
                        break;
                      }
                    }
                  }
                }
                if (!_resource) {
                  _resource = {
                    type: "script",
                    chunks: [],
                    state: NoState,
                    props: null
                  };
                  resources.scriptsMap.set(_key, _resource);
                  var _resourceProps = scriptPropsFromPreinitOptions(src, options);
                  {
                    markAsImperativeResourceDEV(_resource, "preinit", href, options, _resourceProps);
                  }
                  resources.scripts.add(_resource);
                  pushScriptImpl(_resource.chunks, _resourceProps);
                  flushResources(request);
                }
                return;
              }
            }
          }
        }
        function preloadBootstrapScript(resources, src, nonce, integrity, crossOrigin) {
          var key = getResourceKey("script", src);
          {
            if (resources.preloadsMap.has(key)) {
              error('Internal React Error: React expected bootstrap script with src "%s" to not have been preloaded already. please file an issue', src);
            }
          }
          var props = {
            rel: "preload",
            href: src,
            as: "script",
            nonce,
            integrity,
            crossOrigin
          };
          var resource = {
            type: "preload",
            chunks: [],
            state: NoState,
            props
          };
          resources.preloadsMap.set(key, resource);
          resources.explicitScriptPreloads.add(resource);
          pushLinkImpl(resource.chunks, props);
        }
        function preloadBootstrapModule(resources, src, nonce, integrity, crossOrigin) {
          var key = getResourceKey("script", src);
          {
            if (resources.preloadsMap.has(key)) {
              error('Internal React Error: React expected bootstrap module with src "%s" to not have been preloaded already. please file an issue', src);
            }
          }
          var props = {
            rel: "modulepreload",
            href: src,
            nonce,
            integrity,
            crossOrigin
          };
          var resource = {
            type: "preload",
            chunks: [],
            state: NoState,
            props
          };
          resources.preloadsMap.set(key, resource);
          resources.explicitScriptPreloads.add(resource);
          pushLinkImpl(resource.chunks, props);
          return;
        }
        function internalPreinitScript(resources, src, chunks) {
          var key = getResourceKey("script", src);
          var resource = resources.scriptsMap.get(key);
          if (!resource) {
            resource = {
              type: "script",
              chunks,
              state: NoState,
              props: null
            };
            resources.scriptsMap.set(key, resource);
            resources.scripts.add(resource);
          }
          return;
        }
        function preloadPropsFromPreloadOptions(href, as, options) {
          return {
            rel: "preload",
            as,
            // There is a bug in Safari where imageSrcSet is not respected on preload links
            // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.
            // This harms older browers that do not support imageSrcSet by making their preloads not work
            // but this population is shrinking fast and is already small so we accept this tradeoff.
            href: as === "image" && options.imageSrcSet ? void 0 : href,
            crossOrigin: as === "font" ? "" : options.crossOrigin,
            integrity: options.integrity,
            type: options.type,
            nonce: options.nonce,
            fetchPriority: options.fetchPriority,
            imageSrcSet: options.imageSrcSet,
            imageSizes: options.imageSizes
          };
        }
        function preloadAsStylePropsFromProps(href, props) {
          return {
            rel: "preload",
            as: "style",
            href,
            crossOrigin: props.crossOrigin,
            fetchPriority: props.fetchPriority,
            integrity: props.integrity,
            media: props.media,
            hrefLang: props.hrefLang,
            referrerPolicy: props.referrerPolicy
          };
        }
        function stylesheetPropsFromPreinitOptions(href, precedence, options) {
          return {
            rel: "stylesheet",
            href,
            "data-precedence": precedence,
            crossOrigin: options.crossOrigin,
            integrity: options.integrity,
            fetchPriority: options.fetchPriority
          };
        }
        function stylesheetPropsFromRawProps(rawProps) {
          return assign({}, rawProps, {
            "data-precedence": rawProps.precedence,
            precedence: null
          });
        }
        function adoptPreloadPropsForStylesheetProps(resourceProps, preloadProps) {
          if (resourceProps.crossOrigin == null)
            resourceProps.crossOrigin = preloadProps.crossOrigin;
          if (resourceProps.integrity == null)
            resourceProps.integrity = preloadProps.integrity;
        }
        function scriptPropsFromPreinitOptions(src, options) {
          return {
            src,
            async: true,
            crossOrigin: options.crossOrigin,
            integrity: options.integrity,
            nonce: options.nonce,
            fetchPriority: options.fetchPriority
          };
        }
        function adoptPreloadPropsForScriptProps(resourceProps, preloadProps) {
          if (resourceProps.crossOrigin == null)
            resourceProps.crossOrigin = preloadProps.crossOrigin;
          if (resourceProps.integrity == null)
            resourceProps.integrity = preloadProps.integrity;
        }
        function hoistStyleResource(resource) {
          this.add(resource);
        }
        function hoistResources(resources, source) {
          var currentBoundaryResources = resources.boundaryResources;
          if (currentBoundaryResources) {
            source.forEach(hoistStyleResource, currentBoundaryResources);
          }
        }
        function markAsRenderedResourceDEV(resource, originalProps) {
          {
            var devResource = resource;
            if (typeof devResource.__provenance === "string") {
              error("Resource already marked for DEV type. This is a bug in React.");
            }
            devResource.__provenance = "rendered";
            devResource.__originalProps = originalProps;
          }
        }
        function markAsImperativeResourceDEV(resource, provenance, originalHref, originalOptions, propsEquivalent) {
          {
            var devResource = resource;
            if (typeof devResource.__provenance === "string") {
              error("Resource already marked for DEV type. This is a bug in React.");
            }
            devResource.__provenance = provenance;
            devResource.__originalHref = originalHref;
            devResource.__originalOptions = originalOptions;
            devResource.__propsEquivalent = propsEquivalent;
          }
        }
        function getAsResourceDEV(resource) {
          {
            if (resource) {
              if (typeof resource.__provenance === "string") {
                return resource;
              }
              error("Resource was not marked for DEV type. This is a bug in React.");
            }
            return null;
          }
        }
        function createResponseState(resources, generateStaticMarkup, identifierPrefix, externalRuntimeConfig) {
          var responseState = createResponseState$1(resources, identifierPrefix, void 0, void 0, void 0, void 0, externalRuntimeConfig);
          return {
            // Keep this in sync with ReactFizzConfigDOM
            bootstrapChunks: responseState.bootstrapChunks,
            placeholderPrefix: responseState.placeholderPrefix,
            segmentPrefix: responseState.segmentPrefix,
            boundaryPrefix: responseState.boundaryPrefix,
            idPrefix: responseState.idPrefix,
            nextSuspenseID: responseState.nextSuspenseID,
            streamingFormat: responseState.streamingFormat,
            startInlineScript: responseState.startInlineScript,
            instructions: responseState.instructions,
            externalRuntimeScript: responseState.externalRuntimeScript,
            htmlChunks: responseState.htmlChunks,
            headChunks: responseState.headChunks,
            hasBody: responseState.hasBody,
            charsetChunks: responseState.charsetChunks,
            preconnectChunks: responseState.preconnectChunks,
            preloadChunks: responseState.preloadChunks,
            hoistableChunks: responseState.hoistableChunks,
            stylesToHoist: responseState.stylesToHoist,
            // This is an extra field for the legacy renderer
            generateStaticMarkup
          };
        }
        function createRootFormatContext() {
          return {
            insertionMode: HTML_MODE,
            // We skip the root mode because we don't want to emit the DOCTYPE in legacy mode.
            selectedValue: null,
            noscriptTagInScope: false
          };
        }
        function pushTextInstance(target, text, responseState, textEmbedded) {
          if (responseState.generateStaticMarkup) {
            target.push(stringToChunk(escapeTextForBrowser(text)));
            return false;
          } else {
            return pushTextInstance$1(target, text, responseState, textEmbedded);
          }
        }
        function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
          if (responseState.generateStaticMarkup) {
            return;
          } else {
            return pushSegmentFinale$1(target, responseState, lastPushedText, textEmbedded);
          }
        }
        function writeStartCompletedSuspenseBoundary(destination, responseState) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeStartCompletedSuspenseBoundary$1(destination);
        }
        function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMessage, errorComponentStack) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeStartClientRenderedSuspenseBoundary$1(destination, responseState, errorDigest, errorMessage, errorComponentStack);
        }
        function writeEndCompletedSuspenseBoundary(destination, responseState) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeEndCompletedSuspenseBoundary$1(destination);
        }
        function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeEndClientRenderedSuspenseBoundary$1(destination);
        }
        var NotPendingTransition = NotPending;
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
        var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_CACHE_TYPE: {
              return "Cache";
            }
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
              case REACT_SERVER_CONTEXT_TYPE: {
                var context2 = type;
                return (context2.displayName || context2._globalName) + ".Provider";
              }
            }
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct$1(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        function getMaskedContext(type, unmaskedContext) {
          {
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            return context;
          }
        }
        function processChildContext(instance, type, parentContext, childContextTypes) {
          {
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var rootContextSnapshot = null;
        var currentActiveSnapshot = null;
        function popNode(prev) {
          {
            prev.context._currentValue2 = prev.parentValue;
          }
        }
        function pushNode(next) {
          {
            next.context._currentValue2 = next.value;
          }
        }
        function popToNearestCommonAncestor(prev, next) {
          if (prev === next)
            ;
          else {
            popNode(prev);
            var parentPrev = prev.parent;
            var parentNext = next.parent;
            if (parentPrev === null) {
              if (parentNext !== null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
            } else {
              if (parentNext === null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
              popToNearestCommonAncestor(parentPrev, parentNext);
            }
            pushNode(next);
          }
        }
        function popAllPrevious(prev) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev !== null) {
            popAllPrevious(parentPrev);
          }
        }
        function pushAllNext(next) {
          var parentNext = next.parent;
          if (parentNext !== null) {
            pushAllNext(parentNext);
          }
          pushNode(next);
        }
        function popPreviousToCommonLevel(prev, next) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (parentPrev.depth === next.depth) {
            popToNearestCommonAncestor(parentPrev, next);
          } else {
            popPreviousToCommonLevel(parentPrev, next);
          }
        }
        function popNextToCommonLevel(prev, next) {
          var parentNext = next.parent;
          if (parentNext === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (prev.depth === parentNext.depth) {
            popToNearestCommonAncestor(prev, parentNext);
          } else {
            popNextToCommonLevel(prev, parentNext);
          }
          pushNode(next);
        }
        function switchContext(newSnapshot) {
          var prev = currentActiveSnapshot;
          var next = newSnapshot;
          if (prev !== next) {
            if (prev === null) {
              pushAllNext(next);
            } else if (next === null) {
              popAllPrevious(prev);
            } else if (prev.depth === next.depth) {
              popToNearestCommonAncestor(prev, next);
            } else if (prev.depth > next.depth) {
              popPreviousToCommonLevel(prev, next);
            } else {
              popNextToCommonLevel(prev, next);
            }
            currentActiveSnapshot = next;
          }
        }
        function pushProvider(context, nextValue) {
          var prevValue;
          {
            prevValue = context._currentValue2;
            context._currentValue2 = nextValue;
            {
              if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer2 = rendererSigil;
            }
          }
          var prevNode = currentActiveSnapshot;
          var newNode = {
            parent: prevNode,
            depth: prevNode === null ? 0 : prevNode.depth + 1,
            context,
            parentValue: prevValue,
            value: nextValue
          };
          currentActiveSnapshot = newNode;
          return newNode;
        }
        function popProvider(context) {
          var prevSnapshot = currentActiveSnapshot;
          if (prevSnapshot === null) {
            throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
          }
          {
            if (prevSnapshot.context !== context) {
              error("The parent context is not the expected context. This is probably a bug in React.");
            }
          }
          {
            var _value = prevSnapshot.parentValue;
            if (_value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
              prevSnapshot.context._currentValue2 = prevSnapshot.context._defaultValue;
            } else {
              prevSnapshot.context._currentValue2 = _value;
            }
            {
              if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer2 = rendererSigil;
            }
          }
          return currentActiveSnapshot = prevSnapshot.parent;
        }
        function getActiveContext() {
          return currentActiveSnapshot;
        }
        function readContext$1(context) {
          var value = context._currentValue2;
          return value;
        }
        function get(key) {
          return key._reactInternals;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var didWarnAboutNoopUpdateForComponent = {};
        var didWarnAboutDeprecatedWillMount = {};
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        var didWarnOnInvalidCallback;
        {
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        }
        function warnOnInvalidCallback(callback, callerName) {
          {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function warnOnUndefinedDerivedState(type, partialState) {
          {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          }
        }
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnAboutNoopUpdateForComponent[warningKey]) {
              return;
            }
            error("%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, callerName, componentName);
            didWarnAboutNoopUpdateForComponent[warningKey] = true;
          }
        }
        var classComponentUpdater = {
          isMounted: function(inst) {
            return false;
          },
          // $FlowFixMe[missing-local-annot]
          enqueueSetState: function(inst, payload, callback) {
            var internals = get(inst);
            if (internals.queue === null) {
              warnNoop(inst, "setState");
            } else {
              internals.queue.push(payload);
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var internals = get(inst);
            internals.replace = true;
            internals.queue = [payload];
            {
              if (callback !== void 0 && callback !== null) {
                warnOnInvalidCallback(callback, "setState");
              }
            }
          },
          // $FlowFixMe[missing-local-annot]
          enqueueForceUpdate: function(inst, callback) {
            var internals = get(inst);
            if (internals.queue === null) {
              warnNoop(inst, "forceUpdate");
            } else {
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            }
          }
        };
        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var newState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          return newState;
        }
        function constructClassInstance(ctor, props, maskedLegacyContext) {
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext$1(contextType);
          } else {
            context = maskedLegacyContext;
          }
          var instance = new ctor(props, context);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          return instance;
        }
        function checkClassInstance(instance, ctor, newProps) {
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var state = instance.state;
            if (state && (typeof state !== "object" || isArray(state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function callComponentWillMount(type, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            {
              if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDeprecatedWillMount[componentName]) {
                  warn(
                    // keep this warning in sync with ReactStrictModeWarning.js
                    "componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s",
                    componentName
                  );
                  didWarnAboutDeprecatedWillMount[componentName] = true;
                }
              }
            }
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
          if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
            var oldQueue = internalInstance.queue;
            var oldReplace = internalInstance.replace;
            internalInstance.queue = null;
            internalInstance.replace = false;
            if (oldReplace && oldQueue.length === 1) {
              inst.state = oldQueue[0];
            } else {
              var nextState = oldReplace ? oldQueue[0] : inst.state;
              var dontMutate = true;
              for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                var partial = oldQueue[i];
                var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                if (partialState != null) {
                  if (dontMutate) {
                    dontMutate = false;
                    nextState = assign({}, nextState, partialState);
                  } else {
                    assign(nextState, partialState);
                  }
                }
              }
              inst.state = nextState;
            }
          } else {
            internalInstance.queue = null;
          }
        }
        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
          {
            checkClassInstance(instance, ctor, newProps);
          }
          var initialState = instance.state !== void 0 ? instance.state : null;
          instance.updater = classComponentUpdater;
          instance.props = newProps;
          instance.state = initialState;
          var internalInstance = {
            queue: [],
            replace: false
          };
          set(instance, internalInstance);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext$1(contextType);
          } else {
            instance.context = maskedLegacyContext;
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(ctor, instance);
            processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
          }
        }
        var emptyTreeContext = {
          id: 1,
          overflow: ""
        };
        function getTreeId(context) {
          var overflow = context.overflow;
          var idWithLeadingBit = context.id;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeContext(baseContext, totalChildren, index) {
          var baseIdWithLeadingBit = baseContext.id;
          var baseOverflow = baseContext.overflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            return {
              id: 1 << restOfLength | id,
              overflow
            };
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            return {
              id: 1 << length | _id,
              overflow: _overflow
            };
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var SuspenseException = new Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`");
        function createThenableState() {
          return [];
        }
        function noop$2() {
        }
        function trackUsedThenable(thenableState2, thenable, index) {
          var previous = thenableState2[index];
          if (previous === void 0) {
            thenableState2.push(thenable);
          } else {
            if (previous !== thenable) {
              thenable.then(noop$2, noop$2);
              thenable = previous;
            }
          }
          switch (thenable.status) {
            case "fulfilled": {
              var fulfilledValue = thenable.value;
              return fulfilledValue;
            }
            case "rejected": {
              var rejectedError = thenable.reason;
              throw rejectedError;
            }
            default: {
              if (typeof thenable.status === "string")
                ;
              else {
                var pendingThenable = thenable;
                pendingThenable.status = "pending";
                pendingThenable.then(function(fulfilledValue2) {
                  if (thenable.status === "pending") {
                    var fulfilledThenable2 = thenable;
                    fulfilledThenable2.status = "fulfilled";
                    fulfilledThenable2.value = fulfilledValue2;
                  }
                }, function(error2) {
                  if (thenable.status === "pending") {
                    var rejectedThenable2 = thenable;
                    rejectedThenable2.status = "rejected";
                    rejectedThenable2.reason = error2;
                  }
                });
                switch (thenable.status) {
                  case "fulfilled": {
                    var fulfilledThenable = thenable;
                    return fulfilledThenable.value;
                  }
                  case "rejected": {
                    var rejectedThenable = thenable;
                    throw rejectedThenable.reason;
                  }
                }
              }
              suspendedThenable = thenable;
              throw SuspenseException;
            }
          }
        }
        var suspendedThenable = null;
        function getSuspendedThenable() {
          if (suspendedThenable === null) {
            throw new Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
          }
          var thenable = suspendedThenable;
          suspendedThenable = null;
          return thenable;
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = (
          // $FlowFixMe[method-unbinding]
          typeof Object.is === "function" ? Object.is : is
        );
        var currentlyRenderingComponent = null;
        var currentlyRenderingTask = null;
        var firstWorkInProgressHook = null;
        var workInProgressHook = null;
        var isReRender = false;
        var didScheduleRenderPhaseUpdate = false;
        var localIdCounter = 0;
        var thenableIndexCounter = 0;
        var thenableState = null;
        var renderPhaseUpdates = null;
        var numberOfReRenders = 0;
        var RE_RENDER_LIMIT = 25;
        var isInHookUserCodeInDev = false;
        var currentHookNameInDev;
        function resolveCurrentlyRenderingComponent() {
          if (currentlyRenderingComponent === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          {
            if (isInHookUserCodeInDev) {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            }
          }
          return currentlyRenderingComponent;
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function createHook() {
          if (numberOfReRenders > 0) {
            throw new Error("Rendered more hooks than during the previous render");
          }
          return {
            memoizedState: null,
            queue: null,
            next: null
          };
        }
        function createWorkInProgressHook() {
          if (workInProgressHook === null) {
            if (firstWorkInProgressHook === null) {
              isReRender = false;
              firstWorkInProgressHook = workInProgressHook = createHook();
            } else {
              isReRender = true;
              workInProgressHook = firstWorkInProgressHook;
            }
          } else {
            if (workInProgressHook.next === null) {
              isReRender = false;
              workInProgressHook = workInProgressHook.next = createHook();
            } else {
              isReRender = true;
              workInProgressHook = workInProgressHook.next;
            }
          }
          return workInProgressHook;
        }
        function prepareToUseHooks(task, componentIdentity, prevThenableState) {
          currentlyRenderingComponent = componentIdentity;
          currentlyRenderingTask = task;
          {
            isInHookUserCodeInDev = false;
          }
          localIdCounter = 0;
          thenableIndexCounter = 0;
          thenableState = prevThenableState;
        }
        function finishHooks(Component, props, children, refOrContext) {
          while (didScheduleRenderPhaseUpdate) {
            didScheduleRenderPhaseUpdate = false;
            localIdCounter = 0;
            thenableIndexCounter = 0;
            numberOfReRenders += 1;
            workInProgressHook = null;
            children = Component(props, refOrContext);
          }
          resetHooksState();
          return children;
        }
        function getThenableStateAfterSuspending() {
          var state = thenableState;
          thenableState = null;
          return state;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          return didRenderIdHook;
        }
        function resetHooksState() {
          {
            isInHookUserCodeInDev = false;
          }
          currentlyRenderingComponent = null;
          currentlyRenderingTask = null;
          didScheduleRenderPhaseUpdate = false;
          firstWorkInProgressHook = null;
          numberOfReRenders = 0;
          renderPhaseUpdates = null;
          workInProgressHook = null;
        }
        function readContext(context) {
          {
            if (isInHookUserCodeInDev) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          return readContext$1(context);
        }
        function useContext(context) {
          {
            currentHookNameInDev = "useContext";
          }
          resolveCurrentlyRenderingComponent();
          return readContext$1(context);
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function useState2(initialState) {
          {
            currentHookNameInDev = "useState";
          }
          return useReducer(
            basicStateReducer,
            // useReducer has a special case to support lazy useState initializers
            initialState
          );
        }
        function useReducer(reducer, initialArg, init) {
          {
            if (reducer !== basicStateReducer) {
              currentHookNameInDev = "useReducer";
            }
          }
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          if (isReRender) {
            var queue = workInProgressHook.queue;
            var dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate !== void 0) {
                renderPhaseUpdates.delete(queue);
                var newState = workInProgressHook.memoizedState;
                var update = firstRenderPhaseUpdate;
                do {
                  var action = update.action;
                  {
                    isInHookUserCodeInDev = true;
                  }
                  newState = reducer(newState, action);
                  {
                    isInHookUserCodeInDev = false;
                  }
                  update = update.next;
                } while (update !== null);
                workInProgressHook.memoizedState = newState;
                return [newState, dispatch];
              }
            }
            return [workInProgressHook.memoizedState, dispatch];
          } else {
            {
              isInHookUserCodeInDev = true;
            }
            var initialState;
            if (reducer === basicStateReducer) {
              initialState = typeof initialArg === "function" ? initialArg() : initialArg;
            } else {
              initialState = init !== void 0 ? init(initialArg) : initialArg;
            }
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = initialState;
            var _queue = workInProgressHook.queue = {
              last: null,
              dispatch: null
            };
            var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
            return [workInProgressHook.memoizedState, _dispatch];
          }
        }
        function useMemo(nextCreate, deps) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          if (workInProgressHook !== null) {
            var prevState = workInProgressHook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
          }
          {
            isInHookUserCodeInDev = true;
          }
          var nextValue = nextCreate();
          {
            isInHookUserCodeInDev = false;
          }
          workInProgressHook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function useRef(initialValue) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var previousRef = workInProgressHook.memoizedState;
          if (previousRef === null) {
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            workInProgressHook.memoizedState = ref;
            return ref;
          } else {
            return previousRef;
          }
        }
        function dispatchAction(componentIdentity, queue, action) {
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          if (componentIdentity === currentlyRenderingComponent) {
            didScheduleRenderPhaseUpdate = true;
            var update = {
              action,
              next: null
            };
            if (renderPhaseUpdates === null) {
              renderPhaseUpdates = /* @__PURE__ */ new Map();
            }
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === void 0) {
              renderPhaseUpdates.set(queue, update);
            } else {
              var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
              while (lastRenderPhaseUpdate.next !== null) {
                lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              }
              lastRenderPhaseUpdate.next = update;
            }
          }
        }
        function useCallback(callback, deps) {
          return useMemo(function() {
            return callback;
          }, deps);
        }
        function throwOnUseEffectEventCall() {
          throw new Error("A function wrapped in useEffectEvent can't be called during rendering.");
        }
        function useEffectEvent(callback) {
          return throwOnUseEffectEventCall;
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          return getServerSnapshot();
        }
        function useDeferredValue(value) {
          resolveCurrentlyRenderingComponent();
          return value;
        }
        function unsupportedStartTransition() {
          throw new Error("startTransition cannot be called during server rendering.");
        }
        function useTransition() {
          resolveCurrentlyRenderingComponent();
          return [false, unsupportedStartTransition];
        }
        function useHostTransitionStatus() {
          resolveCurrentlyRenderingComponent();
          return NotPendingTransition;
        }
        function unsupportedSetOptimisticState() {
          throw new Error("Cannot update optimistic state while rendering.");
        }
        function useOptimistic(passthrough, reducer) {
          resolveCurrentlyRenderingComponent();
          return [passthrough, unsupportedSetOptimisticState];
        }
        function useId() {
          var task = currentlyRenderingTask;
          var treeId = getTreeId(task.treeContext);
          var responseState = currentResponseState;
          if (responseState === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
          }
          var localId = localIdCounter++;
          return makeId(responseState, treeId, localId);
        }
        function use2(usable) {
          if (usable !== null && typeof usable === "object") {
            if (typeof usable.then === "function") {
              var thenable = usable;
              return unwrapThenable(thenable);
            } else if (usable.$$typeof === REACT_CONTEXT_TYPE || usable.$$typeof === REACT_SERVER_CONTEXT_TYPE) {
              var context = usable;
              return readContext(context);
            }
          }
          throw new Error("An unsupported type was passed to use(): " + String(usable));
        }
        function unwrapThenable(thenable) {
          var index = thenableIndexCounter;
          thenableIndexCounter += 1;
          if (thenableState === null) {
            thenableState = createThenableState();
          }
          return trackUsedThenable(thenableState, thenable, index);
        }
        function unsupportedRefresh() {
          throw new Error("Cache cannot be refreshed during server rendering.");
        }
        function useCacheRefresh() {
          return unsupportedRefresh;
        }
        function useMemoCache(size) {
          var data = new Array(size);
          for (var i = 0; i < size; i++) {
            data[i] = REACT_MEMO_CACHE_SENTINEL;
          }
          return data;
        }
        function noop$1() {
        }
        var HooksDispatcher = {
          readContext,
          use: use2,
          useContext,
          useMemo,
          useReducer,
          useRef,
          useState: useState2,
          useInsertionEffect: noop$1,
          useLayoutEffect: noop$1,
          useCallback,
          // useImperativeHandle is not run in the server environment
          useImperativeHandle: noop$1,
          // Effects are not run in the server environment.
          useEffect: noop$1,
          // Debugging effect
          useDebugValue: noop$1,
          useDeferredValue,
          useTransition,
          useId,
          // Subscriptions are not setup in a server environment.
          useSyncExternalStore
        };
        {
          HooksDispatcher.useCacheRefresh = useCacheRefresh;
        }
        {
          HooksDispatcher.useEffectEvent = useEffectEvent;
        }
        {
          HooksDispatcher.useMemoCache = useMemoCache;
        }
        {
          HooksDispatcher.useHostTransitionStatus = useHostTransitionStatus;
        }
        {
          HooksDispatcher.useOptimistic = useOptimistic;
        }
        var currentResponseState = null;
        function setCurrentResponseState(responseState) {
          currentResponseState = responseState;
        }
        function getCacheSignal() {
          throw new Error("Not implemented.");
        }
        function getCacheForType(resourceType) {
          throw new Error("Not implemented.");
        }
        var DefaultCacheDispatcher = {
          getCacheSignal,
          getCacheForType
        };
        function getStackByComponentStackNode(componentStack) {
          try {
            var info = "";
            var node = componentStack;
            do {
              switch (node.tag) {
                case 0:
                  info += describeBuiltInComponentFrame(node.type, null, null);
                  break;
                case 1:
                  info += describeFunctionComponentFrame(node.type, null, null);
                  break;
                case 2:
                  info += describeClassComponentFrame(node.type, null, null);
                  break;
              }
              node = node.parent;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var ReactCurrentCache = ReactSharedInternals.ReactCurrentCache;
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var PENDING = 0;
        var COMPLETED = 1;
        var FLUSHED = 2;
        var ABORTED = 3;
        var ERRORED = 4;
        var OPEN = 0;
        var CLOSING = 1;
        var CLOSED = 2;
        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
        function defaultErrorHandler(error2) {
          console["error"](error2);
          return null;
        }
        function noop() {
        }
        function createRequest(children, resources, responseState, rootFormatContext, progressiveChunkSize, onError2, onAllReady, onShellReady, onShellError, onFatalError) {
          prepareHostDispatcher();
          var pingedTasks = [];
          var abortSet = /* @__PURE__ */ new Set();
          var request = {
            destination: null,
            flushScheduled: false,
            responseState,
            progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
            status: OPEN,
            fatalError: null,
            nextSegmentId: 0,
            allPendingTasks: 0,
            pendingRootTasks: 0,
            resources,
            completedRootSegment: null,
            abortableTasks: abortSet,
            pingedTasks,
            clientRenderedBoundaries: [],
            completedBoundaries: [],
            partialBoundaries: [],
            onError: onError2 === void 0 ? defaultErrorHandler : onError2,
            onAllReady: onAllReady === void 0 ? noop : onAllReady,
            onShellReady: onShellReady === void 0 ? noop : onShellReady,
            onShellError: onShellError === void 0 ? noop : onShellError,
            onFatalError: onFatalError === void 0 ? noop : onFatalError
          };
          var rootSegment = createPendingSegment(
            request,
            0,
            null,
            rootFormatContext,
            // Root segments are never embedded in Text on either edge
            false,
            false
          );
          rootSegment.parentFlushed = true;
          var rootTask = createTask(request, null, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
          pingedTasks.push(rootTask);
          return request;
        }
        var currentRequest = null;
        function resolveRequest() {
          if (currentRequest)
            return currentRequest;
          return null;
        }
        function pingTask(request, task) {
          var pingedTasks = request.pingedTasks;
          pingedTasks.push(task);
          if (request.pingedTasks.length === 1) {
            request.flushScheduled = request.destination !== null;
            scheduleWork(function() {
              return performWork(request);
            });
          }
        }
        function createSuspenseBoundary(request, fallbackAbortableTasks) {
          return {
            id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
            rootSegmentID: -1,
            parentFlushed: false,
            pendingTasks: 0,
            forceClientRender: false,
            completedSegments: [],
            byteSize: 0,
            fallbackAbortableTasks,
            errorDigest: null,
            resources: createBoundaryResources()
          };
        }
        function createTask(request, thenableState2, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          var task = {
            node,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment,
            abortSet,
            legacyContext,
            context,
            treeContext,
            thenableState: thenableState2
          };
          {
            task.componentStack = null;
          }
          abortSet.add(task);
          return task;
        }
        function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
          return {
            status: PENDING,
            id: -1,
            // lazily assigned later
            index,
            parentFlushed: false,
            chunks: [],
            children: [],
            formatContext,
            boundary,
            lastPushedText,
            textEmbedded
          };
        }
        var currentTaskInDEV = null;
        function getCurrentStackInDEV() {
          {
            if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
              return "";
            }
            return getStackByComponentStackNode(currentTaskInDEV.componentStack);
          }
        }
        function pushBuiltInComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 0,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushFunctionComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 1,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushClassComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 2,
              parent: task.componentStack,
              type
            };
          }
        }
        function popComponentStackInDEV(task) {
          {
            if (task.componentStack === null) {
              error("Unexpectedly popped too many stack frames. This is a bug in React.");
            } else {
              task.componentStack = task.componentStack.parent;
            }
          }
        }
        var lastBoundaryErrorComponentStackDev = null;
        function captureBoundaryErrorDetailsDev(boundary, error2) {
          {
            var errorMessage;
            if (typeof error2 === "string") {
              errorMessage = error2;
            } else if (error2 && typeof error2.message === "string") {
              errorMessage = error2.message;
            } else {
              errorMessage = String(error2);
            }
            var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
            lastBoundaryErrorComponentStackDev = null;
            boundary.errorMessage = errorMessage;
            boundary.errorComponentStack = errorComponentStack;
          }
        }
        function logRecoverableError(request, error2) {
          var errorDigest = request.onError(error2);
          if (errorDigest != null && typeof errorDigest !== "string") {
            throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
          }
          return errorDigest;
        }
        function fatalError(request, error2) {
          var onShellError = request.onShellError;
          onShellError(error2);
          var onFatalError = request.onFatalError;
          onFatalError(error2);
          if (request.destination !== null) {
            request.status = CLOSED;
            closeWithError(request.destination, error2);
          } else {
            request.status = CLOSING;
            request.fatalError = error2;
          }
        }
        function renderSuspenseBoundary(request, task, props) {
          pushBuiltInComponentStackInDEV(task, "Suspense");
          var parentBoundary = task.blockedBoundary;
          var parentSegment = task.blockedSegment;
          var fallback = props.fallback;
          var content = props.children;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          var insertionIndex = parentSegment.chunks.length;
          var boundarySegment = createPendingSegment(
            request,
            insertionIndex,
            newBoundary,
            parentSegment.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          parentSegment.children.push(boundarySegment);
          parentSegment.lastPushedText = false;
          var contentRootSegment = createPendingSegment(
            request,
            0,
            null,
            parentSegment.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          contentRootSegment.parentFlushed = true;
          task.blockedBoundary = newBoundary;
          task.blockedSegment = contentRootSegment;
          {
            setCurrentlyRenderingBoundaryResourcesTarget(request.resources, newBoundary.resources);
          }
          try {
            renderNode(request, task, content);
            pushSegmentFinale(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
            contentRootSegment.status = COMPLETED;
            queueCompletedSegment(newBoundary, contentRootSegment);
            if (newBoundary.pendingTasks === 0) {
              popComponentStackInDEV(task);
              return;
            }
          } catch (error2) {
            contentRootSegment.status = ERRORED;
            newBoundary.forceClientRender = true;
            newBoundary.errorDigest = logRecoverableError(request, error2);
            {
              captureBoundaryErrorDetailsDev(newBoundary, error2);
            }
          } finally {
            {
              setCurrentlyRenderingBoundaryResourcesTarget(request.resources, parentBoundary ? parentBoundary.resources : null);
            }
            task.blockedBoundary = parentBoundary;
            task.blockedSegment = parentSegment;
          }
          var suspendedFallbackTask = createTask(request, null, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
          {
            suspendedFallbackTask.componentStack = task.componentStack;
          }
          request.pingedTasks.push(suspendedFallbackTask);
          popComponentStackInDEV(task);
        }
        function renderHostElement(request, task, type, props) {
          pushBuiltInComponentStackInDEV(task, type);
          var segment = task.blockedSegment;
          var children = pushStartInstance(segment.chunks, type, props, request.resources, request.responseState, segment.formatContext, segment.lastPushedText);
          segment.lastPushedText = false;
          var prevContext = segment.formatContext;
          segment.formatContext = getChildFormatContext(prevContext, type, props);
          renderNode(request, task, children);
          segment.formatContext = prevContext;
          pushEndInstance(segment.chunks, type, props, request.responseState, prevContext);
          segment.lastPushedText = false;
          popComponentStackInDEV(task);
        }
        function shouldConstruct(Component) {
          return Component.prototype && Component.prototype.isReactComponent;
        }
        function renderWithHooks(request, task, prevThenableState, Component, props, secondArg) {
          var componentIdentity = {};
          prepareToUseHooks(task, componentIdentity, prevThenableState);
          var result = Component(props, secondArg);
          return finishHooks(Component, props, result, secondArg);
        }
        function finishClassComponent(request, task, instance, Component, props) {
          var nextChildren = instance.render();
          {
            if (instance.props !== props) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          {
            var childContextTypes = Component.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              var previousContext = task.legacyContext;
              var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
              task.legacyContext = mergedContext;
              renderNodeDestructive(request, task, null, nextChildren);
              task.legacyContext = previousContext;
              return;
            }
          }
          renderNodeDestructive(request, task, null, nextChildren);
        }
        function renderClassComponent(request, task, Component, props) {
          pushClassComponentStackInDEV(task, Component);
          var maskedContext = getMaskedContext(Component, task.legacyContext);
          var instance = constructClassInstance(Component, props, maskedContext);
          mountClassInstance(instance, Component, props, maskedContext);
          finishClassComponent(request, task, instance, Component, props);
          popComponentStackInDEV(task);
        }
        var didWarnAboutBadClass = {};
        var didWarnAboutModulePatternComponent = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutDefaultPropsOnFunctionComponent = {};
        var didWarnAboutGenerators = false;
        var didWarnAboutMaps = false;
        var hasWarnedAboutUsingContextAsConsumer = false;
        function renderIndeterminateComponent(request, task, prevThenableState, Component, props) {
          var legacyContext;
          {
            legacyContext = getMaskedContext(Component, task.legacyContext);
          }
          pushFunctionComponentStackInDEV(task, Component);
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
          }
          var value = renderWithHooks(request, task, prevThenableState, Component, props, legacyContext);
          var hasId = checkDidRenderIdHook();
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            mountClassInstance(value, Component, props, legacyContext);
            finishClassComponent(request, task, value, Component, props);
          } else {
            {
              validateFunctionComponentInDev(Component);
            }
            if (hasId) {
              var prevTreeContext = task.treeContext;
              var totalChildren = 1;
              var index = 0;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
              try {
                renderNodeDestructive(request, task, null, value);
              } finally {
                task.treeContext = prevTreeContext;
              }
            } else {
              renderNodeDestructive(request, task, null, value);
            }
          }
          popComponentStackInDEV(task);
        }
        function validateFunctionComponentInDev(Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (Component.defaultProps !== void 0) {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function renderForwardRef(request, task, prevThenableState, type, props, ref) {
          pushFunctionComponentStackInDEV(task, type.render);
          var children = renderWithHooks(request, task, prevThenableState, type.render, props, ref);
          var hasId = checkDidRenderIdHook();
          if (hasId) {
            var prevTreeContext = task.treeContext;
            var totalChildren = 1;
            var index = 0;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
            try {
              renderNodeDestructive(request, task, null, children);
            } finally {
              task.treeContext = prevTreeContext;
            }
          } else {
            renderNodeDestructive(request, task, null, children);
          }
          popComponentStackInDEV(task);
        }
        function renderMemo(request, task, prevThenableState, type, props, ref) {
          var innerType = type.type;
          var resolvedProps = resolveDefaultProps(innerType, props);
          renderElement(request, task, prevThenableState, innerType, resolvedProps, ref);
        }
        function renderContextConsumer(request, task, context, props) {
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var render = props.children;
          {
            if (typeof render !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          var newValue = readContext$1(context);
          var newChildren = render(newValue);
          renderNodeDestructive(request, task, null, newChildren);
        }
        function renderContextProvider(request, task, type, props) {
          var context = type._context;
          var value = props.value;
          var children = props.children;
          var prevSnapshot;
          {
            prevSnapshot = task.context;
          }
          task.context = pushProvider(context, value);
          renderNodeDestructive(request, task, null, children);
          task.context = popProvider(context);
          {
            if (prevSnapshot !== task.context) {
              error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
            }
          }
        }
        function renderLazyComponent(request, task, prevThenableState, lazyComponent, props, ref) {
          pushBuiltInComponentStackInDEV(task, "Lazy");
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          var resolvedProps = resolveDefaultProps(Component, props);
          renderElement(request, task, prevThenableState, Component, resolvedProps, ref);
          popComponentStackInDEV(task);
        }
        function renderOffscreen(request, task, props) {
          var mode = props.mode;
          if (mode === "hidden")
            ;
          else {
            renderNodeDestructive(request, task, null, props.children);
          }
        }
        function renderElement(request, task, prevThenableState, type, props, ref) {
          if (typeof type === "function") {
            if (shouldConstruct(type)) {
              renderClassComponent(request, task, type, props);
              return;
            } else {
              renderIndeterminateComponent(request, task, prevThenableState, type, props);
              return;
            }
          }
          if (typeof type === "string") {
            renderHostElement(request, task, type, props);
            return;
          }
          switch (type) {
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_FRAGMENT_TYPE: {
              renderNodeDestructive(request, task, null, props.children);
              return;
            }
            case REACT_OFFSCREEN_TYPE: {
              renderOffscreen(request, task, props);
              return;
            }
            case REACT_SUSPENSE_LIST_TYPE: {
              pushBuiltInComponentStackInDEV(task, "SuspenseList");
              renderNodeDestructive(request, task, null, props.children);
              popComponentStackInDEV(task);
              return;
            }
            case REACT_SCOPE_TYPE: {
              throw new Error("ReactDOMServer does not yet support scope components.");
            }
            case REACT_SUSPENSE_TYPE: {
              {
                renderSuspenseBoundary(request, task, props);
              }
              return;
            }
          }
          if (typeof type === "object" && type !== null) {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE: {
                renderForwardRef(request, task, prevThenableState, type, props, ref);
                return;
              }
              case REACT_MEMO_TYPE: {
                renderMemo(request, task, prevThenableState, type, props, ref);
                return;
              }
              case REACT_PROVIDER_TYPE: {
                renderContextProvider(request, task, type, props);
                return;
              }
              case REACT_CONTEXT_TYPE: {
                renderContextConsumer(request, task, type, props);
                return;
              }
              case REACT_LAZY_TYPE: {
                renderLazyComponent(request, task, prevThenableState, type, props);
                return;
              }
            }
          }
          var info = "";
          {
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
          }
          throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        function validateIterable(iterable, iteratorFn) {
          {
            if (typeof Symbol === "function" && iterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (iterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
          }
        }
        function renderNodeDestructive(request, task, prevThenableState, node) {
          {
            try {
              return renderNodeDestructiveImpl(request, task, prevThenableState, node);
            } catch (x) {
              if (typeof x === "object" && x !== null && typeof x.then === "function")
                ;
              else {
                lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();
              }
              throw x;
            }
          }
        }
        function renderNodeDestructiveImpl(request, task, prevThenableState, node) {
          task.node = node;
          if (typeof node === "object" && node !== null) {
            switch (node.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var element = node;
                var type = element.type;
                var props = element.props;
                var ref = element.ref;
                renderElement(request, task, prevThenableState, type, props, ref);
                return;
              }
              case REACT_PORTAL_TYPE:
                throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
              case REACT_LAZY_TYPE: {
                var lazyNode = node;
                var payload = lazyNode._payload;
                var init = lazyNode._init;
                var resolvedNode;
                {
                  try {
                    resolvedNode = init(payload);
                  } catch (x) {
                    if (typeof x === "object" && x !== null && typeof x.then === "function") {
                      pushBuiltInComponentStackInDEV(task, "Lazy");
                    }
                    throw x;
                  }
                }
                renderNodeDestructive(request, task, null, resolvedNode);
                return;
              }
            }
            if (isArray(node)) {
              renderChildrenArray(request, task, node);
              return;
            }
            var iteratorFn = getIteratorFn(node);
            if (iteratorFn) {
              {
                validateIterable(node, iteratorFn);
              }
              var iterator = iteratorFn.call(node);
              if (iterator) {
                var step = iterator.next();
                if (!step.done) {
                  var children = [];
                  do {
                    children.push(step.value);
                    step = iterator.next();
                  } while (!step.done);
                  renderChildrenArray(request, task, children);
                  return;
                }
                return;
              }
            }
            var maybeUsable = node;
            if (typeof maybeUsable.then === "function") {
              var thenable = maybeUsable;
              return renderNodeDestructiveImpl(request, task, null, unwrapThenable(thenable));
            }
            if (maybeUsable.$$typeof === REACT_CONTEXT_TYPE || maybeUsable.$$typeof === REACT_SERVER_CONTEXT_TYPE) {
              var context = maybeUsable;
              return renderNodeDestructiveImpl(request, task, null, readContext$1(context));
            }
            var childString = Object.prototype.toString.call(node);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          if (typeof node === "string") {
            var segment = task.blockedSegment;
            segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
            return;
          }
          if (typeof node === "number") {
            var _segment = task.blockedSegment;
            _segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
            return;
          }
          {
            if (typeof node === "function") {
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
        }
        function renderChildrenArray(request, task, children) {
          var totalChildren = children.length;
          for (var i = 0; i < totalChildren; i++) {
            var prevTreeContext = task.treeContext;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
            try {
              renderNode(request, task, children[i]);
            } finally {
              task.treeContext = prevTreeContext;
            }
          }
        }
        function spawnNewSuspendedTask(request, task, thenableState2, x) {
          var segment = task.blockedSegment;
          var insertionIndex = segment.chunks.length;
          var newSegment = createPendingSegment(
            request,
            insertionIndex,
            null,
            segment.formatContext,
            // Adopt the parent segment's leading text embed
            segment.lastPushedText,
            // Assume we are text embedded at the trailing edge
            true
          );
          segment.children.push(newSegment);
          segment.lastPushedText = false;
          var newTask = createTask(request, thenableState2, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
          {
            if (task.componentStack !== null) {
              newTask.componentStack = task.componentStack.parent;
            }
          }
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function renderNode(request, task, node) {
          var segment = task.blockedSegment;
          var childrenLength = segment.children.length;
          var chunkLength = segment.chunks.length;
          var previousFormatContext = task.blockedSegment.formatContext;
          var previousLegacyContext = task.legacyContext;
          var previousContext = task.context;
          var previousComponentStack = null;
          {
            previousComponentStack = task.componentStack;
          }
          try {
            return renderNodeDestructive(request, task, null, node);
          } catch (thrownValue) {
            resetHooksState();
            segment.children.length = childrenLength;
            segment.chunks.length = chunkLength;
            var x = thrownValue === SuspenseException ? (
              // This is a special type of exception used for Suspense. For historical
              // reasons, the rest of the Suspense implementation expects the thrown
              // value to be a thenable, because before `use` existed that was the
              // (unstable) API for suspending. This implementation detail can change
              // later, once we deprecate the old API in favor of `use`.
              getSuspendedThenable()
            ) : thrownValue;
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              var wakeable = x;
              var thenableState2 = getThenableStateAfterSuspending();
              spawnNewSuspendedTask(request, task, thenableState2, wakeable);
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              return;
            } else {
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              throw x;
            }
          }
        }
        function erroredTask(request, boundary, segment, error2) {
          var errorDigest = logRecoverableError(request, error2);
          if (boundary === null) {
            fatalError(request, error2);
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              boundary.errorDigest = errorDigest;
              {
                captureBoundaryErrorDetailsDev(boundary, error2);
              }
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function abortTaskSoft(task) {
          var request = this;
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          finishedTask(request, boundary, segment);
        }
        function abortTask(task, request, error2) {
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          if (boundary === null) {
            request.allPendingTasks--;
            if (request.status !== CLOSING && request.status !== CLOSED) {
              logRecoverableError(request, error2);
              fatalError(request, error2);
            }
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              boundary.errorDigest = request.onError(error2);
              {
                var errorPrefix = "The server did not finish this Suspense boundary: ";
                var errorMessage;
                if (error2 && typeof error2.message === "string") {
                  errorMessage = errorPrefix + error2.message;
                } else {
                  errorMessage = errorPrefix + String(error2);
                }
                var previousTaskInDev = currentTaskInDEV;
                currentTaskInDEV = task;
                try {
                  captureBoundaryErrorDetailsDev(boundary, errorMessage);
                } finally {
                  currentTaskInDEV = previousTaskInDev;
                }
              }
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
              return abortTask(fallbackTask, request, error2);
            });
            boundary.fallbackAbortableTasks.clear();
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
        }
        function queueCompletedSegment(boundary, segment) {
          if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
            var childSegment = segment.children[0];
            childSegment.id = segment.id;
            childSegment.parentFlushed = true;
            if (childSegment.status === COMPLETED) {
              queueCompletedSegment(boundary, childSegment);
            }
          } else {
            var completedSegments = boundary.completedSegments;
            completedSegments.push(segment);
          }
        }
        function finishedTask(request, boundary, segment) {
          if (boundary === null) {
            if (segment.parentFlushed) {
              if (request.completedRootSegment !== null) {
                throw new Error("There can only be one root segment. This is a bug in React.");
              }
              request.completedRootSegment = segment;
            }
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              request.onShellError = noop;
              var onShellReady = request.onShellReady;
              onShellReady();
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.forceClientRender)
              ;
            else if (boundary.pendingTasks === 0) {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                }
              }
              if (boundary.parentFlushed) {
                request.completedBoundaries.push(boundary);
              }
              boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
              boundary.fallbackAbortableTasks.clear();
            } else {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                  var completedSegments = boundary.completedSegments;
                  if (completedSegments.length === 1) {
                    if (boundary.parentFlushed) {
                      request.partialBoundaries.push(boundary);
                    }
                  }
                }
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function retryTask(request, task) {
          {
            var blockedBoundary = task.blockedBoundary;
            setCurrentlyRenderingBoundaryResourcesTarget(request.resources, blockedBoundary ? blockedBoundary.resources : null);
          }
          var segment = task.blockedSegment;
          if (segment.status !== PENDING) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          var childrenLength = segment.children.length;
          var chunkLength = segment.chunks.length;
          try {
            var prevThenableState = task.thenableState;
            task.thenableState = null;
            renderNodeDestructive(request, task, prevThenableState, task.node);
            pushSegmentFinale(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded);
            task.abortSet.delete(task);
            segment.status = COMPLETED;
            finishedTask(request, task.blockedBoundary, segment);
          } catch (thrownValue) {
            resetHooksState();
            segment.children.length = childrenLength;
            segment.chunks.length = chunkLength;
            var x = thrownValue === SuspenseException ? (
              // This is a special type of exception used for Suspense. For historical
              // reasons, the rest of the Suspense implementation expects the thrown
              // value to be a thenable, because before `use` existed that was the
              // (unstable) API for suspending. This implementation detail can change
              // later, once we deprecate the old API in favor of `use`.
              getSuspendedThenable()
            ) : thrownValue;
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              var ping = task.ping;
              x.then(ping, ping);
              task.thenableState = getThenableStateAfterSuspending();
            } else {
              task.abortSet.delete(task);
              segment.status = ERRORED;
              erroredTask(request, task.blockedBoundary, segment, x);
            }
          } finally {
            {
              setCurrentlyRenderingBoundaryResourcesTarget(request.resources, null);
            }
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function performWork(request) {
          if (request.status === CLOSED) {
            return;
          }
          var prevContext = getActiveContext();
          var prevDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = HooksDispatcher;
          var prevCacheDispatcher;
          {
            prevCacheDispatcher = ReactCurrentCache.current;
            ReactCurrentCache.current = DefaultCacheDispatcher;
          }
          var prevRequest = currentRequest;
          currentRequest = request;
          var prevGetCurrentStackImpl;
          {
            prevGetCurrentStackImpl = ReactDebugCurrentFrame.getCurrentStack;
            ReactDebugCurrentFrame.getCurrentStack = getCurrentStackInDEV;
          }
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks;
            var i;
            for (i = 0; i < pingedTasks.length; i++) {
              var task = pingedTasks[i];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i);
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          } finally {
            setCurrentResponseState(prevResponseState);
            ReactCurrentDispatcher.current = prevDispatcher;
            {
              ReactCurrentCache.current = prevCacheDispatcher;
            }
            {
              ReactDebugCurrentFrame.getCurrentStack = prevGetCurrentStackImpl;
            }
            if (prevDispatcher === HooksDispatcher) {
              switchContext(prevContext);
            }
            currentRequest = prevRequest;
          }
        }
        function flushSubtree(request, destination, segment) {
          segment.parentFlushed = true;
          switch (segment.status) {
            case PENDING: {
              var segmentID = segment.id = request.nextSegmentId++;
              segment.lastPushedText = false;
              segment.textEmbedded = false;
              return writePlaceholder(destination, request.responseState, segmentID);
            }
            case COMPLETED: {
              segment.status = FLUSHED;
              var r = true;
              var chunks = segment.chunks;
              var chunkIdx = 0;
              var children = segment.children;
              for (var childIdx = 0; childIdx < children.length; childIdx++) {
                var nextChild = children[childIdx];
                for (; chunkIdx < nextChild.index; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                r = flushSegment(request, destination, nextChild);
              }
              for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                writeChunk(destination, chunks[chunkIdx]);
              }
              if (chunkIdx < chunks.length) {
                r = writeChunkAndReturn(destination, chunks[chunkIdx]);
              }
              return r;
            }
            default: {
              throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
            }
          }
        }
        function flushSegment(request, destination, segment) {
          var boundary = segment.boundary;
          if (boundary === null) {
            return flushSubtree(request, destination, segment);
          }
          boundary.parentFlushed = true;
          if (boundary.forceClientRender) {
            writeStartClientRenderedSuspenseBoundary(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
            flushSubtree(request, destination, segment);
            return writeEndClientRenderedSuspenseBoundary(destination, request.responseState);
          } else if (boundary.pendingTasks > 0) {
            boundary.rootSegmentID = request.nextSegmentId++;
            if (boundary.completedSegments.length > 0) {
              request.partialBoundaries.push(boundary);
            }
            var id = boundary.id = assignSuspenseBoundaryID(request.responseState);
            writeStartPendingSuspenseBoundary(destination, request.responseState, id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination);
          } else if (boundary.byteSize > request.progressiveChunkSize) {
            boundary.rootSegmentID = request.nextSegmentId++;
            request.completedBoundaries.push(boundary);
            writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination);
          } else {
            {
              hoistResources(request.resources, boundary.resources);
            }
            writeStartCompletedSuspenseBoundary(destination, request.responseState);
            var completedSegments = boundary.completedSegments;
            if (completedSegments.length !== 1) {
              throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
            }
            var contentSegment = completedSegments[0];
            flushSegment(request, destination, contentSegment);
            return writeEndCompletedSuspenseBoundary(destination, request.responseState);
          }
        }
        function flushClientRenderedBoundary(request, destination, boundary) {
          return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
        }
        function flushSegmentContainer(request, destination, segment) {
          writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);
          flushSegment(request, destination, segment);
          return writeEndSegment(destination, segment.formatContext);
        }
        function flushCompletedBoundary(request, destination, boundary) {
          {
            setCurrentlyRenderingBoundaryResourcesTarget(request.resources, boundary.resources);
          }
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            flushPartiallyCompletedSegment(request, destination, boundary, segment);
          }
          completedSegments.length = 0;
          {
            writeResourcesForBoundary(destination, boundary.resources, request.responseState);
          }
          return writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID, boundary.resources);
        }
        function flushPartialBoundary(request, destination, boundary) {
          {
            setCurrentlyRenderingBoundaryResourcesTarget(request.resources, boundary.resources);
          }
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
              i++;
              completedSegments.splice(0, i);
              return false;
            }
          }
          completedSegments.splice(0, i);
          {
            return writeResourcesForBoundary(destination, boundary.resources, request.responseState);
          }
        }
        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
          if (segment.status === FLUSHED) {
            return true;
          }
          var segmentID = segment.id;
          if (segmentID === -1) {
            var rootSegmentID = segment.id = boundary.rootSegmentID;
            if (rootSegmentID === -1) {
              throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
            }
            return flushSegmentContainer(request, destination, segment);
          } else {
            flushSegmentContainer(request, destination, segment);
            return writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
          }
        }
        function flushCompletedQueues(request, destination) {
          try {
            var i;
            var completedRootSegment = request.completedRootSegment;
            if (completedRootSegment !== null) {
              if (request.pendingRootTasks === 0) {
                if (enableFloat) {
                  writePreamble(destination, request.resources, request.responseState, request.allPendingTasks === 0);
                }
                flushSegment(request, destination, completedRootSegment);
                request.completedRootSegment = null;
                writeCompletedRoot(destination, request.responseState);
              } else {
                return;
              }
            } else if (request.pendingRootTasks > 0) {
              return;
            }
            if (enableFloat) {
              writeHoistables(destination, request.resources, request.responseState);
            }
            var clientRenderedBoundaries = request.clientRenderedBoundaries;
            for (i = 0; i < clientRenderedBoundaries.length; i++) {
              var boundary = clientRenderedBoundaries[i];
              if (!flushClientRenderedBoundary(request, destination, boundary)) {
                request.destination = null;
                i++;
                clientRenderedBoundaries.splice(0, i);
                return;
              }
            }
            clientRenderedBoundaries.splice(0, i);
            var completedBoundaries = request.completedBoundaries;
            for (i = 0; i < completedBoundaries.length; i++) {
              var _boundary = completedBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary)) {
                request.destination = null;
                i++;
                completedBoundaries.splice(0, i);
                return;
              }
            }
            completedBoundaries.splice(0, i);
            completeWriting(destination);
            beginWriting(destination);
            var partialBoundaries = request.partialBoundaries;
            for (i = 0; i < partialBoundaries.length; i++) {
              var _boundary2 = partialBoundaries[i];
              if (!flushPartialBoundary(request, destination, _boundary2)) {
                request.destination = null;
                i++;
                partialBoundaries.splice(0, i);
                return;
              }
            }
            partialBoundaries.splice(0, i);
            var largeBoundaries = request.completedBoundaries;
            for (i = 0; i < largeBoundaries.length; i++) {
              var _boundary3 = largeBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary3)) {
                request.destination = null;
                i++;
                largeBoundaries.splice(0, i);
                return;
              }
            }
            largeBoundaries.splice(0, i);
          } finally {
            if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
              request.flushScheduled = false;
              {
                writePostamble(destination, request.responseState);
              }
              {
                if (request.abortableTasks.size !== 0) {
                  error("There was still abortable task at the root when we closed. This is a bug in React.");
                }
              }
              close(destination);
            }
          }
        }
        function startWork(request) {
          request.flushScheduled = request.destination !== null;
          {
            scheduleWork(function() {
              return performWork(request);
            });
          }
        }
        function enqueueFlush(request) {
          if (request.flushScheduled === false && // If there are pinged tasks we are going to flush anyway after work completes
          request.pingedTasks.length === 0 && // If there is no destination there is nothing we can flush to. A flush will
          // happen when we start flowing again
          request.destination !== null) {
            var destination = request.destination;
            request.flushScheduled = true;
            scheduleWork(function() {
              return flushCompletedQueues(request, destination);
            });
          }
        }
        function startFlowing(request, destination) {
          if (request.status === CLOSING) {
            request.status = CLOSED;
            closeWithError(destination, request.fatalError);
            return;
          }
          if (request.status === CLOSED) {
            return;
          }
          if (request.destination !== null) {
            return;
          }
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          }
        }
        function abort(request, reason) {
          try {
            var abortableTasks = request.abortableTasks;
            if (abortableTasks.size > 0) {
              var error2 = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
              abortableTasks.forEach(function(task) {
                return abortTask(task, request, error2);
              });
              abortableTasks.clear();
            }
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error3) {
            logRecoverableError(request, error3);
            fatalError(request, error3);
          }
        }
        function flushResources(request) {
          enqueueFlush(request);
        }
        function getResources(request) {
          return request.resources;
        }
        function onError$1() {
        }
        function renderToStringImpl(children, options, generateStaticMarkup, abortReason, unstable_externalRuntimeSrc) {
          var didFatal = false;
          var fatalError2 = null;
          var result = "";
          var destination = {
            // $FlowFixMe[missing-local-annot]
            push: function(chunk) {
              if (chunk !== null) {
                result += chunk;
              }
              return true;
            },
            // $FlowFixMe[missing-local-annot]
            destroy: function(error2) {
              didFatal = true;
              fatalError2 = error2;
            }
          };
          var readyToStream = false;
          function onShellReady() {
            readyToStream = true;
          }
          var resources = createResources();
          var request = createRequest(children, resources, createResponseState(resources, generateStaticMarkup, options ? options.identifierPrefix : void 0, unstable_externalRuntimeSrc), createRootFormatContext(), Infinity, onError$1, void 0, onShellReady, void 0, void 0);
          startWork(request);
          abort(request, abortReason);
          startFlowing(request, destination);
          if (didFatal && fatalError2 !== abortReason) {
            throw fatalError2;
          }
          if (!readyToStream) {
            throw new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          }
          return result;
        }
        var ReactMarkupReadableStream = /* @__PURE__ */ function(_Readable) {
          _inheritsLoose(ReactMarkupReadableStream2, _Readable);
          function ReactMarkupReadableStream2() {
            var _this;
            _this = _Readable.call(this, {}) || this;
            _this.request = void 0;
            _this.startedFlowing = void 0;
            _this.request = null;
            _this.startedFlowing = false;
            return _this;
          }
          var _proto = ReactMarkupReadableStream2.prototype;
          _proto._destroy = function _destroy(err, callback) {
            abort(this.request);
            callback(err);
          };
          _proto._read = function _read(size) {
            if (this.startedFlowing) {
              startFlowing(this.request, this);
            }
          };
          return ReactMarkupReadableStream2;
        }(stream.Readable);
        function onError() {
        }
        function renderToNodeStreamImpl(children, options, generateStaticMarkup) {
          function onAllReady() {
            destination.startedFlowing = true;
            startFlowing(request, destination);
          }
          var destination = new ReactMarkupReadableStream();
          var resources = createResources();
          var request = createRequest(children, resources, createResponseState(resources, false, options ? options.identifierPrefix : void 0), createRootFormatContext(), Infinity, onError, onAllReady, void 0, void 0);
          destination.request = request;
          startWork(request);
          return destination;
        }
        function renderToNodeStream(children, options) {
          {
            error("renderToNodeStream is deprecated. Use renderToPipeableStream instead.");
          }
          return renderToNodeStreamImpl(children, options);
        }
        function renderToStaticNodeStream(children, options) {
          return renderToNodeStreamImpl(children, options);
        }
        function renderToString(children, options) {
          return renderToStringImpl(children, options, false, 'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server');
        }
        function renderToStaticMarkup(children, options) {
          return renderToStringImpl(children, options, true, 'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server');
        }
        exports.renderToNodeStream = renderToNodeStream;
        exports.renderToStaticMarkup = renderToStaticMarkup;
        exports.renderToStaticNodeStream = renderToStaticNodeStream;
        exports.renderToString = renderToString;
        exports.version = ReactVersion;
      })();
    }
  }
});

// node_modules/react-dom/cjs/react-dom-server.node.development.js
var require_react_dom_server_node_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server.node.development.js"(exports) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var React = require_react();
        var util = require("util");
        var async_hooks = require("async_hooks");
        var ReactDOM = require_react_dom();
        var ReactVersion = "18.3.0-experimental-a1c62b8a7-20230627";
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function scheduleWork(callback) {
          setImmediate(callback);
        }
        function flushBuffered(destination) {
          if (typeof destination.flush === "function") {
            destination.flush();
          }
        }
        var VIEW_SIZE = 2048;
        var currentView = null;
        var writtenBytes = 0;
        var destinationHasCapacity$1 = true;
        function beginWriting(destination) {
          currentView = new Uint8Array(VIEW_SIZE);
          writtenBytes = 0;
          destinationHasCapacity$1 = true;
        }
        function writeStringChunk(destination, stringChunk) {
          if (stringChunk.length === 0) {
            return;
          }
          if (stringChunk.length * 3 > VIEW_SIZE) {
            if (writtenBytes > 0) {
              writeToDestination(destination, currentView.subarray(0, writtenBytes));
              currentView = new Uint8Array(VIEW_SIZE);
              writtenBytes = 0;
            }
            writeToDestination(destination, textEncoder.encode(stringChunk));
            return;
          }
          var target = currentView;
          if (writtenBytes > 0) {
            target = currentView.subarray(writtenBytes);
          }
          var _textEncoder$encodeIn = textEncoder.encodeInto(stringChunk, target), read = _textEncoder$encodeIn.read, written = _textEncoder$encodeIn.written;
          writtenBytes += written;
          if (read < stringChunk.length) {
            writeToDestination(destination, currentView.subarray(0, writtenBytes));
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = textEncoder.encodeInto(stringChunk.slice(read), currentView).written;
          }
          if (writtenBytes === VIEW_SIZE) {
            writeToDestination(destination, currentView);
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
          }
        }
        function writeViewChunk(destination, chunk) {
          if (chunk.byteLength === 0) {
            return;
          }
          if (chunk.byteLength > VIEW_SIZE) {
            {
              if (precomputedChunkSet && precomputedChunkSet.has(chunk)) {
                error('A large precomputed chunk was passed to writeChunk without being copied. Large chunks get enqueued directly and are not copied. This is incompatible with precomputed chunks because you cannot enqueue the same precomputed chunk twice. Use "cloneChunk" to make a copy of this large precomputed chunk before writing it. This is a bug in React.');
              }
            }
            if (writtenBytes > 0) {
              writeToDestination(destination, currentView.subarray(0, writtenBytes));
              currentView = new Uint8Array(VIEW_SIZE);
              writtenBytes = 0;
            }
            writeToDestination(destination, chunk);
            return;
          }
          var bytesToWrite = chunk;
          var allowableBytes = currentView.length - writtenBytes;
          if (allowableBytes < bytesToWrite.byteLength) {
            if (allowableBytes === 0) {
              writeToDestination(destination, currentView);
            } else {
              currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes);
              writtenBytes += allowableBytes;
              writeToDestination(destination, currentView);
              bytesToWrite = bytesToWrite.subarray(allowableBytes);
            }
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
          }
          currentView.set(bytesToWrite, writtenBytes);
          writtenBytes += bytesToWrite.byteLength;
          if (writtenBytes === VIEW_SIZE) {
            writeToDestination(destination, currentView);
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
          }
        }
        function writeChunk(destination, chunk) {
          if (typeof chunk === "string") {
            writeStringChunk(destination, chunk);
          } else {
            writeViewChunk(destination, chunk);
          }
        }
        function writeToDestination(destination, view) {
          var currentHasCapacity = destination.write(view);
          destinationHasCapacity$1 = destinationHasCapacity$1 && currentHasCapacity;
        }
        function writeChunkAndReturn(destination, chunk) {
          writeChunk(destination, chunk);
          return destinationHasCapacity$1;
        }
        function completeWriting(destination) {
          if (currentView && writtenBytes > 0) {
            destination.write(currentView.subarray(0, writtenBytes));
          }
          currentView = null;
          writtenBytes = 0;
          destinationHasCapacity$1 = true;
        }
        function close(destination) {
          destination.end();
        }
        var textEncoder = new util.TextEncoder();
        function stringToChunk(content) {
          return content;
        }
        var precomputedChunkSet = /* @__PURE__ */ new Set();
        function stringToPrecomputedChunk(content) {
          var precomputedChunk = textEncoder.encode(content);
          {
            if (precomputedChunkSet) {
              precomputedChunkSet.add(precomputedChunk);
            }
          }
          return precomputedChunk;
        }
        function clonePrecomputedChunk(precomputedChunk) {
          return precomputedChunk.length > VIEW_SIZE ? precomputedChunk.slice() : precomputedChunk;
        }
        function closeWithError(destination, error2) {
          destination.destroy(error2);
        }
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        var assign = Object.assign;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var enableFloat = true;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        var unitlessNumbers = /* @__PURE__ */ new Set([
          "animationIterationCount",
          "aspectRatio",
          "borderImageOutset",
          "borderImageSlice",
          "borderImageWidth",
          "boxFlex",
          "boxFlexGroup",
          "boxOrdinalGroup",
          "columnCount",
          "columns",
          "flex",
          "flexGrow",
          "flexPositive",
          "flexShrink",
          "flexNegative",
          "flexOrder",
          "gridArea",
          "gridRow",
          "gridRowEnd",
          "gridRowSpan",
          "gridRowStart",
          "gridColumn",
          "gridColumnEnd",
          "gridColumnSpan",
          "gridColumnStart",
          "fontWeight",
          "lineClamp",
          "lineHeight",
          "opacity",
          "order",
          "orphans",
          "scale",
          "tabSize",
          "widows",
          "zIndex",
          "zoom",
          "fillOpacity",
          // SVG-related properties
          "floodOpacity",
          "stopOpacity",
          "strokeDasharray",
          "strokeDashoffset",
          "strokeMiterlimit",
          "strokeOpacity",
          "strokeWidth",
          "MozAnimationIterationCount",
          // Known Prefixed Properties
          "MozBoxFlex",
          // TODO: Remove these since they shouldn't be used in modern code
          "MozBoxFlexGroup",
          "MozLineClamp",
          "msAnimationIterationCount",
          "msFlex",
          "msZoom",
          "msFlexGrow",
          "msFlexNegative",
          "msFlexOrder",
          "msFlexPositive",
          "msFlexShrink",
          "msGridColumn",
          "msGridColumnSpan",
          "msGridRow",
          "msGridRowSpan",
          "WebkitAnimationIterationCount",
          "WebkitBoxFlex",
          "WebKitBoxFlexGroup",
          "WebkitBoxOrdinalGroup",
          "WebkitColumnCount",
          "WebkitColumns",
          "WebkitFlex",
          "WebkitFlexGrow",
          "WebkitFlexPositive",
          "WebkitFlexShrink",
          "WebkitLineClamp"
        ]);
        function isUnitlessNumber(name) {
          return unitlessNumbers.has(name);
        }
        var aliases = /* @__PURE__ */ new Map([
          ["acceptCharset", "accept-charset"],
          ["htmlFor", "for"],
          ["httpEquiv", "http-equiv"],
          // HTML and SVG attributes, but the SVG attribute is case sensitive.],
          ["crossOrigin", "crossorigin"],
          // This is a list of all SVG attributes that need special casing.
          // Regular attributes that just accept strings.],
          ["accentHeight", "accent-height"],
          ["alignmentBaseline", "alignment-baseline"],
          ["arabicForm", "arabic-form"],
          ["baselineShift", "baseline-shift"],
          ["capHeight", "cap-height"],
          ["clipPath", "clip-path"],
          ["clipRule", "clip-rule"],
          ["colorInterpolation", "color-interpolation"],
          ["colorInterpolationFilters", "color-interpolation-filters"],
          ["colorProfile", "color-profile"],
          ["colorRendering", "color-rendering"],
          ["dominantBaseline", "dominant-baseline"],
          ["enableBackground", "enable-background"],
          ["fillOpacity", "fill-opacity"],
          ["fillRule", "fill-rule"],
          ["floodColor", "flood-color"],
          ["floodOpacity", "flood-opacity"],
          ["fontFamily", "font-family"],
          ["fontSize", "font-size"],
          ["fontSizeAdjust", "font-size-adjust"],
          ["fontStretch", "font-stretch"],
          ["fontStyle", "font-style"],
          ["fontVariant", "font-variant"],
          ["fontWeight", "font-weight"],
          ["glyphName", "glyph-name"],
          ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
          ["glyphOrientationVertical", "glyph-orientation-vertical"],
          ["horizAdvX", "horiz-adv-x"],
          ["horizOriginX", "horiz-origin-x"],
          ["imageRendering", "image-rendering"],
          ["letterSpacing", "letter-spacing"],
          ["lightingColor", "lighting-color"],
          ["markerEnd", "marker-end"],
          ["markerMid", "marker-mid"],
          ["markerStart", "marker-start"],
          ["overlinePosition", "overline-position"],
          ["overlineThickness", "overline-thickness"],
          ["paintOrder", "paint-order"],
          ["panose-1", "panose-1"],
          ["pointerEvents", "pointer-events"],
          ["renderingIntent", "rendering-intent"],
          ["shapeRendering", "shape-rendering"],
          ["stopColor", "stop-color"],
          ["stopOpacity", "stop-opacity"],
          ["strikethroughPosition", "strikethrough-position"],
          ["strikethroughThickness", "strikethrough-thickness"],
          ["strokeDasharray", "stroke-dasharray"],
          ["strokeDashoffset", "stroke-dashoffset"],
          ["strokeLinecap", "stroke-linecap"],
          ["strokeLinejoin", "stroke-linejoin"],
          ["strokeMiterlimit", "stroke-miterlimit"],
          ["strokeOpacity", "stroke-opacity"],
          ["strokeWidth", "stroke-width"],
          ["textAnchor", "text-anchor"],
          ["textDecoration", "text-decoration"],
          ["textRendering", "text-rendering"],
          ["transformOrigin", "transform-origin"],
          ["underlinePosition", "underline-position"],
          ["underlineThickness", "underline-thickness"],
          ["unicodeBidi", "unicode-bidi"],
          ["unicodeRange", "unicode-range"],
          ["unitsPerEm", "units-per-em"],
          ["vAlphabetic", "v-alphabetic"],
          ["vHanging", "v-hanging"],
          ["vIdeographic", "v-ideographic"],
          ["vMathematical", "v-mathematical"],
          ["vectorEffect", "vector-effect"],
          ["vertAdvY", "vert-adv-y"],
          ["vertOriginX", "vert-origin-x"],
          ["vertOriginY", "vert-origin-y"],
          ["wordSpacing", "word-spacing"],
          ["writingMode", "writing-mode"],
          ["xmlnsXlink", "xmlns:xlink"],
          ["xHeight", "x-height"]
        ]);
        function getAttributeAlias(name) {
          return aliases.get(name) || name;
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties$1 = {};
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty$1(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            if (rARIACamel$1.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties$1[name] = true;
                return true;
              }
            }
            if (rARIA$1.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties$1[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function validateProperties$2(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        function isCustomElement(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return false;
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          fetchpriority: "fetchPriority",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          transformorigin: "transformOrigin",
          "transform-origin": "transformOrigin",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var warnedProperties = {};
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name, value, eventRegistry) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties[name] = true;
              return true;
            }
            {
              if (typeof value === "function") {
                if (tagName === "form" && name === "action") {
                  return true;
                }
                if (tagName === "input" && name === "formAction") {
                  return true;
                }
                if (tagName === "button" && name === "formAction") {
                  return true;
                }
              }
            }
            if (eventRegistry != null) {
              var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties[name] = true;
              return true;
            }
            if (rARIA.test(name) || rARIACamel.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            } else if (name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties[name] = true;
              return true;
            }
            switch (name) {
              case "dangerouslySetInnerHTML":
              case "children":
              case "style":
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
              case "defaultValue":
              case "defaultChecked":
              case "innerHTML": {
                return true;
              }
              case "innerText":
              case "textContent": {
                return true;
              }
            }
            switch (typeof value) {
              case "boolean": {
                switch (name) {
                  case "autoFocus":
                  case "checked":
                  case "multiple":
                  case "muted":
                  case "selected":
                  case "contentEditable":
                  case "spellCheck":
                  case "draggable":
                  case "value":
                  case "autoReverse":
                  case "externalResourcesRequired":
                  case "focusable":
                  case "preserveAlpha":
                  case "allowFullScreen":
                  case "async":
                  case "autoPlay":
                  case "controls":
                  case "default":
                  case "defer":
                  case "disabled":
                  case "disablePictureInPicture":
                  case "disableRemotePlayback":
                  case "formNoValidate":
                  case "hidden":
                  case "loop":
                  case "noModule":
                  case "noValidate":
                  case "open":
                  case "playsInline":
                  case "readOnly":
                  case "required":
                  case "reversed":
                  case "scoped":
                  case "seamless":
                  case "itemScope":
                  case "capture":
                  case "download": {
                    return true;
                  }
                  default: {
                    var prefix2 = name.toLowerCase().slice(0, 5);
                    if (prefix2 === "data-" || prefix2 === "aria-") {
                      return true;
                    }
                    if (value) {
                      error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                    } else {
                      error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                    }
                    warnedProperties[name] = true;
                    return true;
                  }
                }
              }
              case "function":
              case "symbol":
                warnedProperties[name] = true;
                return false;
              case "string": {
                if (value === "false" || value === "true") {
                  switch (name) {
                    case "checked":
                    case "selected":
                    case "multiple":
                    case "muted":
                    case "allowFullScreen":
                    case "async":
                    case "autoPlay":
                    case "controls":
                    case "default":
                    case "defer":
                    case "disabled":
                    case "disablePictureInPicture":
                    case "disableRemotePlayback":
                    case "formNoValidate":
                    case "hidden":
                    case "loop":
                    case "noModule":
                    case "noValidate":
                    case "open":
                    case "playsInline":
                    case "readOnly":
                    case "required":
                    case "reversed":
                    case "scoped":
                    case "seamless":
                    case "itemScope": {
                      break;
                    }
                    default: {
                      return true;
                    }
                  }
                  error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
        }
        function warnUnknownProperties(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props, eventRegistry) {
          if (isCustomElement(type) || typeof props.is === "string") {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        function camelize(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }
        function warnHyphenatedStyleName(name) {
          {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern$1, "ms-"))
            );
          }
        }
        function warnBadVendoredStyleName(name) {
          {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          }
        }
        function warnStyleValueWithSemicolon(name, value) {
          {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          }
        }
        function warnStyleValueIsNaN(name, value) {
          {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          }
        }
        function warnStyleValueIsInfinity(name, value) {
          {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          }
        }
        function warnValidStyle(name, value) {
          {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name);
              }
            }
          }
        }
        var matchHtmlRegExp = /["'&<>]/;
        function escapeHtml(string) {
          {
            checkHtmlStringCoercion(string);
          }
          var str = "" + string;
          var match = matchHtmlRegExp.exec(str);
          if (!match) {
            return str;
          }
          var escape;
          var html = "";
          var index;
          var lastIndex = 0;
          for (index = match.index; index < str.length; index++) {
            switch (str.charCodeAt(index)) {
              case 34:
                escape = "&quot;";
                break;
              case 38:
                escape = "&amp;";
                break;
              case 39:
                escape = "&#x27;";
                break;
              case 60:
                escape = "&lt;";
                break;
              case 62:
                escape = "&gt;";
                break;
              default:
                continue;
            }
            if (lastIndex !== index) {
              html += str.slice(lastIndex, index);
            }
            lastIndex = index + 1;
            html += escape;
          }
          return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
        }
        function escapeTextForBrowser(text) {
          if (typeof text === "boolean" || typeof text === "number") {
            return "" + text;
          }
          return escapeHtml(text);
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          var stringifiedURL = "" + url;
          {
            if (!didWarn && isJavaScriptProtocol.test(stringifiedURL)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(stringifiedURL));
            }
          }
          return url;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var clientRenderBoundary = '$RX=function(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};';
        var completeBoundary = '$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};';
        var completeBoundaryWithStyles = '$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};';
        var completeSegment = "$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};";
        var formReplaying = `addEventListener("submit",function(a){if(!a.defaultPrevented){var c=a.target,d=a.submitter,e=c.action,b=d;if(d){var f=d.getAttribute("formAction");null!=f&&(e=f,b=null)}"javascript:throw new Error('A React form was unexpectedly submitted.')"===e&&(a.preventDefault(),b?(a=document.createElement("input"),a.name=b.name,a.value=b.value,b.parentNode.insertBefore(a,b),b=new FormData(c),a.parentNode.removeChild(a)):b=new FormData(c),a=c.getRootNode(),(a.$$reactFormReplay=a.$$reactFormReplay||[]).push(c,
d,b))}});`;
        function getValueDescriptorExpectingObjectForWarning(thing) {
          return thing === null ? "`null`" : thing === void 0 ? "`undefined`" : thing === "" ? "an empty string" : 'something with type "' + typeof thing + '"';
        }
        function getValueDescriptorExpectingEnumForWarning(thing) {
          return thing === null ? "`null`" : thing === void 0 ? "`undefined`" : thing === "" ? "an empty string" : typeof thing === "string" ? JSON.stringify(thing) : 'something with type "' + typeof thing + '"';
        }
        function compareResourcePropsForWarning(newProps, currentProps) {
          {
            var propDiffs = null;
            var allProps = Array.from(new Set(Object.keys(currentProps).concat(Object.keys(newProps))));
            for (var i = 0; i < allProps.length; i++) {
              var propName = allProps[i];
              var newValue = newProps[propName];
              var currentValue = currentProps[propName];
              if (newValue !== currentValue && !(newValue == null && currentValue == null)) {
                if (newValue == null) {
                  if (propDiffs === null) {
                    propDiffs = {
                      missing: {},
                      extra: {},
                      different: {}
                    };
                  }
                  propDiffs.missing[propName] = currentValue;
                } else if (currentValue == null) {
                  if (propDiffs === null) {
                    propDiffs = {
                      missing: {},
                      extra: {},
                      different: {}
                    };
                  }
                  propDiffs.extra[propName] = newValue;
                } else {
                  if (propDiffs === null) {
                    propDiffs = {
                      missing: {},
                      extra: {},
                      different: {}
                    };
                  }
                  propDiffs.different[propName] = {
                    original: currentValue,
                    latest: newValue
                  };
                }
              }
            }
            return propDiffs;
          }
        }
        function describeDifferencesForStylesheets(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.missing) {
            var propValue = diff.missing[propName];
            if (propName === "media") {
              description += '\n  "' + propName + '" missing for props, original value: ' + getValueDescriptorExpectingEnumForWarning(propValue);
            }
          }
          for (var _propName in diff.extra) {
            var _propValue = diff.extra[_propName];
            description += '\n  "' + _propName + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(_propValue) + ", missing from original props";
          }
          for (var _propName2 in diff.different) {
            var latestValue = diff.different[_propName2].latest;
            var originalValue = diff.different[_propName2].original;
            description += '\n  "' + _propName2 + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", original value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
          }
          return description;
        }
        function describeDifferencesForStylesheetOverPreinit(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.extra) {
            var propValue = diff.extra[propName];
            if (propName === "precedence" || propName === "crossOrigin" || propName === "integrity") {
              description += '\n  "' + propName + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + ", option missing";
            } else {
              description += '\n  "' + propName + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + ", option not available with ReactDOM.preinit()";
            }
          }
          for (var _propName3 in diff.different) {
            var latestValue = diff.different[_propName3].latest;
            var originalValue = diff.different[_propName3].original;
            if (_propName3 === "precedence" && originalValue === "default") {
              description += '\n  "' + _propName3 + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", missing from options";
            } else {
              description += '\n  "' + _propName3 + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", option value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
            }
          }
          return description;
        }
        function describeDifferencesForPreinitOverStylesheet(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.missing) {
            var propValue = diff.missing[propName];
            if (propName === "precedence" && propValue !== "default") {
              description += '\n  "' + propName + '" missing from options, prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue);
            }
          }
          for (var _propName4 in diff.extra) {
            var _propValue2 = diff.extra[_propName4];
            if (_propName4 === "precedence" || _propName4 === "crossOrigin" || _propName4 === "integrity") {
              description += '\n  "' + _propName4 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(_propValue2) + ", missing from props";
            }
          }
          for (var _propName5 in diff.different) {
            var latestValue = diff.different[_propName5].latest;
            var originalValue = diff.different[_propName5].original;
            description += '\n  "' + _propName5 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", prop value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
          }
          return description;
        }
        function describeDifferencesForPreinits(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.missing) {
            var propValue = diff.missing[propName];
            if (propName === "precedence" && propValue !== "default") {
              description += '\n  "' + propName + '" missing from options, original option value: ' + getValueDescriptorExpectingEnumForWarning(propValue);
            }
          }
          for (var _propName6 in diff.extra) {
            var _propValue3 = diff.extra[_propName6];
            if (_propName6 === "precedence" && _propValue3 !== "default" || _propName6 === "crossOrigin" || _propName6 === "integrity") {
              description += '\n  "' + _propName6 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(_propValue3) + ", missing from original options";
            }
          }
          for (var _propName7 in diff.different) {
            var latestValue = diff.different[_propName7].latest;
            var originalValue = diff.different[_propName7].original;
            description += '\n  "' + _propName7 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", original option value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
          }
          return description;
        }
        var preloadOptionsForComparison = ["as", "crossOrigin", "integrity", "media"];
        function describeDifferencesForPreloads(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.missing) {
            var propValue = diff.missing[propName];
            if (preloadOptionsForComparison.includes(propName)) {
              description += '\n  "' + propName + '" missing from options, original option value: ' + getValueDescriptorExpectingEnumForWarning(propValue);
            }
          }
          for (var _propName8 in diff.extra) {
            var _propValue4 = diff.extra[_propName8];
            if (preloadOptionsForComparison.includes(_propName8)) {
              description += '\n  "' + _propName8 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(_propValue4) + ", missing from original options";
            }
          }
          for (var _propName9 in diff.different) {
            var latestValue = diff.different[_propName9].latest;
            var originalValue = diff.different[_propName9].original;
            if (preloadOptionsForComparison.includes(_propName9)) {
              description += '\n  "' + _propName9 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", original option value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
            }
          }
          return description;
        }
        function describeDifferencesForPreloadOverImplicitPreload(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.missing) {
            var propValue = diff.missing[propName];
            if (preloadOptionsForComparison.includes(propName)) {
              description += '\n  "' + propName + '" missing from options, underlying prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue);
            }
          }
          for (var _propName10 in diff.extra) {
            var _propValue5 = diff.extra[_propName10];
            if (preloadOptionsForComparison.includes(_propName10)) {
              description += '\n  "' + _propName10 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(_propValue5) + ", missing from underlying props";
            }
          }
          for (var _propName11 in diff.different) {
            var latestValue = diff.different[_propName11].latest;
            var originalValue = diff.different[_propName11].original;
            if (preloadOptionsForComparison.includes(_propName11)) {
              description += '\n  "' + _propName11 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", underlying prop value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
            }
          }
          return description;
        }
        function describeDifferencesForScripts(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.missing) {
            var propValue = diff.missing[propName];
            description += '\n  "' + propName + '" missing for props, original value: ' + getValueDescriptorExpectingEnumForWarning(propValue);
          }
          for (var _propName12 in diff.extra) {
            var _propValue6 = diff.extra[_propName12];
            description += '\n  "' + _propName12 + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(_propValue6) + ", missing from original props";
          }
          for (var _propName13 in diff.different) {
            var latestValue = diff.different[_propName13].latest;
            var originalValue = diff.different[_propName13].original;
            description += '\n  "' + _propName13 + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", original value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
          }
          return description;
        }
        function describeDifferencesForScriptOverPreinit(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.extra) {
            var propValue = diff.extra[propName];
            if (propName === "crossOrigin" || propName === "integrity") {
              description += '\n  "' + propName + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + ", option missing";
            } else {
              description += '\n  "' + propName + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + ", option not available with ReactDOM.preinit()";
            }
          }
          for (var _propName14 in diff.different) {
            var latestValue = diff.different[_propName14].latest;
            var originalValue = diff.different[_propName14].original;
            description += '\n  "' + _propName14 + '" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", option value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
          }
          return description;
        }
        function describeDifferencesForPreinitOverScript(newProps, currentProps) {
          var diff = compareResourcePropsForWarning(newProps, currentProps);
          if (!diff)
            return "";
          var description = "";
          for (var propName in diff.extra) {
            var propValue = diff.extra[propName];
            if (propName === "crossOrigin" || propName === "integrity") {
              description += '\n  "' + propName + '" option value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + ", missing from props";
            }
          }
          for (var _propName15 in diff.different) {
            var latestValue = diff.different[_propName15].latest;
            var originalValue = diff.different[_propName15].original;
            description += '\n  "' + _propName15 + '" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + ", prop value: " + getValueDescriptorExpectingEnumForWarning(originalValue);
          }
          return description;
        }
        var sharedNotPendingObject = {
          pending: false,
          data: null,
          method: null,
          action: null
        };
        var NotPending = Object.freeze(sharedNotPendingObject);
        var ReactDOMSharedInternals = ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var ReactDOMCurrentDispatcher = ReactDOMSharedInternals.Dispatcher;
        var ReactDOMServerDispatcher = {
          prefetchDNS,
          preconnect,
          preload,
          preinit
        };
        function prepareHostDispatcher() {
          ReactDOMCurrentDispatcher.current = ReactDOMServerDispatcher;
        }
        var ScriptStreamingFormat = 0;
        var DataStreamingFormat = 1;
        var NothingSent = 0;
        var SentCompleteSegmentFunction = 1;
        var SentCompleteBoundaryFunction = 2;
        var SentClientRenderFunction = 4;
        var SentStyleInsertionFunction = 8;
        var SentFormReplayingRuntime = 16;
        var dataElementQuotedEnd = stringToPrecomputedChunk('"></template>');
        var startInlineScript = stringToPrecomputedChunk("<script>");
        var endInlineScript = stringToPrecomputedChunk("</script>");
        var startScriptSrc = stringToPrecomputedChunk('<script src="');
        var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
        var scriptNonce = stringToPrecomputedChunk('" nonce="');
        var scriptIntegirty = stringToPrecomputedChunk('" integrity="');
        var scriptCrossOrigin = stringToPrecomputedChunk('" crossorigin="');
        var endAsyncScript = stringToPrecomputedChunk('" async=""></script>');
        function escapeBootstrapScriptContent(scriptText) {
          {
            checkHtmlStringCoercion(scriptText);
          }
          return ("" + scriptText).replace(scriptRegex, scriptReplacer);
        }
        var scriptRegex = /(<\/|<)(s)(cript)/gi;
        var scriptReplacer = function(match, prefix2, s, suffix) {
          return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
        };
        function createResponseState(resources, identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules, externalRuntimeConfig) {
          var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
          var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
          var bootstrapChunks = [];
          var externalRuntimeScript = null;
          var streamingFormat = ScriptStreamingFormat;
          if (bootstrapScriptContent !== void 0) {
            bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript);
          }
          {
            if (externalRuntimeConfig !== void 0) {
              streamingFormat = DataStreamingFormat;
              if (typeof externalRuntimeConfig === "string") {
                externalRuntimeScript = {
                  src: externalRuntimeConfig,
                  chunks: []
                };
                pushScriptImpl(externalRuntimeScript.chunks, {
                  src: externalRuntimeConfig,
                  async: true,
                  integrity: void 0,
                  nonce
                });
              } else {
                externalRuntimeScript = {
                  src: externalRuntimeConfig.src,
                  chunks: []
                };
                pushScriptImpl(externalRuntimeScript.chunks, {
                  src: externalRuntimeConfig.src,
                  async: true,
                  integrity: externalRuntimeConfig.integrity,
                  nonce
                });
              }
            }
          }
          if (bootstrapScripts !== void 0) {
            for (var i = 0; i < bootstrapScripts.length; i++) {
              var scriptConfig = bootstrapScripts[i];
              var src = typeof scriptConfig === "string" ? scriptConfig : scriptConfig.src;
              var integrity = typeof scriptConfig === "string" ? void 0 : scriptConfig.integrity;
              var crossOrigin = typeof scriptConfig === "string" || scriptConfig.crossOrigin == null ? void 0 : scriptConfig.crossOrigin === "use-credentials" ? "use-credentials" : "";
              preloadBootstrapScript(resources, src, nonce, integrity, crossOrigin);
              bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(src)));
              if (nonce) {
                bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));
              }
              if (integrity) {
                bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(integrity)));
              }
              if (typeof crossOrigin === "string") {
                bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(crossOrigin)));
              }
              bootstrapChunks.push(endAsyncScript);
            }
          }
          if (bootstrapModules !== void 0) {
            for (var _i = 0; _i < bootstrapModules.length; _i++) {
              var _scriptConfig = bootstrapModules[_i];
              var _src = typeof _scriptConfig === "string" ? _scriptConfig : _scriptConfig.src;
              var _integrity = typeof _scriptConfig === "string" ? void 0 : _scriptConfig.integrity;
              var _crossOrigin = typeof _scriptConfig === "string" || _scriptConfig.crossOrigin == null ? void 0 : _scriptConfig.crossOrigin === "use-credentials" ? "use-credentials" : "";
              preloadBootstrapModule(resources, _src, nonce, _integrity, _crossOrigin);
              bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(_src)));
              if (nonce) {
                bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));
              }
              if (_integrity) {
                bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(_integrity)));
              }
              if (typeof _crossOrigin === "string") {
                bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(_crossOrigin)));
              }
              bootstrapChunks.push(endAsyncScript);
            }
          }
          return {
            bootstrapChunks,
            placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
            segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
            boundaryPrefix: idPrefix + "B:",
            idPrefix,
            nextSuspenseID: 0,
            streamingFormat,
            startInlineScript: inlineScriptWithNonce,
            instructions: NothingSent,
            externalRuntimeScript,
            htmlChunks: null,
            headChunks: null,
            hasBody: false,
            charsetChunks: [],
            preconnectChunks: [],
            preloadChunks: [],
            hoistableChunks: [],
            stylesToHoist: false,
            nonce
          };
        }
        var ROOT_HTML_MODE = 0;
        var HTML_HTML_MODE = 1;
        var HTML_MODE = 2;
        var SVG_MODE = 3;
        var MATHML_MODE = 4;
        var HTML_TABLE_MODE = 5;
        var HTML_TABLE_BODY_MODE = 6;
        var HTML_TABLE_ROW_MODE = 7;
        var HTML_COLGROUP_MODE = 8;
        function createFormatContext(insertionMode, selectedValue, noscriptTagInScope) {
          return {
            insertionMode,
            selectedValue,
            noscriptTagInScope
          };
        }
        function createRootFormatContext(namespaceURI) {
          var insertionMode = namespaceURI === "http://www.w3.org/2000/svg" ? SVG_MODE : namespaceURI === "http://www.w3.org/1998/Math/MathML" ? MATHML_MODE : ROOT_HTML_MODE;
          return createFormatContext(insertionMode, null, false);
        }
        function getChildFormatContext(parentContext, type, props) {
          switch (type) {
            case "noscript":
              return createFormatContext(HTML_MODE, null, true);
            case "select":
              return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue, parentContext.noscriptTagInScope);
            case "svg":
              return createFormatContext(SVG_MODE, null, parentContext.noscriptTagInScope);
            case "math":
              return createFormatContext(MATHML_MODE, null, parentContext.noscriptTagInScope);
            case "foreignObject":
              return createFormatContext(HTML_MODE, null, parentContext.noscriptTagInScope);
            case "table":
              return createFormatContext(HTML_TABLE_MODE, null, parentContext.noscriptTagInScope);
            case "thead":
            case "tbody":
            case "tfoot":
              return createFormatContext(HTML_TABLE_BODY_MODE, null, parentContext.noscriptTagInScope);
            case "colgroup":
              return createFormatContext(HTML_COLGROUP_MODE, null, parentContext.noscriptTagInScope);
            case "tr":
              return createFormatContext(HTML_TABLE_ROW_MODE, null, parentContext.noscriptTagInScope);
          }
          if (parentContext.insertionMode >= HTML_TABLE_MODE) {
            return createFormatContext(HTML_MODE, null, parentContext.noscriptTagInScope);
          }
          if (parentContext.insertionMode === ROOT_HTML_MODE) {
            if (type === "html") {
              return createFormatContext(HTML_HTML_MODE, null, false);
            } else {
              return createFormatContext(HTML_MODE, null, false);
            }
          } else if (parentContext.insertionMode === HTML_HTML_MODE) {
            return createFormatContext(HTML_MODE, null, false);
          }
          return parentContext;
        }
        var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
        function assignSuspenseBoundaryID(responseState) {
          var generatedID = responseState.nextSuspenseID++;
          return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
        }
        function makeId(responseState, treeId, localId) {
          var idPrefix = responseState.idPrefix;
          var id = ":" + idPrefix + "R" + treeId;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          return id + ":";
        }
        function encodeHTMLTextNode(text) {
          return escapeTextForBrowser(text);
        }
        var textSeparator = stringToPrecomputedChunk("<!-- -->");
        function pushTextInstance(target, text, responseState, textEmbedded) {
          if (text === "") {
            return textEmbedded;
          }
          if (textEmbedded) {
            target.push(textSeparator);
          }
          target.push(stringToChunk(encodeHTMLTextNode(text)));
          return true;
        }
        function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
          if (lastPushedText && textEmbedded) {
            target.push(textSeparator);
          }
        }
        var styleNameCache = /* @__PURE__ */ new Map();
        function processStyleName(styleName) {
          var chunk = styleNameCache.get(styleName);
          if (chunk !== void 0) {
            return chunk;
          }
          var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
          styleNameCache.set(styleName, result);
          return result;
        }
        var styleAttributeStart = stringToPrecomputedChunk(' style="');
        var styleAssign = stringToPrecomputedChunk(":");
        var styleSeparator = stringToPrecomputedChunk(";");
        function pushStyleAttribute(target, style) {
          if (typeof style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
          var isFirst = true;
          for (var styleName in style) {
            if (!hasOwnProperty.call(style, styleName)) {
              continue;
            }
            var styleValue = style[styleName];
            if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
              continue;
            }
            var nameChunk = void 0;
            var valueChunk = void 0;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (isCustomProperty) {
              nameChunk = stringToChunk(escapeTextForBrowser(styleName));
              {
                checkCSSPropertyStringCoercion(styleValue, styleName);
              }
              valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
            } else {
              {
                warnValidStyle(styleName, styleValue);
              }
              nameChunk = processStyleName(styleName);
              if (typeof styleValue === "number") {
                if (styleValue !== 0 && !isUnitlessNumber(styleName)) {
                  valueChunk = stringToChunk(styleValue + "px");
                } else {
                  valueChunk = stringToChunk("" + styleValue);
                }
              } else {
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              }
            }
            if (isFirst) {
              isFirst = false;
              target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
            } else {
              target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
          if (!isFirst) {
            target.push(attributeEnd);
          }
        }
        var attributeSeparator = stringToPrecomputedChunk(" ");
        var attributeAssign = stringToPrecomputedChunk('="');
        var attributeEnd = stringToPrecomputedChunk('"');
        var attributeEmptyString = stringToPrecomputedChunk('=""');
        function pushBooleanAttribute(target, name, value) {
          if (value && typeof value !== "function" && typeof value !== "symbol") {
            target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
          }
        }
        function pushStringAttribute(target, name, value) {
          if (typeof value !== "function" && typeof value !== "symbol" && typeof value !== "boolean") {
            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
          }
        }
        function makeFormFieldPrefix(responseState) {
          var id = responseState.nextSuspenseID++;
          return responseState.idPrefix + id;
        }
        var actionJavaScriptURL = stringToPrecomputedChunk(escapeTextForBrowser(
          // eslint-disable-next-line no-script-url
          "javascript:throw new Error('A React form was unexpectedly submitted.')"
        ));
        var startHiddenInputChunk = stringToPrecomputedChunk('<input type="hidden"');
        function pushAdditionalFormField(value, key) {
          var target = this;
          target.push(startHiddenInputChunk);
          if (typeof value !== "string") {
            throw new Error("File/Blob fields are not yet supported in progressive forms. It probably means you are closing over binary data or FormData in a Server Action.");
          }
          pushStringAttribute(target, "name", key);
          pushStringAttribute(target, "value", value);
          target.push(endOfStartTagSelfClosing);
        }
        function pushAdditionalFormFields(target, formData) {
          if (formData !== null) {
            formData.forEach(pushAdditionalFormField, target);
          }
        }
        function pushFormActionAttribute(target, responseState, formAction, formEncType, formMethod, formTarget, name) {
          var formData = null;
          if (typeof formAction === "function") {
            {
              if (name !== null && !didWarnFormActionName) {
                didWarnFormActionName = true;
                error('Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.');
              }
              if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {
                didWarnFormActionMethod = true;
                error("Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden.");
              }
              if (formTarget !== null && !didWarnFormActionTarget) {
                didWarnFormActionTarget = true;
                error("Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window.");
              }
            }
            var customAction = formAction.$$FORM_ACTION;
            if (typeof customAction === "function") {
              var prefix2 = makeFormFieldPrefix(responseState);
              var customFields = formAction.$$FORM_ACTION(prefix2);
              name = customFields.name;
              formAction = customFields.action || "";
              formEncType = customFields.encType;
              formMethod = customFields.method;
              formTarget = customFields.target;
              formData = customFields.data;
            } else {
              target.push(attributeSeparator, stringToChunk("formAction"), attributeAssign, actionJavaScriptURL, attributeEnd);
              name = null;
              formAction = null;
              formEncType = null;
              formMethod = null;
              formTarget = null;
              injectFormReplayingRuntime(responseState);
            }
          }
          if (name != null) {
            pushAttribute(target, "name", name);
          }
          if (formAction != null) {
            pushAttribute(target, "formAction", formAction);
          }
          if (formEncType != null) {
            pushAttribute(target, "formEncType", formEncType);
          }
          if (formMethod != null) {
            pushAttribute(target, "formMethod", formMethod);
          }
          if (formTarget != null) {
            pushAttribute(target, "formTarget", formTarget);
          }
          return formData;
        }
        function pushAttribute(target, name, value) {
          switch (name) {
            case "className": {
              pushStringAttribute(target, "class", value);
              break;
            }
            case "tabIndex": {
              pushStringAttribute(target, "tabindex", value);
              break;
            }
            case "dir":
            case "role":
            case "viewBox":
            case "width":
            case "height": {
              pushStringAttribute(target, name, value);
              break;
            }
            case "style": {
              pushStyleAttribute(target, value);
              return;
            }
            case "src":
            case "href": {
              {
                if (value === "") {
                  {
                    if (name === "src") {
                      error('An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', name, name);
                    } else {
                      error('An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', name, name);
                    }
                  }
                  return;
                }
              }
            }
            case "action":
            case "formAction": {
              if (value == null || typeof value === "function" || typeof value === "symbol" || typeof value === "boolean") {
                return;
              }
              {
                checkAttributeStringCoercion(value, name);
              }
              var sanitizedValue = sanitizeURL("" + value);
              target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(sanitizedValue)), attributeEnd);
              return;
            }
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
              return;
            case "autoFocus":
            case "multiple":
            case "muted": {
              pushBooleanAttribute(target, name.toLowerCase(), value);
              return;
            }
            case "xlinkHref": {
              if (typeof value === "function" || typeof value === "symbol" || typeof value === "boolean") {
                return;
              }
              {
                checkAttributeStringCoercion(value, name);
              }
              var _sanitizedValue = sanitizeURL("" + value);
              target.push(attributeSeparator, stringToChunk("xlink:href"), attributeAssign, stringToChunk(escapeTextForBrowser(_sanitizedValue)), attributeEnd);
              return;
            }
            case "contentEditable":
            case "spellCheck":
            case "draggable":
            case "value":
            case "autoReverse":
            case "externalResourcesRequired":
            case "focusable":
            case "preserveAlpha": {
              if (typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "allowFullScreen":
            case "async":
            case "autoPlay":
            case "controls":
            case "default":
            case "defer":
            case "disabled":
            case "disablePictureInPicture":
            case "disableRemotePlayback":
            case "formNoValidate":
            case "hidden":
            case "loop":
            case "noModule":
            case "noValidate":
            case "open":
            case "playsInline":
            case "readOnly":
            case "required":
            case "reversed":
            case "scoped":
            case "seamless":
            case "itemScope": {
              if (value && typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
              }
              return;
            }
            case "capture":
            case "download": {
              if (value === true) {
                target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
              } else if (value === false)
                ;
              else if (typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "cols":
            case "rows":
            case "size":
            case "span": {
              if (typeof value !== "function" && typeof value !== "symbol" && !isNaN(value) && value >= 1) {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "rowSpan":
            case "start": {
              if (typeof value !== "function" && typeof value !== "symbol" && !isNaN(value)) {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "xlinkActuate":
              pushStringAttribute(target, "xlink:actuate", value);
              return;
            case "xlinkArcrole":
              pushStringAttribute(target, "xlink:arcrole", value);
              return;
            case "xlinkRole":
              pushStringAttribute(target, "xlink:role", value);
              return;
            case "xlinkShow":
              pushStringAttribute(target, "xlink:show", value);
              return;
            case "xlinkTitle":
              pushStringAttribute(target, "xlink:title", value);
              return;
            case "xlinkType":
              pushStringAttribute(target, "xlink:type", value);
              return;
            case "xmlBase":
              pushStringAttribute(target, "xml:base", value);
              return;
            case "xmlLang":
              pushStringAttribute(target, "xml:lang", value);
              return;
            case "xmlSpace":
              pushStringAttribute(target, "xml:space", value);
              return;
            default:
              if (
                // shouldIgnoreAttribute
                // We have already filtered out null/undefined and reserved words.
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              var attributeName = getAttributeAlias(name);
              if (isAttributeNameSafe(attributeName)) {
                switch (typeof value) {
                  case "function":
                  case "symbol":
                    return;
                  case "boolean": {
                    var prefix2 = attributeName.toLowerCase().slice(0, 5);
                    if (prefix2 !== "data-" && prefix2 !== "aria-") {
                      return;
                    }
                  }
                }
                target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
          }
        }
        var endOfStartTag = stringToPrecomputedChunk(">");
        var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
        function pushInnerHTML(target, innerHTML, children) {
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              {
                checkHtmlStringCoercion(html);
              }
              target.push(stringToChunk("" + html));
            }
          }
        }
        var didWarnDefaultInputValue = false;
        var didWarnDefaultChecked = false;
        var didWarnDefaultSelectValue = false;
        var didWarnDefaultTextareaValue = false;
        var didWarnInvalidOptionChildren = false;
        var didWarnInvalidOptionInnerHTML = false;
        var didWarnSelectedSetOnOption = false;
        var didWarnFormActionType = false;
        var didWarnFormActionName = false;
        var didWarnFormActionTarget = false;
        var didWarnFormActionMethod = false;
        function checkSelectProp(props, propName) {
          {
            var value = props[propName];
            if (value != null) {
              var array = isArray(value);
              if (props.multiple && !array) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
              } else if (!props.multiple && array) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
              }
            }
          }
        }
        function pushStartSelect(target, props) {
          {
            checkControlledValueProps("select", props);
            checkSelectProp(props, "value");
            checkSelectProp(props, "defaultValue");
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultSelectValue = true;
            }
          }
          target.push(startChunkForTag("select"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "defaultValue":
                case "value":
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function flattenOptionChildren(children) {
          var content = "";
          React.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
            {
              if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number") {
                didWarnInvalidOptionChildren = true;
                error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            }
          });
          return content;
        }
        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
        function pushStartOption(target, props, formatContext) {
          var selectedValue = formatContext.selectedValue;
          target.push(startChunkForTag("option"));
          var children = null;
          var value = null;
          var selected = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "selected":
                  selected = propValue;
                  {
                    if (!didWarnSelectedSetOnOption) {
                      error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                      didWarnSelectedSetOnOption = true;
                    }
                  }
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "value":
                  value = propValue;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          if (selectedValue != null) {
            var stringValue;
            if (value !== null) {
              {
                checkAttributeStringCoercion(value, "value");
              }
              stringValue = "" + value;
            } else {
              {
                if (innerHTML !== null) {
                  if (!didWarnInvalidOptionInnerHTML) {
                    didWarnInvalidOptionInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              stringValue = flattenOptionChildren(children);
            }
            if (isArray(selectedValue)) {
              for (var i = 0; i < selectedValue.length; i++) {
                {
                  checkAttributeStringCoercion(selectedValue[i], "value");
                }
                var v = "" + selectedValue[i];
                if (v === stringValue) {
                  target.push(selectedMarkerAttribute);
                  break;
                }
              }
            } else {
              {
                checkAttributeStringCoercion(selectedValue, "select.value");
              }
              if ("" + selectedValue === stringValue) {
                target.push(selectedMarkerAttribute);
              }
            }
          } else if (selected) {
            target.push(selectedMarkerAttribute);
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var formReplayingRuntimeScript = stringToPrecomputedChunk(formReplaying);
        function injectFormReplayingRuntime(responseState) {
          if ((responseState.instructions & SentFormReplayingRuntime) === NothingSent && !responseState.externalRuntimeScript) {
            responseState.instructions |= SentFormReplayingRuntime;
            responseState.bootstrapChunks.unshift(responseState.startInlineScript, formReplayingRuntimeScript, endInlineScript);
          }
        }
        function pushStartForm(target, props, responseState) {
          target.push(startChunkForTag("form"));
          var children = null;
          var innerHTML = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "action":
                  formAction = propValue;
                  break;
                case "encType":
                  formEncType = propValue;
                  break;
                case "method":
                  formMethod = propValue;
                  break;
                case "target":
                  formTarget = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          var formData = null;
          var formActionName = null;
          if (typeof formAction === "function") {
            {
              if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {
                didWarnFormActionMethod = true;
                error("Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden.");
              }
              if (formTarget !== null && !didWarnFormActionTarget) {
                didWarnFormActionTarget = true;
                error("Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window.");
              }
            }
            var customAction = formAction.$$FORM_ACTION;
            if (typeof customAction === "function") {
              var prefix2 = makeFormFieldPrefix(responseState);
              var customFields = formAction.$$FORM_ACTION(prefix2);
              formAction = customFields.action || "";
              formEncType = customFields.encType;
              formMethod = customFields.method;
              formTarget = customFields.target;
              formData = customFields.data;
              formActionName = customFields.name;
            } else {
              target.push(attributeSeparator, stringToChunk("action"), attributeAssign, actionJavaScriptURL, attributeEnd);
              formAction = null;
              formEncType = null;
              formMethod = null;
              formTarget = null;
              injectFormReplayingRuntime(responseState);
            }
          }
          if (formAction != null) {
            pushAttribute(target, "action", formAction);
          }
          if (formEncType != null) {
            pushAttribute(target, "encType", formEncType);
          }
          if (formMethod != null) {
            pushAttribute(target, "method", formMethod);
          }
          if (formTarget != null) {
            pushAttribute(target, "target", formTarget);
          }
          target.push(endOfStartTag);
          if (formActionName !== null) {
            target.push(startHiddenInputChunk);
            pushStringAttribute(target, "name", formActionName);
            target.push(endOfStartTagSelfClosing);
            pushAdditionalFormFields(target, formData);
          }
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushInput(target, props, responseState) {
          {
            checkControlledValueProps("input", props);
          }
          target.push(startChunkForTag("input"));
          var name = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          var value = null;
          var defaultValue = null;
          var checked = null;
          var defaultChecked = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "name":
                  name = propValue;
                  break;
                case "formAction":
                  formAction = propValue;
                  break;
                case "formEncType":
                  formEncType = propValue;
                  break;
                case "formMethod":
                  formMethod = propValue;
                  break;
                case "formTarget":
                  formTarget = propValue;
                  break;
                case "defaultChecked":
                  defaultChecked = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "checked":
                  checked = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          {
            if (formAction !== null && props.type !== "image" && props.type !== "submit" && !didWarnFormActionType) {
              didWarnFormActionType = true;
              error('An input can only specify a formAction along with type="submit" or type="image".');
            }
          }
          var formData = pushFormActionAttribute(target, responseState, formAction, formEncType, formMethod, formTarget, name);
          {
            if (checked !== null && defaultChecked !== null && !didWarnDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultChecked = true;
            }
            if (value !== null && defaultValue !== null && !didWarnDefaultInputValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultInputValue = true;
            }
          }
          if (checked !== null) {
            pushBooleanAttribute(target, "checked", checked);
          } else if (defaultChecked !== null) {
            pushBooleanAttribute(target, "checked", defaultChecked);
          }
          if (value !== null) {
            pushAttribute(target, "value", value);
          } else if (defaultValue !== null) {
            pushAttribute(target, "value", defaultValue);
          }
          target.push(endOfStartTagSelfClosing);
          pushAdditionalFormFields(target, formData);
          return null;
        }
        function pushStartButton(target, props, responseState) {
          target.push(startChunkForTag("button"));
          var children = null;
          var innerHTML = null;
          var name = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "name":
                  name = propValue;
                  break;
                case "formAction":
                  formAction = propValue;
                  break;
                case "formEncType":
                  formEncType = propValue;
                  break;
                case "formMethod":
                  formMethod = propValue;
                  break;
                case "formTarget":
                  formTarget = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          {
            if (formAction !== null && props.type != null && props.type !== "submit" && !didWarnFormActionType) {
              didWarnFormActionType = true;
              error('A button can only specify a formAction along with type="submit" or no type.');
            }
          }
          var formData = pushFormActionAttribute(target, responseState, formAction, formEncType, formMethod, formTarget, name);
          target.push(endOfStartTag);
          pushAdditionalFormFields(target, formData);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartTextArea(target, props) {
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
              error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultTextareaValue = true;
            }
          }
          target.push(startChunkForTag("textarea"));
          var value = null;
          var defaultValue = null;
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          if (value === null && defaultValue !== null) {
            value = defaultValue;
          }
          target.push(endOfStartTag);
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            if (value != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray(children)) {
              if (children.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              {
                checkHtmlStringCoercion(children[0]);
              }
              value = "" + children[0];
            }
            {
              checkHtmlStringCoercion(children);
            }
            value = "" + children;
          }
          if (typeof value === "string" && value[0] === "\n") {
            target.push(leadingNewline);
          }
          if (value !== null) {
            {
              checkAttributeStringCoercion(value, "value");
            }
            target.push(stringToChunk(encodeHTMLTextNode("" + value)));
          }
          return null;
        }
        function pushMeta(target, props, responseState, textEmbedded, insertionMode, noscriptTagInScope) {
          {
            if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {
              return pushSelfClosing(target, props, "meta");
            } else {
              if (textEmbedded) {
                target.push(textSeparator);
              }
              if (typeof props.charSet === "string") {
                return pushSelfClosing(responseState.charsetChunks, props, "meta");
              } else {
                return pushSelfClosing(responseState.hoistableChunks, props, "meta");
              }
            }
          }
        }
        function pushLink(target, props, responseState, resources, textEmbedded, insertionMode, noscriptTagInScope) {
          {
            var rel = props.rel;
            var href = props.href;
            var precedence = props.precedence;
            if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof rel !== "string" || typeof href !== "string" || href === "") {
              {
                if (rel === "stylesheet" && typeof props.precedence === "string") {
                  if (typeof href !== "string" || !href) {
                    error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and expected the `href` prop to be a non-empty string but ecountered %s instead. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop ensure there is a non-empty string `href` prop as well, otherwise remove the `precedence` prop.', getValueDescriptorExpectingObjectForWarning(href));
                  }
                }
              }
              pushLinkImpl(target, props);
              return null;
            }
            if (props.rel === "stylesheet") {
              var key = getResourceKey("style", href);
              if (typeof precedence !== "string" || props.disabled != null || props.onLoad || props.onError) {
                {
                  if (typeof precedence === "string") {
                    if (props.disabled != null) {
                      error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and a `disabled` prop. The presence of the `disabled` prop indicates an intent to manage the stylesheet active state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the `disabled` prop, otherwise remove the `precedence` prop.');
                    } else if (props.onLoad || props.onError) {
                      var propDescription = props.onLoad && props.onError ? "`onLoad` and `onError` props" : props.onLoad ? "`onLoad` prop" : "`onError` prop";
                      error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.', propDescription, propDescription);
                    }
                  }
                }
                return pushLinkImpl(target, props);
              } else {
                var resource = resources.stylesMap.get(key);
                {
                  var devResource = getAsResourceDEV(resource);
                  if (devResource) {
                    switch (devResource.__provenance) {
                      case "rendered": {
                        var differenceDescription = describeDifferencesForStylesheets(
                          // Diff the props from the JSX element, not the derived resource props
                          props,
                          devResource.__originalProps
                        );
                        if (differenceDescription) {
                          error('React encountered a <link rel="stylesheet" href="%s" .../> with a `precedence` prop that has props that conflict with another hoistable stylesheet with the same `href`. When using `precedence` with <link rel="stylsheet" .../> the props from the first encountered instance will be used and props from later instances will be ignored. Update the props on either <link rel="stylesheet" .../> instance so they agree.%s', href, differenceDescription);
                        }
                        break;
                      }
                      case "preinit": {
                        var _differenceDescription = describeDifferencesForStylesheetOverPreinit(
                          // Diff the props from the JSX element, not the derived resource props
                          props,
                          devResource.__propsEquivalent
                        );
                        if (_differenceDescription) {
                          error('React encountered a <link rel="stylesheet" precedence="%s" href="%s" .../> with props that conflict with the options provided to `ReactDOM.preinit("%s", { as: "style", ... })`. React will use the first props or preinitialization options encountered when rendering a hoistable stylesheet with a particular `href` and will ignore any newer props or options. The first instance of this stylesheet resource was created using the `ReactDOM.preinit()` function. Please note, `ReactDOM.preinit()` is modeled off of module import assertions capabilities and does not support arbitrary props. If you need to have props not included with the preinit options you will need to rely on rendering <link> tags only.%s', precedence, href, href, _differenceDescription);
                        }
                        break;
                      }
                    }
                  }
                }
                if (!resource) {
                  var resourceProps = stylesheetPropsFromRawProps(props);
                  var preloadResource = resources.preloadsMap.get(key);
                  var state = NoState;
                  if (preloadResource) {
                    preloadResource.state |= Blocked;
                    adoptPreloadPropsForStylesheetProps(resourceProps, preloadResource.props);
                    if (preloadResource.state & Flushed) {
                      state = PreloadFlushed;
                    }
                  }
                  resource = {
                    type: "stylesheet",
                    chunks: [],
                    state,
                    props: resourceProps
                  };
                  resources.stylesMap.set(key, resource);
                  {
                    markAsRenderedResourceDEV(resource, props);
                  }
                  var precedenceSet = resources.precedences.get(precedence);
                  if (!precedenceSet) {
                    precedenceSet = /* @__PURE__ */ new Set();
                    resources.precedences.set(precedence, precedenceSet);
                    var emptyStyleResource = {
                      type: "style",
                      chunks: [],
                      state: NoState,
                      props: {
                        precedence,
                        hrefs: []
                      }
                    };
                    precedenceSet.add(emptyStyleResource);
                    {
                      if (resources.stylePrecedences.has(precedence)) {
                        error('React constructed an empty style resource when a style resource already exists for this precedence: "%s". This is a bug in React.', precedence);
                      }
                    }
                    resources.stylePrecedences.set(precedence, emptyStyleResource);
                  }
                  precedenceSet.add(resource);
                }
                if (resources.boundaryResources) {
                  resources.boundaryResources.add(resource);
                }
                if (textEmbedded) {
                  target.push(textSeparator);
                }
                return null;
              }
            } else if (props.onLoad || props.onError) {
              return pushLinkImpl(target, props);
            } else {
              if (textEmbedded) {
                target.push(textSeparator);
              }
              switch (props.rel) {
                case "preconnect":
                case "dns-prefetch":
                  return pushLinkImpl(responseState.preconnectChunks, props);
                case "preload":
                  return pushLinkImpl(responseState.preloadChunks, props);
                default:
                  return pushLinkImpl(responseState.hoistableChunks, props);
              }
            }
          }
        }
        function pushLinkImpl(target, props) {
          target.push(startChunkForTag("link"));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStyle(target, props, resources, textEmbedded, insertionMode, noscriptTagInScope) {
          {
            if (hasOwnProperty.call(props, "children")) {
              var children = props.children;
              var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
              if (typeof child === "function" || typeof child === "symbol" || Array.isArray(child)) {
                var childType = typeof child === "function" ? "a Function" : typeof child === "symbol" ? "a Sybmol" : "an Array";
                error("React expect children of <style> tags to be a string, number, or object with a `toString` method but found %s instead. In browsers style Elements can only have `Text` Nodes as children.", childType);
              }
            }
          }
          {
            var precedence = props.precedence;
            var href = props.href;
            if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof precedence !== "string" || typeof href !== "string" || href === "") {
              return pushStyleImpl(target, props);
            }
            {
              if (href.includes(" ")) {
                error('React expected the `href` prop for a <style> tag opting into hoisting semantics using the `precedence` prop to not have any spaces but ecountered spaces instead. using spaces in this prop will cause hydration of this style to fail on the client. The href for the <style> where this ocurred is "%s".', href);
              }
            }
            var key = getResourceKey("style", href);
            var resource = resources.stylesMap.get(key);
            if (!resource) {
              resource = resources.stylePrecedences.get(precedence);
              if (!resource) {
                resource = {
                  type: "style",
                  chunks: [],
                  state: NoState,
                  props: {
                    precedence,
                    hrefs: [href]
                  }
                };
                resources.stylePrecedences.set(precedence, resource);
                var precedenceSet = /* @__PURE__ */ new Set();
                precedenceSet.add(resource);
                {
                  if (resources.precedences.has(precedence)) {
                    error('React constructed a new style precedence set when one already exists for this precedence: "%s". This is a bug in React.', precedence);
                  }
                }
                resources.precedences.set(precedence, precedenceSet);
              } else {
                resource.props.hrefs.push(href);
              }
              resources.stylesMap.set(key, resource);
              if (resources.boundaryResources) {
                resources.boundaryResources.add(resource);
              }
              pushStyleContents(resource.chunks, props);
            }
            if (textEmbedded) {
              target.push(textSeparator);
            }
          }
        }
        function pushStyleImpl(target, props) {
          target.push(startChunkForTag("style"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeTextForBrowser("" + child)));
          }
          pushInnerHTML(target, innerHTML, children);
          target.push(endTag1, stringToChunk("style"), endTag2);
          return null;
        }
        function pushStyleContents(target, props) {
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
              }
            }
          }
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeTextForBrowser("" + child)));
          }
          pushInnerHTML(target, innerHTML, children);
          return;
        }
        function pushSelfClosing(target, props, tag) {
          target.push(startChunkForTag(tag));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartMenuItem(target, props) {
          target.push(startChunkForTag("menuitem"));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          return null;
        }
        function pushTitle(target, props, responseState, insertionMode, noscriptTagInScope) {
          {
            if (hasOwnProperty.call(props, "children")) {
              var children = props.children;
              var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
              if (Array.isArray(children) && children.length > 1) {
                error("React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an Array with length %s instead. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert `children` of <title> tags to a single string value which is why Arrays of length greater than 1 are not supported. When using JSX it can be commong to combine text nodes and value nodes. For example: <title>hello {nameOfUser}</title>. While not immediately apparent, `children` in this case is an Array with length 2. If your `children` prop is using this form try rewriting it using a template string: <title>{`hello ${nameOfUser}`}</title>.", children.length);
              } else if (typeof child === "function" || typeof child === "symbol") {
                var childType = typeof child === "function" ? "a Function" : "a Sybmol";
                error("React expect children of <title> tags to be a string, number, or object with a novel `toString` method but found %s instead. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value.", childType);
              } else if (child && child.toString === {}.toString) {
                if (child.$$typeof != null) {
                  error("React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an object that appears to be a React element which never implements a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value which is why rendering React elements is not supported. If the `children` of <title> is a React Component try moving the <title> tag into that component. If the `children` of <title> is some HTML markup change it to be Text only to be valid HTML.");
                } else {
                  error("React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an object that does not implement a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value. Using the default `toString` method available on every object is almost certainly an error. Consider whether the `children` of this <title> is an object in error and change it to a string or number value if so. Otherwise implement a `toString` method that React can use to produce a valid <title>.");
                }
              }
            }
          }
          {
            if (insertionMode !== SVG_MODE && !noscriptTagInScope && props.itemProp == null) {
              pushTitleImpl(responseState.hoistableChunks, props);
              return null;
            } else {
              return pushTitleImpl(target, props);
            }
          }
        }
        function pushTitleImpl(target, props) {
          target.push(startChunkForTag("title"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeTextForBrowser("" + child)));
          }
          pushInnerHTML(target, innerHTML, children);
          target.push(endTag1, stringToChunk("title"), endTag2);
          return null;
        }
        function pushStartHead(target, props, responseState, insertionMode) {
          {
            if (insertionMode < HTML_MODE && responseState.headChunks === null) {
              responseState.headChunks = [];
              return pushStartGenericElement(responseState.headChunks, props, "head");
            } else {
              return pushStartGenericElement(target, props, "head");
            }
          }
        }
        function pushStartHtml(target, props, responseState, insertionMode) {
          {
            if (insertionMode === ROOT_HTML_MODE && responseState.htmlChunks === null) {
              responseState.htmlChunks = [DOCTYPE];
              return pushStartGenericElement(responseState.htmlChunks, props, "html");
            } else {
              return pushStartGenericElement(target, props, "html");
            }
          }
        }
        function pushScript(target, props, resources, textEmbedded, insertionMode, noscriptTagInScope) {
          {
            var asyncProp = props.async;
            if (typeof props.src !== "string" || !props.src || !(asyncProp && typeof asyncProp !== "function" && typeof asyncProp !== "symbol") || props.onLoad || props.onError || insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {
              return pushScriptImpl(target, props);
            }
            var src = props.src;
            var key = getResourceKey("script", src);
            var resource = resources.scriptsMap.get(key);
            {
              var devResource = getAsResourceDEV(resource);
              if (devResource) {
                switch (devResource.__provenance) {
                  case "rendered": {
                    var differenceDescription = describeDifferencesForScripts(
                      // Diff the props from the JSX element, not the derived resource props
                      props,
                      devResource.__originalProps
                    );
                    if (differenceDescription) {
                      error('React encountered a <script async={true} src="%s" .../> that has props that conflict with another hoistable script with the same `src`. When rendering hoistable scripts (async scripts without any loading handlers) the props from the first encountered instance will be used and props from later instances will be ignored. Update the props on both <script async={true} .../> instance so they agree.%s', src, differenceDescription);
                    }
                    break;
                  }
                  case "preinit": {
                    var _differenceDescription2 = describeDifferencesForScriptOverPreinit(
                      // Diff the props from the JSX element, not the derived resource props
                      props,
                      devResource.__propsEquivalent
                    );
                    if (_differenceDescription2) {
                      error('React encountered a <script async={true} src="%s" .../> with props that conflict with the options provided to `ReactDOM.preinit("%s", { as: "script", ... })`. React will use the first props or preinitialization options encountered when rendering a hoistable script with a particular `src` and will ignore any newer props or options. The first instance of this script resource was created using the `ReactDOM.preinit()` function. Please note, `ReactDOM.preinit()` is modeled off of module import assertions capabilities and does not support arbitrary props. If you need to have props not included with the preinit options you will need to rely on rendering <script> tags only.%s', src, src, _differenceDescription2);
                    }
                    break;
                  }
                }
              }
            }
            if (!resource) {
              resource = {
                type: "script",
                chunks: [],
                state: NoState,
                props: null
              };
              resources.scriptsMap.set(key, resource);
              {
                markAsRenderedResourceDEV(resource, props);
              }
              resources.scripts.add(resource);
              var scriptProps = props;
              var preloadResource = resources.preloadsMap.get(key);
              if (preloadResource) {
                preloadResource.state |= Blocked;
                scriptProps = assign({}, props);
                adoptPreloadPropsForScriptProps(scriptProps, preloadResource.props);
              }
              pushScriptImpl(resource.chunks, scriptProps);
            }
            if (textEmbedded) {
              target.push(textSeparator);
            }
            return null;
          }
        }
        function pushScriptImpl(target, props) {
          target.push(startChunkForTag("script"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          {
            if (children != null && typeof children !== "string") {
              var descriptiveStatement = typeof children === "number" ? "a number for children" : Array.isArray(children) ? "an array for children" : "something unexpected for children";
              error("A script element was rendered with %s. If script element has children it must be a single string. Consider using dangerouslySetInnerHTML or passing a plain string as children.", descriptiveStatement);
            }
          }
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
          }
          target.push(endTag1, stringToChunk("script"), endTag2);
          return null;
        }
        function pushStartGenericElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartCustomElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              if (typeof propValue === "function" || typeof propValue === "object") {
                continue;
              }
              if (propValue === false) {
                continue;
              }
              if (propValue === true) {
                propValue = "";
              }
              if (propKey === "className") {
                propKey = "class";
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "style":
                  pushStyleAttribute(target, propValue);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                  break;
                default:
                  if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                    target.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                  }
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var leadingNewline = stringToPrecomputedChunk("\n");
        function pushStartPreformattedElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              if (typeof html === "string" && html.length > 0 && html[0] === "\n") {
                target.push(leadingNewline, stringToChunk(html));
              } else {
                {
                  checkHtmlStringCoercion(html);
                }
                target.push(stringToChunk("" + html));
              }
            }
          }
          if (typeof children === "string" && children[0] === "\n") {
            target.push(leadingNewline);
          }
          return children;
        }
        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
        var validatedTagCache = /* @__PURE__ */ new Map();
        function startChunkForTag(tag) {
          var tagStartChunk = validatedTagCache.get(tag);
          if (tagStartChunk === void 0) {
            if (!VALID_TAG_REGEX.test(tag)) {
              throw new Error("Invalid tag: " + tag);
            }
            tagStartChunk = stringToPrecomputedChunk("<" + tag);
            validatedTagCache.set(tag, tagStartChunk);
          }
          return tagStartChunk;
        }
        var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
        function pushStartInstance(target, type, props, resources, responseState, formatContext, textEmbedded) {
          {
            validateProperties$2(type, props);
            validateProperties$1(type, props);
            validateProperties(type, props, null);
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
            if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
              if (type.indexOf("-") === -1 && type.toLowerCase() !== type) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
          }
          switch (type) {
            case "div":
            case "span":
            case "svg":
            case "path":
            case "a":
            case "g":
            case "p":
            case "li":
              break;
            case "select":
              return pushStartSelect(target, props);
            case "option":
              return pushStartOption(target, props, formatContext);
            case "textarea":
              return pushStartTextArea(target, props);
            case "input":
              return pushInput(target, props, responseState);
            case "button":
              return pushStartButton(target, props, responseState);
            case "form":
              return pushStartForm(target, props, responseState);
            case "menuitem":
              return pushStartMenuItem(target, props);
            case "title":
              return pushTitle(target, props, responseState, formatContext.insertionMode, formatContext.noscriptTagInScope);
            case "link":
              return pushLink(target, props, responseState, resources, textEmbedded, formatContext.insertionMode, formatContext.noscriptTagInScope);
            case "script":
              return pushScript(target, props, resources, textEmbedded, formatContext.insertionMode, formatContext.noscriptTagInScope);
            case "style":
              return pushStyle(target, props, resources, textEmbedded, formatContext.insertionMode, formatContext.noscriptTagInScope);
            case "meta":
              return pushMeta(target, props, responseState, textEmbedded, formatContext.insertionMode, formatContext.noscriptTagInScope);
            case "listing":
            case "pre": {
              return pushStartPreformattedElement(target, props, type);
            }
            case "base":
            case "area":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "keygen":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return pushSelfClosing(target, props, type);
            }
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph": {
              break;
            }
            case "head":
              return pushStartHead(target, props, responseState, formatContext.insertionMode);
            case "html": {
              return pushStartHtml(target, props, responseState, formatContext.insertionMode);
            }
            default: {
              if (type.indexOf("-") !== -1) {
                return pushStartCustomElement(target, props, type);
              }
            }
          }
          return pushStartGenericElement(target, props, type);
        }
        var endTag1 = stringToPrecomputedChunk("</");
        var endTag2 = stringToPrecomputedChunk(">");
        function pushEndInstance(target, type, props, responseState, formatContext) {
          switch (type) {
            case "title":
            case "style":
            case "script":
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return;
            }
            case "body": {
              if (formatContext.insertionMode <= HTML_HTML_MODE) {
                responseState.hasBody = true;
                return;
              }
              break;
            }
            case "html":
              if (formatContext.insertionMode === ROOT_HTML_MODE) {
                return;
              }
              break;
          }
          target.push(endTag1, stringToChunk(type), endTag2);
        }
        function writeBootstrap(destination, responseState) {
          var bootstrapChunks = responseState.bootstrapChunks;
          var i = 0;
          for (; i < bootstrapChunks.length - 1; i++) {
            writeChunk(destination, bootstrapChunks[i]);
          }
          if (i < bootstrapChunks.length) {
            var lastChunk = bootstrapChunks[i];
            bootstrapChunks.length = 0;
            return writeChunkAndReturn(destination, lastChunk);
          }
          return true;
        }
        function writeCompletedRoot(destination, responseState) {
          return writeBootstrap(destination, responseState);
        }
        var placeholder1 = stringToPrecomputedChunk('<template id="');
        var placeholder2 = stringToPrecomputedChunk('"></template>');
        function writePlaceholder(destination, responseState, id) {
          writeChunk(destination, placeholder1);
          writeChunk(destination, responseState.placeholderPrefix);
          var formattedID = stringToChunk(id.toString(16));
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, placeholder2);
        }
        var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
        var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
        var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
        var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
        var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
        var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="');
        var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="');
        var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
        function writeStartCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
        }
        function writeStartPendingSuspenseBoundary(destination, responseState, id) {
          writeChunk(destination, startPendingSuspenseBoundary1);
          if (id === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, id);
          return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
        }
        function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
          var result;
          result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
          writeChunk(destination, clientRenderedSuspenseBoundaryError1);
          if (errorDigest) {
            writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
            writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));
            writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
          }
          {
            if (errorMesssage) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
          }
          result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);
          return result;
        }
        function writeEndCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndPendingSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
        var startSegmentHTML2 = stringToPrecomputedChunk('">');
        var endSegmentHTML = stringToPrecomputedChunk("</div>");
        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
        var startSegmentSVG2 = stringToPrecomputedChunk('">');
        var endSegmentSVG = stringToPrecomputedChunk("</svg>");
        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
        var startSegmentMathML2 = stringToPrecomputedChunk('">');
        var endSegmentMathML = stringToPrecomputedChunk("</math>");
        var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
        var startSegmentTable2 = stringToPrecomputedChunk('">');
        var endSegmentTable = stringToPrecomputedChunk("</table>");
        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
        var startSegmentTableBody2 = stringToPrecomputedChunk('">');
        var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
        var startSegmentTableRow2 = stringToPrecomputedChunk('">');
        var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
        var startSegmentColGroup2 = stringToPrecomputedChunk('">');
        var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
        function writeStartSegment(destination, responseState, formatContext, id) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_HTML_MODE:
            case HTML_MODE: {
              writeChunk(destination, startSegmentHTML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentHTML2);
            }
            case SVG_MODE: {
              writeChunk(destination, startSegmentSVG);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentSVG2);
            }
            case MATHML_MODE: {
              writeChunk(destination, startSegmentMathML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentMathML2);
            }
            case HTML_TABLE_MODE: {
              writeChunk(destination, startSegmentTable);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTable2);
            }
            case HTML_TABLE_BODY_MODE: {
              writeChunk(destination, startSegmentTableBody);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableBody2);
            }
            case HTML_TABLE_ROW_MODE: {
              writeChunk(destination, startSegmentTableRow);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableRow2);
            }
            case HTML_COLGROUP_MODE: {
              writeChunk(destination, startSegmentColGroup);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentColGroup2);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        function writeEndSegment(destination, formatContext) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_HTML_MODE:
            case HTML_MODE: {
              return writeChunkAndReturn(destination, endSegmentHTML);
            }
            case SVG_MODE: {
              return writeChunkAndReturn(destination, endSegmentSVG);
            }
            case MATHML_MODE: {
              return writeChunkAndReturn(destination, endSegmentMathML);
            }
            case HTML_TABLE_MODE: {
              return writeChunkAndReturn(destination, endSegmentTable);
            }
            case HTML_TABLE_BODY_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableBody);
            }
            case HTML_TABLE_ROW_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableRow);
            }
            case HTML_COLGROUP_MODE: {
              return writeChunkAndReturn(destination, endSegmentColGroup);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegment + ';$RS("');
        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
        var completeSegmentScript2 = stringToPrecomputedChunk('","');
        var completeSegmentScriptEnd = stringToPrecomputedChunk('")</script>');
        var completeSegmentData1 = stringToPrecomputedChunk('<template data-rsi="" data-sid="');
        var completeSegmentData2 = stringToPrecomputedChunk('" data-pid="');
        var completeSegmentDataEnd = dataElementQuotedEnd;
        function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
          var scriptFormat = responseState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, responseState.startInlineScript);
            if ((responseState.instructions & SentCompleteSegmentFunction) === NothingSent) {
              responseState.instructions |= SentCompleteSegmentFunction;
              writeChunk(destination, completeSegmentScript1Full);
            } else {
              writeChunk(destination, completeSegmentScript1Partial);
            }
          } else {
            writeChunk(destination, completeSegmentData1);
          }
          writeChunk(destination, responseState.segmentPrefix);
          var formattedID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, formattedID);
          if (scriptFormat) {
            writeChunk(destination, completeSegmentScript2);
          } else {
            writeChunk(destination, completeSegmentData2);
          }
          writeChunk(destination, responseState.placeholderPrefix);
          writeChunk(destination, formattedID);
          if (scriptFormat) {
            return writeChunkAndReturn(destination, completeSegmentScriptEnd);
          } else {
            return writeChunkAndReturn(destination, completeSegmentDataEnd);
          }
        }
        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundary + '$RC("');
        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
        var completeBoundaryWithStylesScript1FullBoth = stringToPrecomputedChunk(completeBoundary + completeBoundaryWithStyles + '$RR("');
        var completeBoundaryWithStylesScript1FullPartial = stringToPrecomputedChunk(completeBoundaryWithStyles + '$RR("');
        var completeBoundaryWithStylesScript1Partial = stringToPrecomputedChunk('$RR("');
        var completeBoundaryScript2 = stringToPrecomputedChunk('","');
        var completeBoundaryScript3a = stringToPrecomputedChunk('",');
        var completeBoundaryScript3b = stringToPrecomputedChunk('"');
        var completeBoundaryScriptEnd = stringToPrecomputedChunk(")</script>");
        var completeBoundaryData1 = stringToPrecomputedChunk('<template data-rci="" data-bid="');
        var completeBoundaryWithStylesData1 = stringToPrecomputedChunk('<template data-rri="" data-bid="');
        var completeBoundaryData2 = stringToPrecomputedChunk('" data-sid="');
        var completeBoundaryData3a = stringToPrecomputedChunk('" data-sty="');
        var completeBoundaryDataEnd = dataElementQuotedEnd;
        function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID, boundaryResources) {
          var requiresStyleInsertion;
          {
            requiresStyleInsertion = responseState.stylesToHoist;
            responseState.stylesToHoist = false;
          }
          var scriptFormat = responseState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, responseState.startInlineScript);
            if (requiresStyleInsertion) {
              if ((responseState.instructions & SentCompleteBoundaryFunction) === NothingSent) {
                responseState.instructions |= SentStyleInsertionFunction | SentCompleteBoundaryFunction;
                writeChunk(destination, clonePrecomputedChunk(completeBoundaryWithStylesScript1FullBoth));
              } else if ((responseState.instructions & SentStyleInsertionFunction) === NothingSent) {
                responseState.instructions |= SentStyleInsertionFunction;
                writeChunk(destination, completeBoundaryWithStylesScript1FullPartial);
              } else {
                writeChunk(destination, completeBoundaryWithStylesScript1Partial);
              }
            } else {
              if ((responseState.instructions & SentCompleteBoundaryFunction) === NothingSent) {
                responseState.instructions |= SentCompleteBoundaryFunction;
                writeChunk(destination, completeBoundaryScript1Full);
              } else {
                writeChunk(destination, completeBoundaryScript1Partial);
              }
            }
          } else {
            if (requiresStyleInsertion) {
              writeChunk(destination, completeBoundaryWithStylesData1);
            } else {
              writeChunk(destination, completeBoundaryData1);
            }
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          var formattedContentID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, boundaryID);
          if (scriptFormat) {
            writeChunk(destination, completeBoundaryScript2);
          } else {
            writeChunk(destination, completeBoundaryData2);
          }
          writeChunk(destination, responseState.segmentPrefix);
          writeChunk(destination, formattedContentID);
          if (requiresStyleInsertion) {
            if (scriptFormat) {
              writeChunk(destination, completeBoundaryScript3a);
              writeStyleResourceDependenciesInJS(destination, boundaryResources);
            } else {
              writeChunk(destination, completeBoundaryData3a);
              writeStyleResourceDependenciesInAttr(destination, boundaryResources);
            }
          } else {
            if (scriptFormat) {
              writeChunk(destination, completeBoundaryScript3b);
            }
          }
          var writeMore;
          if (scriptFormat) {
            writeMore = writeChunkAndReturn(destination, completeBoundaryScriptEnd);
          } else {
            writeMore = writeChunkAndReturn(destination, completeBoundaryDataEnd);
          }
          return writeBootstrap(destination, responseState) && writeMore;
        }
        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderBoundary + ';$RX("');
        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
        var clientRenderScript1A = stringToPrecomputedChunk('"');
        var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
        var clientRenderScriptEnd = stringToPrecomputedChunk(")</script>");
        var clientRenderData1 = stringToPrecomputedChunk('<template data-rxi="" data-bid="');
        var clientRenderData2 = stringToPrecomputedChunk('" data-dgst="');
        var clientRenderData3 = stringToPrecomputedChunk('" data-msg="');
        var clientRenderData4 = stringToPrecomputedChunk('" data-stck="');
        var clientRenderDataEnd = dataElementQuotedEnd;
        function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
          var scriptFormat = responseState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, responseState.startInlineScript);
            if ((responseState.instructions & SentClientRenderFunction) === NothingSent) {
              responseState.instructions |= SentClientRenderFunction;
              writeChunk(destination, clientRenderScript1Full);
            } else {
              writeChunk(destination, clientRenderScript1Partial);
            }
          } else {
            writeChunk(destination, clientRenderData1);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, boundaryID);
          if (scriptFormat) {
            writeChunk(destination, clientRenderScript1A);
          }
          if (errorDigest || errorMessage || errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")));
            } else {
              writeChunk(destination, clientRenderData2);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest || "")));
            }
          }
          if (errorMessage || errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")));
            } else {
              writeChunk(destination, clientRenderData3);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMessage || "")));
            }
          }
          if (errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));
            } else {
              writeChunk(destination, clientRenderData4);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
            }
          }
          if (scriptFormat) {
            return writeChunkAndReturn(destination, clientRenderScriptEnd);
          } else {
            return writeChunkAndReturn(destination, clientRenderDataEnd);
          }
        }
        var regexForJSStringsInInstructionScripts = /[<\u2028\u2029]/g;
        function escapeJSStringsForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInInstructionScripts, function(match) {
            switch (match) {
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        var regexForJSStringsInScripts = /[&><\u2028\u2029]/g;
        function escapeJSObjectForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInScripts, function(match) {
            switch (match) {
              case "&":
                return "\\u0026";
              case ">":
                return "\\u003e";
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        var lateStyleTagResourceOpen1 = stringToPrecomputedChunk('<style media="not all" data-precedence="');
        var lateStyleTagResourceOpen2 = stringToPrecomputedChunk('" data-href="');
        var lateStyleTagResourceOpen3 = stringToPrecomputedChunk('">');
        var lateStyleTagTemplateClose = stringToPrecomputedChunk("</style>");
        var currentlyRenderingBoundaryHasStylesToHoist = false;
        var destinationHasCapacity = true;
        function flushStyleTagsLateForBoundary(resource) {
          if (resource.type === "stylesheet" && (resource.state & FlushedInPreamble) === NoState) {
            currentlyRenderingBoundaryHasStylesToHoist = true;
          } else if (resource.type === "style") {
            var chunks = resource.chunks;
            var hrefs = resource.props.hrefs;
            var i = 0;
            if (chunks.length) {
              writeChunk(this, lateStyleTagResourceOpen1);
              writeChunk(this, stringToChunk(escapeTextForBrowser(resource.props.precedence)));
              if (hrefs.length) {
                writeChunk(this, lateStyleTagResourceOpen2);
                for (; i < hrefs.length - 1; i++) {
                  writeChunk(this, stringToChunk(escapeTextForBrowser(hrefs[i])));
                  writeChunk(this, spaceSeparator);
                }
                writeChunk(this, stringToChunk(escapeTextForBrowser(hrefs[i])));
              }
              writeChunk(this, lateStyleTagResourceOpen3);
              for (i = 0; i < chunks.length; i++) {
                writeChunk(this, chunks[i]);
              }
              destinationHasCapacity = writeChunkAndReturn(this, lateStyleTagTemplateClose);
              currentlyRenderingBoundaryHasStylesToHoist = true;
              chunks.length = 0;
              hrefs.length = 0;
            }
          }
        }
        function writeResourcesForBoundary(destination, boundaryResources, responseState) {
          currentlyRenderingBoundaryHasStylesToHoist = false;
          destinationHasCapacity = true;
          boundaryResources.forEach(flushStyleTagsLateForBoundary, destination);
          if (currentlyRenderingBoundaryHasStylesToHoist) {
            responseState.stylesToHoist = true;
          }
          return destinationHasCapacity;
        }
        function flushResourceInPreamble(resource) {
          if ((resource.state & (Flushed | Blocked)) === NoState) {
            var chunks = resource.chunks;
            for (var i = 0; i < chunks.length; i++) {
              writeChunk(this, chunks[i]);
            }
            resource.state |= FlushedInPreamble;
          }
        }
        function flushResourceLate(resource) {
          if ((resource.state & (Flushed | Blocked)) === NoState) {
            var chunks = resource.chunks;
            for (var i = 0; i < chunks.length; i++) {
              writeChunk(this, chunks[i]);
            }
            resource.state |= FlushedLate;
          }
        }
        var precedenceStyleTagResource = null;
        var didFlushPrecedence = false;
        function flushStyleInPreamble(resource, key, set2) {
          var chunks = resource.chunks;
          if (resource.state & Flushed) {
            set2.delete(resource);
          } else {
            if (resource.type === "style") {
              precedenceStyleTagResource = resource;
              return;
            }
            pushLinkImpl(chunks, resource.props);
            for (var i = 0; i < chunks.length; i++) {
              writeChunk(this, chunks[i]);
            }
            resource.state |= FlushedInPreamble;
            didFlushPrecedence = true;
          }
        }
        var styleTagResourceOpen1 = stringToPrecomputedChunk('<style data-precedence="');
        var styleTagResourceOpen2 = stringToPrecomputedChunk('" data-href="');
        var spaceSeparator = stringToPrecomputedChunk(" ");
        var styleTagResourceOpen3 = stringToPrecomputedChunk('">');
        var styleTagResourceClose = stringToPrecomputedChunk("</style>");
        function flushAllStylesInPreamble(set2, precedence) {
          didFlushPrecedence = false;
          set2.forEach(flushStyleInPreamble, this);
          set2.clear();
          var chunks = precedenceStyleTagResource.chunks;
          var hrefs = precedenceStyleTagResource.props.hrefs;
          if (didFlushPrecedence === false || chunks.length) {
            writeChunk(this, styleTagResourceOpen1);
            writeChunk(this, stringToChunk(escapeTextForBrowser(precedence)));
            var i = 0;
            if (hrefs.length) {
              writeChunk(this, styleTagResourceOpen2);
              for (; i < hrefs.length - 1; i++) {
                writeChunk(this, stringToChunk(escapeTextForBrowser(hrefs[i])));
                writeChunk(this, spaceSeparator);
              }
              writeChunk(this, stringToChunk(escapeTextForBrowser(hrefs[i])));
            }
            writeChunk(this, styleTagResourceOpen3);
            for (i = 0; i < chunks.length; i++) {
              writeChunk(this, chunks[i]);
            }
            writeChunk(this, styleTagResourceClose);
            chunks.length = 0;
            hrefs.length = 0;
          }
        }
        function preloadLateStyle(resource) {
          if (resource.state & PreloadFlushed) {
            return;
          }
          if (resource.type === "style") {
            return;
          }
          var chunks = resource.chunks;
          var preloadProps = preloadAsStylePropsFromProps(resource.props.href, resource.props);
          pushLinkImpl(chunks, preloadProps);
          for (var i = 0; i < chunks.length; i++) {
            writeChunk(this, chunks[i]);
          }
          resource.state |= PreloadFlushed;
          chunks.length = 0;
        }
        function preloadLateStyles(set2, precedence) {
          set2.forEach(preloadLateStyle, this);
          set2.clear();
        }
        function writePreamble(destination, resources, responseState, willFlushAllSegments) {
          if (!willFlushAllSegments && responseState.externalRuntimeScript) {
            var _responseState$extern = responseState.externalRuntimeScript, src = _responseState$extern.src, chunks = _responseState$extern.chunks;
            internalPreinitScript(resources, src, chunks);
          }
          var htmlChunks = responseState.htmlChunks;
          var headChunks = responseState.headChunks;
          var i = 0;
          if (htmlChunks) {
            for (i = 0; i < htmlChunks.length; i++) {
              writeChunk(destination, htmlChunks[i]);
            }
            if (headChunks) {
              for (i = 0; i < headChunks.length; i++) {
                writeChunk(destination, headChunks[i]);
              }
            } else {
              writeChunk(destination, startChunkForTag("head"));
              writeChunk(destination, endOfStartTag);
            }
          } else if (headChunks) {
            for (i = 0; i < headChunks.length; i++) {
              writeChunk(destination, headChunks[i]);
            }
          }
          var charsetChunks = responseState.charsetChunks;
          for (i = 0; i < charsetChunks.length; i++) {
            writeChunk(destination, charsetChunks[i]);
          }
          charsetChunks.length = 0;
          resources.preconnects.forEach(flushResourceInPreamble, destination);
          resources.preconnects.clear();
          var preconnectChunks = responseState.preconnectChunks;
          for (i = 0; i < preconnectChunks.length; i++) {
            writeChunk(destination, preconnectChunks[i]);
          }
          preconnectChunks.length = 0;
          resources.fontPreloads.forEach(flushResourceInPreamble, destination);
          resources.fontPreloads.clear();
          resources.precedences.forEach(flushAllStylesInPreamble, destination);
          resources.scripts.forEach(flushResourceInPreamble, destination);
          resources.scripts.clear();
          resources.explicitStylesheetPreloads.forEach(flushResourceInPreamble, destination);
          resources.explicitStylesheetPreloads.clear();
          resources.explicitScriptPreloads.forEach(flushResourceInPreamble, destination);
          resources.explicitScriptPreloads.clear();
          resources.explicitOtherPreloads.forEach(flushResourceInPreamble, destination);
          resources.explicitOtherPreloads.clear();
          var preloadChunks = responseState.preloadChunks;
          for (i = 0; i < preloadChunks.length; i++) {
            writeChunk(destination, preloadChunks[i]);
          }
          preloadChunks.length = 0;
          var hoistableChunks = responseState.hoistableChunks;
          for (i = 0; i < hoistableChunks.length; i++) {
            writeChunk(destination, hoistableChunks[i]);
          }
          hoistableChunks.length = 0;
          if (htmlChunks && headChunks === null) {
            writeChunk(destination, endTag1);
            writeChunk(destination, stringToChunk("head"));
            writeChunk(destination, endTag2);
          }
        }
        function writeHoistables(destination, resources, responseState) {
          var i = 0;
          resources.preconnects.forEach(flushResourceLate, destination);
          resources.preconnects.clear();
          var preconnectChunks = responseState.preconnectChunks;
          for (i = 0; i < preconnectChunks.length; i++) {
            writeChunk(destination, preconnectChunks[i]);
          }
          preconnectChunks.length = 0;
          resources.fontPreloads.forEach(flushResourceLate, destination);
          resources.fontPreloads.clear();
          resources.precedences.forEach(preloadLateStyles, destination);
          resources.scripts.forEach(flushResourceLate, destination);
          resources.scripts.clear();
          resources.explicitStylesheetPreloads.forEach(flushResourceLate, destination);
          resources.explicitStylesheetPreloads.clear();
          resources.explicitScriptPreloads.forEach(flushResourceLate, destination);
          resources.explicitScriptPreloads.clear();
          resources.explicitOtherPreloads.forEach(flushResourceLate, destination);
          resources.explicitOtherPreloads.clear();
          var preloadChunks = responseState.preloadChunks;
          for (i = 0; i < preloadChunks.length; i++) {
            writeChunk(destination, preloadChunks[i]);
          }
          preloadChunks.length = 0;
          var hoistableChunks = responseState.hoistableChunks;
          for (i = 0; i < hoistableChunks.length; i++) {
            writeChunk(destination, hoistableChunks[i]);
          }
          hoistableChunks.length = 0;
        }
        function writePostamble(destination, responseState) {
          if (responseState.hasBody) {
            writeChunk(destination, endTag1);
            writeChunk(destination, stringToChunk("body"));
            writeChunk(destination, endTag2);
          }
          if (responseState.htmlChunks) {
            writeChunk(destination, endTag1);
            writeChunk(destination, stringToChunk("html"));
            writeChunk(destination, endTag2);
          }
        }
        var arrayFirstOpenBracket = stringToPrecomputedChunk("[");
        var arraySubsequentOpenBracket = stringToPrecomputedChunk(",[");
        var arrayInterstitial = stringToPrecomputedChunk(",");
        var arrayCloseBracket = stringToPrecomputedChunk("]");
        function writeStyleResourceDependenciesInJS(destination, boundaryResources) {
          writeChunk(destination, arrayFirstOpenBracket);
          var nextArrayOpenBrackChunk = arrayFirstOpenBracket;
          boundaryResources.forEach(function(resource) {
            if (resource.type === "style")
              ;
            else if (resource.state & FlushedInPreamble)
              ;
            else if (resource.state & Flushed) {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyHrefOnlyInJS(destination, resource.props.href);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
            } else if (resource.type === "stylesheet") {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyInJS(destination, resource.props.href, resource.props["data-precedence"], resource.props);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
              resource.state |= FlushedLate;
            }
          });
          writeChunk(destination, arrayCloseBracket);
        }
        function writeStyleResourceDependencyHrefOnlyInJS(destination, href) {
          {
            checkAttributeStringCoercion(href, "href");
          }
          var coercedHref = "" + href;
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));
        }
        function writeStyleResourceDependencyInJS(destination, href, precedence, props) {
          var coercedHref = sanitizeURL("" + href);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));
          {
            checkAttributeStringCoercion(precedence, "precedence");
          }
          var coercedPrecedence = "" + precedence;
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedPrecedence)));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "href":
                case "rel":
                case "precedence":
                case "data-precedence": {
                  break;
                }
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  writeStyleResourceAttributeInJS(destination, propKey, propValue);
                  break;
              }
            }
          }
          return null;
        }
        function writeStyleResourceAttributeInJS(destination, name, value) {
          var attributeName = name.toLowerCase();
          var attributeValue;
          switch (typeof value) {
            case "function":
            case "symbol":
              return;
          }
          switch (name) {
            case "innerHTML":
            case "dangerouslySetInnerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "style":
              return;
            case "className": {
              attributeName = "class";
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            case "hidden": {
              if (value === false) {
                return;
              }
              attributeValue = "";
              break;
            }
            case "src":
            case "href": {
              value = sanitizeURL(value);
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            default: {
              if (
                // unrecognized event handlers are not SSR'd and we (apparently)
                // use on* as hueristic for these handler props
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              if (!isAttributeNameSafe(name)) {
                return;
              }
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
          }
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeName)));
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeValue)));
        }
        function writeStyleResourceDependenciesInAttr(destination, boundaryResources) {
          writeChunk(destination, arrayFirstOpenBracket);
          var nextArrayOpenBrackChunk = arrayFirstOpenBracket;
          boundaryResources.forEach(function(resource) {
            if (resource.type === "style")
              ;
            else if (resource.state & FlushedInPreamble)
              ;
            else if (resource.state & Flushed) {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyHrefOnlyInAttr(destination, resource.props.href);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
            } else if (resource.type === "stylesheet") {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyInAttr(destination, resource.props.href, resource.props["data-precedence"], resource.props);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
              resource.state |= FlushedLate;
            }
          });
          writeChunk(destination, arrayCloseBracket);
        }
        function writeStyleResourceDependencyHrefOnlyInAttr(destination, href) {
          {
            checkAttributeStringCoercion(href, "href");
          }
          var coercedHref = "" + href;
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));
        }
        function writeStyleResourceDependencyInAttr(destination, href, precedence, props) {
          var coercedHref = sanitizeURL("" + href);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));
          {
            checkAttributeStringCoercion(precedence, "precedence");
          }
          var coercedPrecedence = "" + precedence;
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedPrecedence))));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "href":
                case "rel":
                case "precedence":
                case "data-precedence": {
                  break;
                }
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  writeStyleResourceAttributeInAttr(destination, propKey, propValue);
                  break;
              }
            }
          }
          return null;
        }
        function writeStyleResourceAttributeInAttr(destination, name, value) {
          var attributeName = name.toLowerCase();
          var attributeValue;
          switch (typeof value) {
            case "function":
            case "symbol":
              return;
          }
          switch (name) {
            case "innerHTML":
            case "dangerouslySetInnerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "style":
              return;
            case "className": {
              attributeName = "class";
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            case "hidden": {
              if (value === false) {
                return;
              }
              attributeValue = "";
              break;
            }
            case "src":
            case "href": {
              value = sanitizeURL(value);
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            default: {
              if (
                // unrecognized event handlers are not SSR'd and we (apparently)
                // use on* as hueristic for these handler props
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              if (!isAttributeNameSafe(name)) {
                return;
              }
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
          }
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeName))));
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeValue))));
        }
        var NoState = 0;
        var FlushedInPreamble = 1;
        var FlushedLate = 2;
        var Flushed = 3;
        var Blocked = 4;
        var PreloadFlushed = 8;
        function createResources() {
          return {
            // persistent
            preloadsMap: /* @__PURE__ */ new Map(),
            preconnectsMap: /* @__PURE__ */ new Map(),
            stylesMap: /* @__PURE__ */ new Map(),
            scriptsMap: /* @__PURE__ */ new Map(),
            // cleared on flush
            preconnects: /* @__PURE__ */ new Set(),
            fontPreloads: /* @__PURE__ */ new Set(),
            // usedImagePreloads: new Set(),
            precedences: /* @__PURE__ */ new Map(),
            stylePrecedences: /* @__PURE__ */ new Map(),
            scripts: /* @__PURE__ */ new Set(),
            explicitStylesheetPreloads: /* @__PURE__ */ new Set(),
            // explicitImagePreloads: new Set(),
            explicitScriptPreloads: /* @__PURE__ */ new Set(),
            explicitOtherPreloads: /* @__PURE__ */ new Set(),
            // like a module global for currently rendering boundary
            boundaryResources: null
          };
        }
        function createBoundaryResources() {
          return /* @__PURE__ */ new Set();
        }
        function setCurrentlyRenderingBoundaryResourcesTarget(resources, boundaryResources) {
          resources.boundaryResources = boundaryResources;
        }
        function getResourceKey(as, href) {
          return "[" + as + "]" + href;
        }
        function prefetchDNS(href, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resources = getResources(request);
          {
            if (typeof href !== "string" || !href) {
              error("ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
            } else if (options != null) {
              if (typeof options === "object" && options.hasOwnProperty("crossOrigin")) {
                error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options));
              } else {
                error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options));
              }
            }
          }
          if (typeof href === "string" && href) {
            var key = getResourceKey("prefetchDNS", href);
            var resource = resources.preconnectsMap.get(key);
            if (!resource) {
              resource = {
                type: "preconnect",
                chunks: [],
                state: NoState,
                props: null
              };
              resources.preconnectsMap.set(key, resource);
              pushLinkImpl(resource.chunks, {
                href,
                rel: "dns-prefetch"
              });
            }
            resources.preconnects.add(resource);
            flushResources(request);
          }
        }
        function preconnect(href, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resources = getResources(request);
          {
            if (typeof href !== "string" || !href) {
              error("ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
            } else if (options != null && typeof options !== "object") {
              error("ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.", getValueDescriptorExpectingEnumForWarning(options));
            } else if (options != null && typeof options.crossOrigin !== "string") {
              error("ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.", getValueDescriptorExpectingObjectForWarning(options.crossOrigin));
            }
          }
          if (typeof href === "string" && href) {
            var crossOrigin = options == null || typeof options.crossOrigin !== "string" ? null : options.crossOrigin === "use-credentials" ? "use-credentials" : "";
            var key = "[preconnect][" + (crossOrigin === null ? "null" : crossOrigin) + "]" + href;
            var resource = resources.preconnectsMap.get(key);
            if (!resource) {
              resource = {
                type: "preconnect",
                chunks: [],
                state: NoState,
                props: null
              };
              resources.preconnectsMap.set(key, resource);
              pushLinkImpl(resource.chunks, {
                rel: "preconnect",
                href,
                crossOrigin
              });
            }
            resources.preconnects.add(resource);
            flushResources(request);
          }
        }
        function preload(href, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resources = getResources(request);
          {
            var encountered = "";
            if (typeof href !== "string" || !href) {
              encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".";
            }
            if (options == null || typeof options !== "object") {
              encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + ".";
            } else if (typeof options.as !== "string" || !options.as) {
              encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".";
            }
            if (encountered) {
              error('ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s', encountered);
            }
          }
          if (typeof href === "string" && href && typeof options === "object" && options !== null && typeof options.as === "string" && options.as) {
            var as = options.as;
            var key;
            if (as === "image") {
              var imageSrcSet = options.imageSrcSet, imageSizes = options.imageSizes;
              var uniquePart = "";
              if (typeof imageSrcSet === "string" && imageSrcSet !== "") {
                uniquePart += "[" + imageSrcSet + "]";
                if (typeof imageSizes === "string") {
                  uniquePart += "[" + imageSizes + "]";
                }
              } else {
                uniquePart += "[][]" + href;
              }
              key = getResourceKey(as, uniquePart);
            } else {
              key = getResourceKey(as, href);
            }
            var resource = resources.preloadsMap.get(key);
            {
              var devResource = getAsResourceDEV(resource);
              if (devResource) {
                switch (devResource.__provenance) {
                  case "preload": {
                    var differenceDescription = describeDifferencesForPreloads(options, devResource.__originalOptions);
                    if (differenceDescription) {
                      error('ReactDOM.preload(): The options provided conflict with another call to `ReactDOM.preload("%s", { as: "%s", ...})`. React will always use the options it first encounters when preloading a resource for a given `href` and `as` type, and any later options will be ignored if different. Try updating all calls to `ReactDOM.preload()` with the same `href` and `as` type to use the same options, or eliminate one of the calls.%s', href, as, differenceDescription);
                    }
                    break;
                  }
                  case "implicit": {
                    var _differenceDescription3 = describeDifferencesForPreloadOverImplicitPreload(options, devResource.__impliedProps);
                    if (_differenceDescription3) {
                      var elementDescription = as === "style" ? '<link rel="stylesheet" ... />' : as === "script" ? "<script ... />" : null;
                      if (elementDescription) {
                        error('ReactDOM.preload(): For `href` "%s", The options provided conflict with props on a matching %s element. When the preload options disagree with the underlying resource it usually means the browser will not be able to use the preload when the resource is fetched, negating any benefit the preload would provide. React will preload the resource using props derived from the resource instead and ignore the options provided to the `ReactDOM.preload()` call. In general, preloading is useful when you expect to render a resource soon but have not yet done so. In this case since the underlying resource was already rendered the preload call may be extraneous. Try removing the call, otherwise try adjusting both the props on the %s and the options passed to `ReactDOM.preload()` to agree.%s', href, elementDescription, elementDescription, _differenceDescription3);
                      }
                    }
                    break;
                  }
                }
              }
            }
            if (!resource) {
              resource = {
                type: "preload",
                chunks: [],
                state: NoState,
                props: preloadPropsFromPreloadOptions(href, as, options)
              };
              resources.preloadsMap.set(key, resource);
              {
                markAsImperativeResourceDEV(resource, "preload", href, options, resource.props);
              }
              pushLinkImpl(resource.chunks, resource.props);
            }
            switch (as) {
              case "font": {
                resources.fontPreloads.add(resource);
                break;
              }
              case "style": {
                resources.explicitStylesheetPreloads.add(resource);
                break;
              }
              case "script": {
                resources.explicitScriptPreloads.add(resource);
                break;
              }
              default: {
                resources.explicitOtherPreloads.add(resource);
              }
            }
            flushResources(request);
          }
        }
        function preinit(href, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resources = getResources(request);
          {
            if (typeof href !== "string" || !href) {
              error("ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
            } else if (options == null || typeof options !== "object") {
              error("ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.", getValueDescriptorExpectingEnumForWarning(options));
            } else if (options.as !== "style" && options.as !== "script") {
              error('ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".', getValueDescriptorExpectingEnumForWarning(options.as));
            }
          }
          if (typeof href === "string" && href && typeof options === "object" && options !== null) {
            var as = options.as;
            switch (as) {
              case "style": {
                var key = getResourceKey(as, href);
                var resource = resources.stylesMap.get(key);
                var precedence = options.precedence || "default";
                {
                  var devResource = getAsResourceDEV(resource);
                  if (devResource) {
                    var resourceProps = stylesheetPropsFromPreinitOptions(href, precedence, options);
                    var propsEquivalent = assign({}, resourceProps, _defineProperty({
                      precedence: options.precedence
                    }, "data-precedence", null));
                    switch (devResource.__provenance) {
                      case "rendered": {
                        var differenceDescription = describeDifferencesForPreinitOverStylesheet(
                          // Diff the props from the JSX element, not the derived resource props
                          propsEquivalent,
                          devResource.__originalProps
                        );
                        if (differenceDescription) {
                          error('ReactDOM.preinit(): For `href` "%s", the options provided conflict with props found on a <link rel="stylesheet" precedence="%s" href="%s" .../> that was already rendered. React will always use the props or options it first encounters for a hoistable stylesheet for a given `href` and any later props or options will be ignored if different. Generally, ReactDOM.preinit() is useful when you are not yet rendering a stylesheet but you anticipate it will be used soon. In this case the stylesheet was already rendered so preinitializing it does not provide any additional benefit. To resolve, try making the props and options agree between the <link rel="stylesheet" .../> and the `ReactDOM.preinit()` call or remove the `ReactDOM.preinit()` call.%s', href, devResource.__originalProps.precedence, href, differenceDescription);
                        }
                        break;
                      }
                      case "preinit": {
                        var _differenceDescription4 = describeDifferencesForPreinits(
                          // Diff the props from the JSX element, not the derived resource props
                          propsEquivalent,
                          devResource.__propsEquivalent
                        );
                        if (_differenceDescription4) {
                          error('ReactDOM.preinit(): For `href` "%s", the options provided conflict with another call to `ReactDOM.preinit("%s", { as: "style", ... })`. React will always use the options it first encounters when preinitializing a hoistable stylesheet for a given `href` and any later options will be ignored if different. Try updating all calls to `ReactDOM.preinit()` for a given `href` to use the same options, or only call `ReactDOM.preinit()` once per `href`.%s', href, href, _differenceDescription4);
                        }
                        break;
                      }
                    }
                  }
                }
                if (!resource) {
                  var state = NoState;
                  var preloadResource = resources.preloadsMap.get(key);
                  if (preloadResource && preloadResource.state & Flushed) {
                    state = PreloadFlushed;
                  }
                  resource = {
                    type: "stylesheet",
                    chunks: [],
                    state,
                    props: stylesheetPropsFromPreinitOptions(href, precedence, options)
                  };
                  resources.stylesMap.set(key, resource);
                  {
                    markAsImperativeResourceDEV(resource, "preinit", href, options, assign({}, resource.props, _defineProperty({
                      precedence
                    }, "data-precedence", void 0)));
                  }
                  var precedenceSet = resources.precedences.get(precedence);
                  if (!precedenceSet) {
                    precedenceSet = /* @__PURE__ */ new Set();
                    resources.precedences.set(precedence, precedenceSet);
                    var emptyStyleResource = {
                      type: "style",
                      chunks: [],
                      state: NoState,
                      props: {
                        precedence,
                        hrefs: []
                      }
                    };
                    precedenceSet.add(emptyStyleResource);
                    {
                      if (resources.stylePrecedences.has(precedence)) {
                        error('React constructed an empty style resource when a style resource already exists for this precedence: "%s". This is a bug in React.', precedence);
                      }
                    }
                    resources.stylePrecedences.set(precedence, emptyStyleResource);
                  }
                  precedenceSet.add(resource);
                  flushResources(request);
                }
                return;
              }
              case "script": {
                var src = href;
                var _key = getResourceKey(as, src);
                var _resource = resources.scriptsMap.get(_key);
                {
                  var _devResource = getAsResourceDEV(_resource);
                  if (_devResource) {
                    var _propsEquivalent = scriptPropsFromPreinitOptions(src, options);
                    switch (_devResource.__provenance) {
                      case "rendered": {
                        var _differenceDescription5 = describeDifferencesForPreinitOverScript(
                          // Diff the props from the JSX element, not the derived resource props
                          _propsEquivalent,
                          _devResource.__originalProps
                        );
                        if (_differenceDescription5) {
                          error('ReactDOM.preinit(): For `href` "%s", the options provided conflict with props found on a <script async={true} src="%s" .../> that was already rendered. React will always use the props or options it first encounters for a hoistable script for a given `href` and any later props or options will be ignored if different. Generally, ReactDOM.preinit() is useful when you are not yet rendering a script but you anticipate it will be used soon and want to go beyond preloading it and have it execute early. In this case the script was already rendered so preinitializing it does not provide any additional benefit. To resolve, try making the props and options agree between the <script .../> and the `ReactDOM.preinit()` call or remove the `ReactDOM.preinit()` call.%s', href, href, _differenceDescription5);
                        }
                        break;
                      }
                      case "preinit": {
                        var _differenceDescription6 = describeDifferencesForPreinits(
                          // Diff the props from the JSX element, not the derived resource props
                          _propsEquivalent,
                          _devResource.__propsEquivalent
                        );
                        if (_differenceDescription6) {
                          error('ReactDOM.preinit(): For `href` "%s", the options provided conflict with another call to `ReactDOM.preinit("%s", { as: "script", ... })`. React will always use the options it first encounters when preinitializing a hoistable script for a given `href` and any later options will be ignored if different. Try updating all calls to `ReactDOM.preinit()` for a given `href` to use the same options, or only call `ReactDOM.preinit()` once per `href`.%s', href, href, _differenceDescription6);
                        }
                        break;
                      }
                    }
                  }
                }
                if (!_resource) {
                  _resource = {
                    type: "script",
                    chunks: [],
                    state: NoState,
                    props: null
                  };
                  resources.scriptsMap.set(_key, _resource);
                  var _resourceProps = scriptPropsFromPreinitOptions(src, options);
                  {
                    markAsImperativeResourceDEV(_resource, "preinit", href, options, _resourceProps);
                  }
                  resources.scripts.add(_resource);
                  pushScriptImpl(_resource.chunks, _resourceProps);
                  flushResources(request);
                }
                return;
              }
            }
          }
        }
        function preloadBootstrapScript(resources, src, nonce, integrity, crossOrigin) {
          var key = getResourceKey("script", src);
          {
            if (resources.preloadsMap.has(key)) {
              error('Internal React Error: React expected bootstrap script with src "%s" to not have been preloaded already. please file an issue', src);
            }
          }
          var props = {
            rel: "preload",
            href: src,
            as: "script",
            nonce,
            integrity,
            crossOrigin
          };
          var resource = {
            type: "preload",
            chunks: [],
            state: NoState,
            props
          };
          resources.preloadsMap.set(key, resource);
          resources.explicitScriptPreloads.add(resource);
          pushLinkImpl(resource.chunks, props);
        }
        function preloadBootstrapModule(resources, src, nonce, integrity, crossOrigin) {
          var key = getResourceKey("script", src);
          {
            if (resources.preloadsMap.has(key)) {
              error('Internal React Error: React expected bootstrap module with src "%s" to not have been preloaded already. please file an issue', src);
            }
          }
          var props = {
            rel: "modulepreload",
            href: src,
            nonce,
            integrity,
            crossOrigin
          };
          var resource = {
            type: "preload",
            chunks: [],
            state: NoState,
            props
          };
          resources.preloadsMap.set(key, resource);
          resources.explicitScriptPreloads.add(resource);
          pushLinkImpl(resource.chunks, props);
          return;
        }
        function internalPreinitScript(resources, src, chunks) {
          var key = getResourceKey("script", src);
          var resource = resources.scriptsMap.get(key);
          if (!resource) {
            resource = {
              type: "script",
              chunks,
              state: NoState,
              props: null
            };
            resources.scriptsMap.set(key, resource);
            resources.scripts.add(resource);
          }
          return;
        }
        function preloadPropsFromPreloadOptions(href, as, options) {
          return {
            rel: "preload",
            as,
            // There is a bug in Safari where imageSrcSet is not respected on preload links
            // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.
            // This harms older browers that do not support imageSrcSet by making their preloads not work
            // but this population is shrinking fast and is already small so we accept this tradeoff.
            href: as === "image" && options.imageSrcSet ? void 0 : href,
            crossOrigin: as === "font" ? "" : options.crossOrigin,
            integrity: options.integrity,
            type: options.type,
            nonce: options.nonce,
            fetchPriority: options.fetchPriority,
            imageSrcSet: options.imageSrcSet,
            imageSizes: options.imageSizes
          };
        }
        function preloadAsStylePropsFromProps(href, props) {
          return {
            rel: "preload",
            as: "style",
            href,
            crossOrigin: props.crossOrigin,
            fetchPriority: props.fetchPriority,
            integrity: props.integrity,
            media: props.media,
            hrefLang: props.hrefLang,
            referrerPolicy: props.referrerPolicy
          };
        }
        function stylesheetPropsFromPreinitOptions(href, precedence, options) {
          return {
            rel: "stylesheet",
            href,
            "data-precedence": precedence,
            crossOrigin: options.crossOrigin,
            integrity: options.integrity,
            fetchPriority: options.fetchPriority
          };
        }
        function stylesheetPropsFromRawProps(rawProps) {
          return assign({}, rawProps, {
            "data-precedence": rawProps.precedence,
            precedence: null
          });
        }
        function adoptPreloadPropsForStylesheetProps(resourceProps, preloadProps) {
          if (resourceProps.crossOrigin == null)
            resourceProps.crossOrigin = preloadProps.crossOrigin;
          if (resourceProps.integrity == null)
            resourceProps.integrity = preloadProps.integrity;
        }
        function scriptPropsFromPreinitOptions(src, options) {
          return {
            src,
            async: true,
            crossOrigin: options.crossOrigin,
            integrity: options.integrity,
            nonce: options.nonce,
            fetchPriority: options.fetchPriority
          };
        }
        function adoptPreloadPropsForScriptProps(resourceProps, preloadProps) {
          if (resourceProps.crossOrigin == null)
            resourceProps.crossOrigin = preloadProps.crossOrigin;
          if (resourceProps.integrity == null)
            resourceProps.integrity = preloadProps.integrity;
        }
        function hoistStyleResource(resource) {
          this.add(resource);
        }
        function hoistResources(resources, source) {
          var currentBoundaryResources = resources.boundaryResources;
          if (currentBoundaryResources) {
            source.forEach(hoistStyleResource, currentBoundaryResources);
          }
        }
        function markAsRenderedResourceDEV(resource, originalProps) {
          {
            var devResource = resource;
            if (typeof devResource.__provenance === "string") {
              error("Resource already marked for DEV type. This is a bug in React.");
            }
            devResource.__provenance = "rendered";
            devResource.__originalProps = originalProps;
          }
        }
        function markAsImperativeResourceDEV(resource, provenance, originalHref, originalOptions, propsEquivalent) {
          {
            var devResource = resource;
            if (typeof devResource.__provenance === "string") {
              error("Resource already marked for DEV type. This is a bug in React.");
            }
            devResource.__provenance = provenance;
            devResource.__originalHref = originalHref;
            devResource.__originalOptions = originalOptions;
            devResource.__propsEquivalent = propsEquivalent;
          }
        }
        function getAsResourceDEV(resource) {
          {
            if (resource) {
              if (typeof resource.__provenance === "string") {
                return resource;
              }
              error("Resource was not marked for DEV type. This is a bug in React.");
            }
            return null;
          }
        }
        var NotPendingTransition = NotPending;
        var requestStorage = new async_hooks.AsyncLocalStorage();
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
        var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_CACHE_TYPE: {
              return "Cache";
            }
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
              case REACT_SERVER_CONTEXT_TYPE: {
                var context2 = type;
                return (context2.displayName || context2._globalName) + ".Provider";
              }
            }
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct$1(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        function getMaskedContext(type, unmaskedContext) {
          {
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            return context;
          }
        }
        function processChildContext(instance, type, parentContext, childContextTypes) {
          {
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var rootContextSnapshot = null;
        var currentActiveSnapshot = null;
        function popNode(prev) {
          {
            prev.context._currentValue = prev.parentValue;
          }
        }
        function pushNode(next) {
          {
            next.context._currentValue = next.value;
          }
        }
        function popToNearestCommonAncestor(prev, next) {
          if (prev === next)
            ;
          else {
            popNode(prev);
            var parentPrev = prev.parent;
            var parentNext = next.parent;
            if (parentPrev === null) {
              if (parentNext !== null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
            } else {
              if (parentNext === null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
              popToNearestCommonAncestor(parentPrev, parentNext);
            }
            pushNode(next);
          }
        }
        function popAllPrevious(prev) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev !== null) {
            popAllPrevious(parentPrev);
          }
        }
        function pushAllNext(next) {
          var parentNext = next.parent;
          if (parentNext !== null) {
            pushAllNext(parentNext);
          }
          pushNode(next);
        }
        function popPreviousToCommonLevel(prev, next) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (parentPrev.depth === next.depth) {
            popToNearestCommonAncestor(parentPrev, next);
          } else {
            popPreviousToCommonLevel(parentPrev, next);
          }
        }
        function popNextToCommonLevel(prev, next) {
          var parentNext = next.parent;
          if (parentNext === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (prev.depth === parentNext.depth) {
            popToNearestCommonAncestor(prev, parentNext);
          } else {
            popNextToCommonLevel(prev, parentNext);
          }
          pushNode(next);
        }
        function switchContext(newSnapshot) {
          var prev = currentActiveSnapshot;
          var next = newSnapshot;
          if (prev !== next) {
            if (prev === null) {
              pushAllNext(next);
            } else if (next === null) {
              popAllPrevious(prev);
            } else if (prev.depth === next.depth) {
              popToNearestCommonAncestor(prev, next);
            } else if (prev.depth > next.depth) {
              popPreviousToCommonLevel(prev, next);
            } else {
              popNextToCommonLevel(prev, next);
            }
            currentActiveSnapshot = next;
          }
        }
        function pushProvider(context, nextValue) {
          var prevValue;
          {
            prevValue = context._currentValue;
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
          var prevNode = currentActiveSnapshot;
          var newNode = {
            parent: prevNode,
            depth: prevNode === null ? 0 : prevNode.depth + 1,
            context,
            parentValue: prevValue,
            value: nextValue
          };
          currentActiveSnapshot = newNode;
          return newNode;
        }
        function popProvider(context) {
          var prevSnapshot = currentActiveSnapshot;
          if (prevSnapshot === null) {
            throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
          }
          {
            if (prevSnapshot.context !== context) {
              error("The parent context is not the expected context. This is probably a bug in React.");
            }
          }
          {
            var value = prevSnapshot.parentValue;
            if (value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
              prevSnapshot.context._currentValue = prevSnapshot.context._defaultValue;
            } else {
              prevSnapshot.context._currentValue = value;
            }
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
          return currentActiveSnapshot = prevSnapshot.parent;
        }
        function getActiveContext() {
          return currentActiveSnapshot;
        }
        function readContext$1(context) {
          var value = context._currentValue;
          return value;
        }
        function get(key) {
          return key._reactInternals;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var didWarnAboutNoopUpdateForComponent = {};
        var didWarnAboutDeprecatedWillMount = {};
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        var didWarnOnInvalidCallback;
        {
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        }
        function warnOnInvalidCallback(callback, callerName) {
          {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function warnOnUndefinedDerivedState(type, partialState) {
          {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          }
        }
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnAboutNoopUpdateForComponent[warningKey]) {
              return;
            }
            error("%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, callerName, componentName);
            didWarnAboutNoopUpdateForComponent[warningKey] = true;
          }
        }
        var classComponentUpdater = {
          isMounted: function(inst) {
            return false;
          },
          // $FlowFixMe[missing-local-annot]
          enqueueSetState: function(inst, payload, callback) {
            var internals = get(inst);
            if (internals.queue === null) {
              warnNoop(inst, "setState");
            } else {
              internals.queue.push(payload);
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var internals = get(inst);
            internals.replace = true;
            internals.queue = [payload];
            {
              if (callback !== void 0 && callback !== null) {
                warnOnInvalidCallback(callback, "setState");
              }
            }
          },
          // $FlowFixMe[missing-local-annot]
          enqueueForceUpdate: function(inst, callback) {
            var internals = get(inst);
            if (internals.queue === null) {
              warnNoop(inst, "forceUpdate");
            } else {
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            }
          }
        };
        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var newState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          return newState;
        }
        function constructClassInstance(ctor, props, maskedLegacyContext) {
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext$1(contextType);
          } else {
            context = maskedLegacyContext;
          }
          var instance = new ctor(props, context);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          return instance;
        }
        function checkClassInstance(instance, ctor, newProps) {
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var state = instance.state;
            if (state && (typeof state !== "object" || isArray(state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function callComponentWillMount(type, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            {
              if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDeprecatedWillMount[componentName]) {
                  warn(
                    // keep this warning in sync with ReactStrictModeWarning.js
                    "componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s",
                    componentName
                  );
                  didWarnAboutDeprecatedWillMount[componentName] = true;
                }
              }
            }
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
          if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
            var oldQueue = internalInstance.queue;
            var oldReplace = internalInstance.replace;
            internalInstance.queue = null;
            internalInstance.replace = false;
            if (oldReplace && oldQueue.length === 1) {
              inst.state = oldQueue[0];
            } else {
              var nextState = oldReplace ? oldQueue[0] : inst.state;
              var dontMutate = true;
              for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                var partial = oldQueue[i];
                var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                if (partialState != null) {
                  if (dontMutate) {
                    dontMutate = false;
                    nextState = assign({}, nextState, partialState);
                  } else {
                    assign(nextState, partialState);
                  }
                }
              }
              inst.state = nextState;
            }
          } else {
            internalInstance.queue = null;
          }
        }
        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
          {
            checkClassInstance(instance, ctor, newProps);
          }
          var initialState = instance.state !== void 0 ? instance.state : null;
          instance.updater = classComponentUpdater;
          instance.props = newProps;
          instance.state = initialState;
          var internalInstance = {
            queue: [],
            replace: false
          };
          set(instance, internalInstance);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext$1(contextType);
          } else {
            instance.context = maskedLegacyContext;
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(ctor, instance);
            processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
          }
        }
        var emptyTreeContext = {
          id: 1,
          overflow: ""
        };
        function getTreeId(context) {
          var overflow = context.overflow;
          var idWithLeadingBit = context.id;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeContext(baseContext, totalChildren, index) {
          var baseIdWithLeadingBit = baseContext.id;
          var baseOverflow = baseContext.overflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            return {
              id: 1 << restOfLength | id,
              overflow
            };
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            return {
              id: 1 << length | _id,
              overflow: _overflow
            };
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var SuspenseException = new Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`");
        function createThenableState() {
          return [];
        }
        function noop$2() {
        }
        function trackUsedThenable(thenableState2, thenable, index) {
          var previous = thenableState2[index];
          if (previous === void 0) {
            thenableState2.push(thenable);
          } else {
            if (previous !== thenable) {
              thenable.then(noop$2, noop$2);
              thenable = previous;
            }
          }
          switch (thenable.status) {
            case "fulfilled": {
              var fulfilledValue = thenable.value;
              return fulfilledValue;
            }
            case "rejected": {
              var rejectedError = thenable.reason;
              throw rejectedError;
            }
            default: {
              if (typeof thenable.status === "string")
                ;
              else {
                var pendingThenable = thenable;
                pendingThenable.status = "pending";
                pendingThenable.then(function(fulfilledValue2) {
                  if (thenable.status === "pending") {
                    var fulfilledThenable2 = thenable;
                    fulfilledThenable2.status = "fulfilled";
                    fulfilledThenable2.value = fulfilledValue2;
                  }
                }, function(error2) {
                  if (thenable.status === "pending") {
                    var rejectedThenable2 = thenable;
                    rejectedThenable2.status = "rejected";
                    rejectedThenable2.reason = error2;
                  }
                });
                switch (thenable.status) {
                  case "fulfilled": {
                    var fulfilledThenable = thenable;
                    return fulfilledThenable.value;
                  }
                  case "rejected": {
                    var rejectedThenable = thenable;
                    throw rejectedThenable.reason;
                  }
                }
              }
              suspendedThenable = thenable;
              throw SuspenseException;
            }
          }
        }
        var suspendedThenable = null;
        function getSuspendedThenable() {
          if (suspendedThenable === null) {
            throw new Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
          }
          var thenable = suspendedThenable;
          suspendedThenable = null;
          return thenable;
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = (
          // $FlowFixMe[method-unbinding]
          typeof Object.is === "function" ? Object.is : is
        );
        var currentlyRenderingComponent = null;
        var currentlyRenderingTask = null;
        var firstWorkInProgressHook = null;
        var workInProgressHook = null;
        var isReRender = false;
        var didScheduleRenderPhaseUpdate = false;
        var localIdCounter = 0;
        var thenableIndexCounter = 0;
        var thenableState = null;
        var renderPhaseUpdates = null;
        var numberOfReRenders = 0;
        var RE_RENDER_LIMIT = 25;
        var isInHookUserCodeInDev = false;
        var currentHookNameInDev;
        function resolveCurrentlyRenderingComponent() {
          if (currentlyRenderingComponent === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          {
            if (isInHookUserCodeInDev) {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            }
          }
          return currentlyRenderingComponent;
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function createHook() {
          if (numberOfReRenders > 0) {
            throw new Error("Rendered more hooks than during the previous render");
          }
          return {
            memoizedState: null,
            queue: null,
            next: null
          };
        }
        function createWorkInProgressHook() {
          if (workInProgressHook === null) {
            if (firstWorkInProgressHook === null) {
              isReRender = false;
              firstWorkInProgressHook = workInProgressHook = createHook();
            } else {
              isReRender = true;
              workInProgressHook = firstWorkInProgressHook;
            }
          } else {
            if (workInProgressHook.next === null) {
              isReRender = false;
              workInProgressHook = workInProgressHook.next = createHook();
            } else {
              isReRender = true;
              workInProgressHook = workInProgressHook.next;
            }
          }
          return workInProgressHook;
        }
        function prepareToUseHooks(task, componentIdentity, prevThenableState) {
          currentlyRenderingComponent = componentIdentity;
          currentlyRenderingTask = task;
          {
            isInHookUserCodeInDev = false;
          }
          localIdCounter = 0;
          thenableIndexCounter = 0;
          thenableState = prevThenableState;
        }
        function finishHooks(Component, props, children, refOrContext) {
          while (didScheduleRenderPhaseUpdate) {
            didScheduleRenderPhaseUpdate = false;
            localIdCounter = 0;
            thenableIndexCounter = 0;
            numberOfReRenders += 1;
            workInProgressHook = null;
            children = Component(props, refOrContext);
          }
          resetHooksState();
          return children;
        }
        function getThenableStateAfterSuspending() {
          var state = thenableState;
          thenableState = null;
          return state;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          return didRenderIdHook;
        }
        function resetHooksState() {
          {
            isInHookUserCodeInDev = false;
          }
          currentlyRenderingComponent = null;
          currentlyRenderingTask = null;
          didScheduleRenderPhaseUpdate = false;
          firstWorkInProgressHook = null;
          numberOfReRenders = 0;
          renderPhaseUpdates = null;
          workInProgressHook = null;
        }
        function readContext(context) {
          {
            if (isInHookUserCodeInDev) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          return readContext$1(context);
        }
        function useContext(context) {
          {
            currentHookNameInDev = "useContext";
          }
          resolveCurrentlyRenderingComponent();
          return readContext$1(context);
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function useState2(initialState) {
          {
            currentHookNameInDev = "useState";
          }
          return useReducer(
            basicStateReducer,
            // useReducer has a special case to support lazy useState initializers
            initialState
          );
        }
        function useReducer(reducer, initialArg, init) {
          {
            if (reducer !== basicStateReducer) {
              currentHookNameInDev = "useReducer";
            }
          }
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          if (isReRender) {
            var queue = workInProgressHook.queue;
            var dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate !== void 0) {
                renderPhaseUpdates.delete(queue);
                var newState = workInProgressHook.memoizedState;
                var update = firstRenderPhaseUpdate;
                do {
                  var action = update.action;
                  {
                    isInHookUserCodeInDev = true;
                  }
                  newState = reducer(newState, action);
                  {
                    isInHookUserCodeInDev = false;
                  }
                  update = update.next;
                } while (update !== null);
                workInProgressHook.memoizedState = newState;
                return [newState, dispatch];
              }
            }
            return [workInProgressHook.memoizedState, dispatch];
          } else {
            {
              isInHookUserCodeInDev = true;
            }
            var initialState;
            if (reducer === basicStateReducer) {
              initialState = typeof initialArg === "function" ? initialArg() : initialArg;
            } else {
              initialState = init !== void 0 ? init(initialArg) : initialArg;
            }
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = initialState;
            var _queue = workInProgressHook.queue = {
              last: null,
              dispatch: null
            };
            var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
            return [workInProgressHook.memoizedState, _dispatch];
          }
        }
        function useMemo(nextCreate, deps) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          if (workInProgressHook !== null) {
            var prevState = workInProgressHook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
          }
          {
            isInHookUserCodeInDev = true;
          }
          var nextValue = nextCreate();
          {
            isInHookUserCodeInDev = false;
          }
          workInProgressHook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function useRef(initialValue) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var previousRef = workInProgressHook.memoizedState;
          if (previousRef === null) {
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            workInProgressHook.memoizedState = ref;
            return ref;
          } else {
            return previousRef;
          }
        }
        function dispatchAction(componentIdentity, queue, action) {
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          if (componentIdentity === currentlyRenderingComponent) {
            didScheduleRenderPhaseUpdate = true;
            var update = {
              action,
              next: null
            };
            if (renderPhaseUpdates === null) {
              renderPhaseUpdates = /* @__PURE__ */ new Map();
            }
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === void 0) {
              renderPhaseUpdates.set(queue, update);
            } else {
              var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
              while (lastRenderPhaseUpdate.next !== null) {
                lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              }
              lastRenderPhaseUpdate.next = update;
            }
          }
        }
        function useCallback(callback, deps) {
          return useMemo(function() {
            return callback;
          }, deps);
        }
        function throwOnUseEffectEventCall() {
          throw new Error("A function wrapped in useEffectEvent can't be called during rendering.");
        }
        function useEffectEvent(callback) {
          return throwOnUseEffectEventCall;
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          return getServerSnapshot();
        }
        function useDeferredValue(value) {
          resolveCurrentlyRenderingComponent();
          return value;
        }
        function unsupportedStartTransition() {
          throw new Error("startTransition cannot be called during server rendering.");
        }
        function useTransition() {
          resolveCurrentlyRenderingComponent();
          return [false, unsupportedStartTransition];
        }
        function useHostTransitionStatus() {
          resolveCurrentlyRenderingComponent();
          return NotPendingTransition;
        }
        function unsupportedSetOptimisticState() {
          throw new Error("Cannot update optimistic state while rendering.");
        }
        function useOptimistic(passthrough, reducer) {
          resolveCurrentlyRenderingComponent();
          return [passthrough, unsupportedSetOptimisticState];
        }
        function useId() {
          var task = currentlyRenderingTask;
          var treeId = getTreeId(task.treeContext);
          var responseState = currentResponseState;
          if (responseState === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
          }
          var localId = localIdCounter++;
          return makeId(responseState, treeId, localId);
        }
        function use2(usable) {
          if (usable !== null && typeof usable === "object") {
            if (typeof usable.then === "function") {
              var thenable = usable;
              return unwrapThenable(thenable);
            } else if (usable.$$typeof === REACT_CONTEXT_TYPE || usable.$$typeof === REACT_SERVER_CONTEXT_TYPE) {
              var context = usable;
              return readContext(context);
            }
          }
          throw new Error("An unsupported type was passed to use(): " + String(usable));
        }
        function unwrapThenable(thenable) {
          var index = thenableIndexCounter;
          thenableIndexCounter += 1;
          if (thenableState === null) {
            thenableState = createThenableState();
          }
          return trackUsedThenable(thenableState, thenable, index);
        }
        function unsupportedRefresh() {
          throw new Error("Cache cannot be refreshed during server rendering.");
        }
        function useCacheRefresh() {
          return unsupportedRefresh;
        }
        function useMemoCache(size) {
          var data = new Array(size);
          for (var i = 0; i < size; i++) {
            data[i] = REACT_MEMO_CACHE_SENTINEL;
          }
          return data;
        }
        function noop$1() {
        }
        var HooksDispatcher = {
          readContext,
          use: use2,
          useContext,
          useMemo,
          useReducer,
          useRef,
          useState: useState2,
          useInsertionEffect: noop$1,
          useLayoutEffect: noop$1,
          useCallback,
          // useImperativeHandle is not run in the server environment
          useImperativeHandle: noop$1,
          // Effects are not run in the server environment.
          useEffect: noop$1,
          // Debugging effect
          useDebugValue: noop$1,
          useDeferredValue,
          useTransition,
          useId,
          // Subscriptions are not setup in a server environment.
          useSyncExternalStore
        };
        {
          HooksDispatcher.useCacheRefresh = useCacheRefresh;
        }
        {
          HooksDispatcher.useEffectEvent = useEffectEvent;
        }
        {
          HooksDispatcher.useMemoCache = useMemoCache;
        }
        {
          HooksDispatcher.useHostTransitionStatus = useHostTransitionStatus;
        }
        {
          HooksDispatcher.useOptimistic = useOptimistic;
        }
        var currentResponseState = null;
        function setCurrentResponseState(responseState) {
          currentResponseState = responseState;
        }
        function getCacheSignal() {
          throw new Error("Not implemented.");
        }
        function getCacheForType(resourceType) {
          throw new Error("Not implemented.");
        }
        var DefaultCacheDispatcher = {
          getCacheSignal,
          getCacheForType
        };
        function getStackByComponentStackNode(componentStack) {
          try {
            var info = "";
            var node = componentStack;
            do {
              switch (node.tag) {
                case 0:
                  info += describeBuiltInComponentFrame(node.type, null, null);
                  break;
                case 1:
                  info += describeFunctionComponentFrame(node.type, null, null);
                  break;
                case 2:
                  info += describeClassComponentFrame(node.type, null, null);
                  break;
              }
              node = node.parent;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var ReactCurrentCache = ReactSharedInternals.ReactCurrentCache;
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var PENDING = 0;
        var COMPLETED = 1;
        var FLUSHED = 2;
        var ABORTED = 3;
        var ERRORED = 4;
        var OPEN = 0;
        var CLOSING = 1;
        var CLOSED = 2;
        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
        function defaultErrorHandler(error2) {
          console["error"](error2);
          return null;
        }
        function noop() {
        }
        function createRequest(children, resources, responseState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError) {
          prepareHostDispatcher();
          var pingedTasks = [];
          var abortSet = /* @__PURE__ */ new Set();
          var request = {
            destination: null,
            flushScheduled: false,
            responseState,
            progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
            status: OPEN,
            fatalError: null,
            nextSegmentId: 0,
            allPendingTasks: 0,
            pendingRootTasks: 0,
            resources,
            completedRootSegment: null,
            abortableTasks: abortSet,
            pingedTasks,
            clientRenderedBoundaries: [],
            completedBoundaries: [],
            partialBoundaries: [],
            onError: onError === void 0 ? defaultErrorHandler : onError,
            onAllReady: onAllReady === void 0 ? noop : onAllReady,
            onShellReady: onShellReady === void 0 ? noop : onShellReady,
            onShellError: onShellError === void 0 ? noop : onShellError,
            onFatalError: onFatalError === void 0 ? noop : onFatalError
          };
          var rootSegment = createPendingSegment(
            request,
            0,
            null,
            rootFormatContext,
            // Root segments are never embedded in Text on either edge
            false,
            false
          );
          rootSegment.parentFlushed = true;
          var rootTask = createTask(request, null, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
          pingedTasks.push(rootTask);
          return request;
        }
        var currentRequest = null;
        function resolveRequest() {
          if (currentRequest)
            return currentRequest;
          {
            var store = requestStorage.getStore();
            if (store)
              return store;
          }
          return null;
        }
        function pingTask(request, task) {
          var pingedTasks = request.pingedTasks;
          pingedTasks.push(task);
          if (request.pingedTasks.length === 1) {
            request.flushScheduled = request.destination !== null;
            scheduleWork(function() {
              return performWork(request);
            });
          }
        }
        function createSuspenseBoundary(request, fallbackAbortableTasks) {
          return {
            id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
            rootSegmentID: -1,
            parentFlushed: false,
            pendingTasks: 0,
            forceClientRender: false,
            completedSegments: [],
            byteSize: 0,
            fallbackAbortableTasks,
            errorDigest: null,
            resources: createBoundaryResources()
          };
        }
        function createTask(request, thenableState2, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          var task = {
            node,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment,
            abortSet,
            legacyContext,
            context,
            treeContext,
            thenableState: thenableState2
          };
          {
            task.componentStack = null;
          }
          abortSet.add(task);
          return task;
        }
        function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
          return {
            status: PENDING,
            id: -1,
            // lazily assigned later
            index,
            parentFlushed: false,
            chunks: [],
            children: [],
            formatContext,
            boundary,
            lastPushedText,
            textEmbedded
          };
        }
        var currentTaskInDEV = null;
        function getCurrentStackInDEV() {
          {
            if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
              return "";
            }
            return getStackByComponentStackNode(currentTaskInDEV.componentStack);
          }
        }
        function pushBuiltInComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 0,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushFunctionComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 1,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushClassComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 2,
              parent: task.componentStack,
              type
            };
          }
        }
        function popComponentStackInDEV(task) {
          {
            if (task.componentStack === null) {
              error("Unexpectedly popped too many stack frames. This is a bug in React.");
            } else {
              task.componentStack = task.componentStack.parent;
            }
          }
        }
        var lastBoundaryErrorComponentStackDev = null;
        function captureBoundaryErrorDetailsDev(boundary, error2) {
          {
            var errorMessage;
            if (typeof error2 === "string") {
              errorMessage = error2;
            } else if (error2 && typeof error2.message === "string") {
              errorMessage = error2.message;
            } else {
              errorMessage = String(error2);
            }
            var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
            lastBoundaryErrorComponentStackDev = null;
            boundary.errorMessage = errorMessage;
            boundary.errorComponentStack = errorComponentStack;
          }
        }
        function logRecoverableError(request, error2) {
          var errorDigest = request.onError(error2);
          if (errorDigest != null && typeof errorDigest !== "string") {
            throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
          }
          return errorDigest;
        }
        function fatalError(request, error2) {
          var onShellError = request.onShellError;
          onShellError(error2);
          var onFatalError = request.onFatalError;
          onFatalError(error2);
          if (request.destination !== null) {
            request.status = CLOSED;
            closeWithError(request.destination, error2);
          } else {
            request.status = CLOSING;
            request.fatalError = error2;
          }
        }
        function renderSuspenseBoundary(request, task, props) {
          pushBuiltInComponentStackInDEV(task, "Suspense");
          var parentBoundary = task.blockedBoundary;
          var parentSegment = task.blockedSegment;
          var fallback = props.fallback;
          var content = props.children;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          var insertionIndex = parentSegment.chunks.length;
          var boundarySegment = createPendingSegment(
            request,
            insertionIndex,
            newBoundary,
            parentSegment.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          parentSegment.children.push(boundarySegment);
          parentSegment.lastPushedText = false;
          var contentRootSegment = createPendingSegment(
            request,
            0,
            null,
            parentSegment.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          contentRootSegment.parentFlushed = true;
          task.blockedBoundary = newBoundary;
          task.blockedSegment = contentRootSegment;
          {
            setCurrentlyRenderingBoundaryResourcesTarget(request.resources, newBoundary.resources);
          }
          try {
            renderNode(request, task, content);
            pushSegmentFinale(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
            contentRootSegment.status = COMPLETED;
            queueCompletedSegment(newBoundary, contentRootSegment);
            if (newBoundary.pendingTasks === 0) {
              popComponentStackInDEV(task);
              return;
            }
          } catch (error2) {
            contentRootSegment.status = ERRORED;
            newBoundary.forceClientRender = true;
            newBoundary.errorDigest = logRecoverableError(request, error2);
            {
              captureBoundaryErrorDetailsDev(newBoundary, error2);
            }
          } finally {
            {
              setCurrentlyRenderingBoundaryResourcesTarget(request.resources, parentBoundary ? parentBoundary.resources : null);
            }
            task.blockedBoundary = parentBoundary;
            task.blockedSegment = parentSegment;
          }
          var suspendedFallbackTask = createTask(request, null, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
          {
            suspendedFallbackTask.componentStack = task.componentStack;
          }
          request.pingedTasks.push(suspendedFallbackTask);
          popComponentStackInDEV(task);
        }
        function renderHostElement(request, task, type, props) {
          pushBuiltInComponentStackInDEV(task, type);
          var segment = task.blockedSegment;
          var children = pushStartInstance(segment.chunks, type, props, request.resources, request.responseState, segment.formatContext, segment.lastPushedText);
          segment.lastPushedText = false;
          var prevContext = segment.formatContext;
          segment.formatContext = getChildFormatContext(prevContext, type, props);
          renderNode(request, task, children);
          segment.formatContext = prevContext;
          pushEndInstance(segment.chunks, type, props, request.responseState, prevContext);
          segment.lastPushedText = false;
          popComponentStackInDEV(task);
        }
        function shouldConstruct(Component) {
          return Component.prototype && Component.prototype.isReactComponent;
        }
        function renderWithHooks(request, task, prevThenableState, Component, props, secondArg) {
          var componentIdentity = {};
          prepareToUseHooks(task, componentIdentity, prevThenableState);
          var result = Component(props, secondArg);
          return finishHooks(Component, props, result, secondArg);
        }
        function finishClassComponent(request, task, instance, Component, props) {
          var nextChildren = instance.render();
          {
            if (instance.props !== props) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          {
            var childContextTypes = Component.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              var previousContext = task.legacyContext;
              var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
              task.legacyContext = mergedContext;
              renderNodeDestructive(request, task, null, nextChildren);
              task.legacyContext = previousContext;
              return;
            }
          }
          renderNodeDestructive(request, task, null, nextChildren);
        }
        function renderClassComponent(request, task, Component, props) {
          pushClassComponentStackInDEV(task, Component);
          var maskedContext = getMaskedContext(Component, task.legacyContext);
          var instance = constructClassInstance(Component, props, maskedContext);
          mountClassInstance(instance, Component, props, maskedContext);
          finishClassComponent(request, task, instance, Component, props);
          popComponentStackInDEV(task);
        }
        var didWarnAboutBadClass = {};
        var didWarnAboutModulePatternComponent = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutDefaultPropsOnFunctionComponent = {};
        var didWarnAboutGenerators = false;
        var didWarnAboutMaps = false;
        var hasWarnedAboutUsingContextAsConsumer = false;
        function renderIndeterminateComponent(request, task, prevThenableState, Component, props) {
          var legacyContext;
          {
            legacyContext = getMaskedContext(Component, task.legacyContext);
          }
          pushFunctionComponentStackInDEV(task, Component);
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
          }
          var value = renderWithHooks(request, task, prevThenableState, Component, props, legacyContext);
          var hasId = checkDidRenderIdHook();
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            mountClassInstance(value, Component, props, legacyContext);
            finishClassComponent(request, task, value, Component, props);
          } else {
            {
              validateFunctionComponentInDev(Component);
            }
            if (hasId) {
              var prevTreeContext = task.treeContext;
              var totalChildren = 1;
              var index = 0;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
              try {
                renderNodeDestructive(request, task, null, value);
              } finally {
                task.treeContext = prevTreeContext;
              }
            } else {
              renderNodeDestructive(request, task, null, value);
            }
          }
          popComponentStackInDEV(task);
        }
        function validateFunctionComponentInDev(Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (Component.defaultProps !== void 0) {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function renderForwardRef(request, task, prevThenableState, type, props, ref) {
          pushFunctionComponentStackInDEV(task, type.render);
          var children = renderWithHooks(request, task, prevThenableState, type.render, props, ref);
          var hasId = checkDidRenderIdHook();
          if (hasId) {
            var prevTreeContext = task.treeContext;
            var totalChildren = 1;
            var index = 0;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
            try {
              renderNodeDestructive(request, task, null, children);
            } finally {
              task.treeContext = prevTreeContext;
            }
          } else {
            renderNodeDestructive(request, task, null, children);
          }
          popComponentStackInDEV(task);
        }
        function renderMemo(request, task, prevThenableState, type, props, ref) {
          var innerType = type.type;
          var resolvedProps = resolveDefaultProps(innerType, props);
          renderElement(request, task, prevThenableState, innerType, resolvedProps, ref);
        }
        function renderContextConsumer(request, task, context, props) {
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var render = props.children;
          {
            if (typeof render !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          var newValue = readContext$1(context);
          var newChildren = render(newValue);
          renderNodeDestructive(request, task, null, newChildren);
        }
        function renderContextProvider(request, task, type, props) {
          var context = type._context;
          var value = props.value;
          var children = props.children;
          var prevSnapshot;
          {
            prevSnapshot = task.context;
          }
          task.context = pushProvider(context, value);
          renderNodeDestructive(request, task, null, children);
          task.context = popProvider(context);
          {
            if (prevSnapshot !== task.context) {
              error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
            }
          }
        }
        function renderLazyComponent(request, task, prevThenableState, lazyComponent, props, ref) {
          pushBuiltInComponentStackInDEV(task, "Lazy");
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          var resolvedProps = resolveDefaultProps(Component, props);
          renderElement(request, task, prevThenableState, Component, resolvedProps, ref);
          popComponentStackInDEV(task);
        }
        function renderOffscreen(request, task, props) {
          var mode = props.mode;
          if (mode === "hidden")
            ;
          else {
            renderNodeDestructive(request, task, null, props.children);
          }
        }
        function renderElement(request, task, prevThenableState, type, props, ref) {
          if (typeof type === "function") {
            if (shouldConstruct(type)) {
              renderClassComponent(request, task, type, props);
              return;
            } else {
              renderIndeterminateComponent(request, task, prevThenableState, type, props);
              return;
            }
          }
          if (typeof type === "string") {
            renderHostElement(request, task, type, props);
            return;
          }
          switch (type) {
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_FRAGMENT_TYPE: {
              renderNodeDestructive(request, task, null, props.children);
              return;
            }
            case REACT_OFFSCREEN_TYPE: {
              renderOffscreen(request, task, props);
              return;
            }
            case REACT_SUSPENSE_LIST_TYPE: {
              pushBuiltInComponentStackInDEV(task, "SuspenseList");
              renderNodeDestructive(request, task, null, props.children);
              popComponentStackInDEV(task);
              return;
            }
            case REACT_SCOPE_TYPE: {
              throw new Error("ReactDOMServer does not yet support scope components.");
            }
            case REACT_SUSPENSE_TYPE: {
              {
                renderSuspenseBoundary(request, task, props);
              }
              return;
            }
          }
          if (typeof type === "object" && type !== null) {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE: {
                renderForwardRef(request, task, prevThenableState, type, props, ref);
                return;
              }
              case REACT_MEMO_TYPE: {
                renderMemo(request, task, prevThenableState, type, props, ref);
                return;
              }
              case REACT_PROVIDER_TYPE: {
                renderContextProvider(request, task, type, props);
                return;
              }
              case REACT_CONTEXT_TYPE: {
                renderContextConsumer(request, task, type, props);
                return;
              }
              case REACT_LAZY_TYPE: {
                renderLazyComponent(request, task, prevThenableState, type, props);
                return;
              }
            }
          }
          var info = "";
          {
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
          }
          throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        function validateIterable(iterable, iteratorFn) {
          {
            if (typeof Symbol === "function" && iterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (iterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
          }
        }
        function renderNodeDestructive(request, task, prevThenableState, node) {
          {
            try {
              return renderNodeDestructiveImpl(request, task, prevThenableState, node);
            } catch (x) {
              if (typeof x === "object" && x !== null && typeof x.then === "function")
                ;
              else {
                lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();
              }
              throw x;
            }
          }
        }
        function renderNodeDestructiveImpl(request, task, prevThenableState, node) {
          task.node = node;
          if (typeof node === "object" && node !== null) {
            switch (node.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var element = node;
                var type = element.type;
                var props = element.props;
                var ref = element.ref;
                renderElement(request, task, prevThenableState, type, props, ref);
                return;
              }
              case REACT_PORTAL_TYPE:
                throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
              case REACT_LAZY_TYPE: {
                var lazyNode = node;
                var payload = lazyNode._payload;
                var init = lazyNode._init;
                var resolvedNode;
                {
                  try {
                    resolvedNode = init(payload);
                  } catch (x) {
                    if (typeof x === "object" && x !== null && typeof x.then === "function") {
                      pushBuiltInComponentStackInDEV(task, "Lazy");
                    }
                    throw x;
                  }
                }
                renderNodeDestructive(request, task, null, resolvedNode);
                return;
              }
            }
            if (isArray(node)) {
              renderChildrenArray(request, task, node);
              return;
            }
            var iteratorFn = getIteratorFn(node);
            if (iteratorFn) {
              {
                validateIterable(node, iteratorFn);
              }
              var iterator = iteratorFn.call(node);
              if (iterator) {
                var step = iterator.next();
                if (!step.done) {
                  var children = [];
                  do {
                    children.push(step.value);
                    step = iterator.next();
                  } while (!step.done);
                  renderChildrenArray(request, task, children);
                  return;
                }
                return;
              }
            }
            var maybeUsable = node;
            if (typeof maybeUsable.then === "function") {
              var thenable = maybeUsable;
              return renderNodeDestructiveImpl(request, task, null, unwrapThenable(thenable));
            }
            if (maybeUsable.$$typeof === REACT_CONTEXT_TYPE || maybeUsable.$$typeof === REACT_SERVER_CONTEXT_TYPE) {
              var context = maybeUsable;
              return renderNodeDestructiveImpl(request, task, null, readContext$1(context));
            }
            var childString = Object.prototype.toString.call(node);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          if (typeof node === "string") {
            var segment = task.blockedSegment;
            segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
            return;
          }
          if (typeof node === "number") {
            var _segment = task.blockedSegment;
            _segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
            return;
          }
          {
            if (typeof node === "function") {
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
        }
        function renderChildrenArray(request, task, children) {
          var totalChildren = children.length;
          for (var i = 0; i < totalChildren; i++) {
            var prevTreeContext = task.treeContext;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
            try {
              renderNode(request, task, children[i]);
            } finally {
              task.treeContext = prevTreeContext;
            }
          }
        }
        function spawnNewSuspendedTask(request, task, thenableState2, x) {
          var segment = task.blockedSegment;
          var insertionIndex = segment.chunks.length;
          var newSegment = createPendingSegment(
            request,
            insertionIndex,
            null,
            segment.formatContext,
            // Adopt the parent segment's leading text embed
            segment.lastPushedText,
            // Assume we are text embedded at the trailing edge
            true
          );
          segment.children.push(newSegment);
          segment.lastPushedText = false;
          var newTask = createTask(request, thenableState2, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
          {
            if (task.componentStack !== null) {
              newTask.componentStack = task.componentStack.parent;
            }
          }
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function renderNode(request, task, node) {
          var segment = task.blockedSegment;
          var childrenLength = segment.children.length;
          var chunkLength = segment.chunks.length;
          var previousFormatContext = task.blockedSegment.formatContext;
          var previousLegacyContext = task.legacyContext;
          var previousContext = task.context;
          var previousComponentStack = null;
          {
            previousComponentStack = task.componentStack;
          }
          try {
            return renderNodeDestructive(request, task, null, node);
          } catch (thrownValue) {
            resetHooksState();
            segment.children.length = childrenLength;
            segment.chunks.length = chunkLength;
            var x = thrownValue === SuspenseException ? (
              // This is a special type of exception used for Suspense. For historical
              // reasons, the rest of the Suspense implementation expects the thrown
              // value to be a thenable, because before `use` existed that was the
              // (unstable) API for suspending. This implementation detail can change
              // later, once we deprecate the old API in favor of `use`.
              getSuspendedThenable()
            ) : thrownValue;
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              var wakeable = x;
              var thenableState2 = getThenableStateAfterSuspending();
              spawnNewSuspendedTask(request, task, thenableState2, wakeable);
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              return;
            } else {
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              throw x;
            }
          }
        }
        function erroredTask(request, boundary, segment, error2) {
          var errorDigest = logRecoverableError(request, error2);
          if (boundary === null) {
            fatalError(request, error2);
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              boundary.errorDigest = errorDigest;
              {
                captureBoundaryErrorDetailsDev(boundary, error2);
              }
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function abortTaskSoft(task) {
          var request = this;
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          finishedTask(request, boundary, segment);
        }
        function abortTask(task, request, error2) {
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          if (boundary === null) {
            request.allPendingTasks--;
            if (request.status !== CLOSING && request.status !== CLOSED) {
              logRecoverableError(request, error2);
              fatalError(request, error2);
            }
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              boundary.errorDigest = request.onError(error2);
              {
                var errorPrefix = "The server did not finish this Suspense boundary: ";
                var errorMessage;
                if (error2 && typeof error2.message === "string") {
                  errorMessage = errorPrefix + error2.message;
                } else {
                  errorMessage = errorPrefix + String(error2);
                }
                var previousTaskInDev = currentTaskInDEV;
                currentTaskInDEV = task;
                try {
                  captureBoundaryErrorDetailsDev(boundary, errorMessage);
                } finally {
                  currentTaskInDEV = previousTaskInDev;
                }
              }
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
              return abortTask(fallbackTask, request, error2);
            });
            boundary.fallbackAbortableTasks.clear();
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
        }
        function queueCompletedSegment(boundary, segment) {
          if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
            var childSegment = segment.children[0];
            childSegment.id = segment.id;
            childSegment.parentFlushed = true;
            if (childSegment.status === COMPLETED) {
              queueCompletedSegment(boundary, childSegment);
            }
          } else {
            var completedSegments = boundary.completedSegments;
            completedSegments.push(segment);
          }
        }
        function finishedTask(request, boundary, segment) {
          if (boundary === null) {
            if (segment.parentFlushed) {
              if (request.completedRootSegment !== null) {
                throw new Error("There can only be one root segment. This is a bug in React.");
              }
              request.completedRootSegment = segment;
            }
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              request.onShellError = noop;
              var onShellReady = request.onShellReady;
              onShellReady();
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.forceClientRender)
              ;
            else if (boundary.pendingTasks === 0) {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                }
              }
              if (boundary.parentFlushed) {
                request.completedBoundaries.push(boundary);
              }
              boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
              boundary.fallbackAbortableTasks.clear();
            } else {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                  var completedSegments = boundary.completedSegments;
                  if (completedSegments.length === 1) {
                    if (boundary.parentFlushed) {
                      request.partialBoundaries.push(boundary);
                    }
                  }
                }
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function retryTask(request, task) {
          {
            var blockedBoundary = task.blockedBoundary;
            setCurrentlyRenderingBoundaryResourcesTarget(request.resources, blockedBoundary ? blockedBoundary.resources : null);
          }
          var segment = task.blockedSegment;
          if (segment.status !== PENDING) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          var childrenLength = segment.children.length;
          var chunkLength = segment.chunks.length;
          try {
            var prevThenableState = task.thenableState;
            task.thenableState = null;
            renderNodeDestructive(request, task, prevThenableState, task.node);
            pushSegmentFinale(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded);
            task.abortSet.delete(task);
            segment.status = COMPLETED;
            finishedTask(request, task.blockedBoundary, segment);
          } catch (thrownValue) {
            resetHooksState();
            segment.children.length = childrenLength;
            segment.chunks.length = chunkLength;
            var x = thrownValue === SuspenseException ? (
              // This is a special type of exception used for Suspense. For historical
              // reasons, the rest of the Suspense implementation expects the thrown
              // value to be a thenable, because before `use` existed that was the
              // (unstable) API for suspending. This implementation detail can change
              // later, once we deprecate the old API in favor of `use`.
              getSuspendedThenable()
            ) : thrownValue;
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              var ping = task.ping;
              x.then(ping, ping);
              task.thenableState = getThenableStateAfterSuspending();
            } else {
              task.abortSet.delete(task);
              segment.status = ERRORED;
              erroredTask(request, task.blockedBoundary, segment, x);
            }
          } finally {
            {
              setCurrentlyRenderingBoundaryResourcesTarget(request.resources, null);
            }
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function performWork(request) {
          if (request.status === CLOSED) {
            return;
          }
          var prevContext = getActiveContext();
          var prevDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = HooksDispatcher;
          var prevCacheDispatcher;
          {
            prevCacheDispatcher = ReactCurrentCache.current;
            ReactCurrentCache.current = DefaultCacheDispatcher;
          }
          var prevRequest = currentRequest;
          currentRequest = request;
          var prevGetCurrentStackImpl;
          {
            prevGetCurrentStackImpl = ReactDebugCurrentFrame.getCurrentStack;
            ReactDebugCurrentFrame.getCurrentStack = getCurrentStackInDEV;
          }
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks;
            var i;
            for (i = 0; i < pingedTasks.length; i++) {
              var task = pingedTasks[i];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i);
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          } finally {
            setCurrentResponseState(prevResponseState);
            ReactCurrentDispatcher.current = prevDispatcher;
            {
              ReactCurrentCache.current = prevCacheDispatcher;
            }
            {
              ReactDebugCurrentFrame.getCurrentStack = prevGetCurrentStackImpl;
            }
            if (prevDispatcher === HooksDispatcher) {
              switchContext(prevContext);
            }
            currentRequest = prevRequest;
          }
        }
        function flushSubtree(request, destination, segment) {
          segment.parentFlushed = true;
          switch (segment.status) {
            case PENDING: {
              var segmentID = segment.id = request.nextSegmentId++;
              segment.lastPushedText = false;
              segment.textEmbedded = false;
              return writePlaceholder(destination, request.responseState, segmentID);
            }
            case COMPLETED: {
              segment.status = FLUSHED;
              var r = true;
              var chunks = segment.chunks;
              var chunkIdx = 0;
              var children = segment.children;
              for (var childIdx = 0; childIdx < children.length; childIdx++) {
                var nextChild = children[childIdx];
                for (; chunkIdx < nextChild.index; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                r = flushSegment(request, destination, nextChild);
              }
              for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                writeChunk(destination, chunks[chunkIdx]);
              }
              if (chunkIdx < chunks.length) {
                r = writeChunkAndReturn(destination, chunks[chunkIdx]);
              }
              return r;
            }
            default: {
              throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
            }
          }
        }
        function flushSegment(request, destination, segment) {
          var boundary = segment.boundary;
          if (boundary === null) {
            return flushSubtree(request, destination, segment);
          }
          boundary.parentFlushed = true;
          if (boundary.forceClientRender) {
            writeStartClientRenderedSuspenseBoundary(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
            flushSubtree(request, destination, segment);
            return writeEndClientRenderedSuspenseBoundary(destination);
          } else if (boundary.pendingTasks > 0) {
            boundary.rootSegmentID = request.nextSegmentId++;
            if (boundary.completedSegments.length > 0) {
              request.partialBoundaries.push(boundary);
            }
            var id = boundary.id = assignSuspenseBoundaryID(request.responseState);
            writeStartPendingSuspenseBoundary(destination, request.responseState, id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination);
          } else if (boundary.byteSize > request.progressiveChunkSize) {
            boundary.rootSegmentID = request.nextSegmentId++;
            request.completedBoundaries.push(boundary);
            writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination);
          } else {
            {
              hoistResources(request.resources, boundary.resources);
            }
            writeStartCompletedSuspenseBoundary(destination);
            var completedSegments = boundary.completedSegments;
            if (completedSegments.length !== 1) {
              throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
            }
            var contentSegment = completedSegments[0];
            flushSegment(request, destination, contentSegment);
            return writeEndCompletedSuspenseBoundary(destination);
          }
        }
        function flushClientRenderedBoundary(request, destination, boundary) {
          return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
        }
        function flushSegmentContainer(request, destination, segment) {
          writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);
          flushSegment(request, destination, segment);
          return writeEndSegment(destination, segment.formatContext);
        }
        function flushCompletedBoundary(request, destination, boundary) {
          {
            setCurrentlyRenderingBoundaryResourcesTarget(request.resources, boundary.resources);
          }
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            flushPartiallyCompletedSegment(request, destination, boundary, segment);
          }
          completedSegments.length = 0;
          {
            writeResourcesForBoundary(destination, boundary.resources, request.responseState);
          }
          return writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID, boundary.resources);
        }
        function flushPartialBoundary(request, destination, boundary) {
          {
            setCurrentlyRenderingBoundaryResourcesTarget(request.resources, boundary.resources);
          }
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
              i++;
              completedSegments.splice(0, i);
              return false;
            }
          }
          completedSegments.splice(0, i);
          {
            return writeResourcesForBoundary(destination, boundary.resources, request.responseState);
          }
        }
        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
          if (segment.status === FLUSHED) {
            return true;
          }
          var segmentID = segment.id;
          if (segmentID === -1) {
            var rootSegmentID = segment.id = boundary.rootSegmentID;
            if (rootSegmentID === -1) {
              throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
            }
            return flushSegmentContainer(request, destination, segment);
          } else {
            flushSegmentContainer(request, destination, segment);
            return writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
          }
        }
        function flushCompletedQueues(request, destination) {
          beginWriting();
          try {
            var i;
            var completedRootSegment = request.completedRootSegment;
            if (completedRootSegment !== null) {
              if (request.pendingRootTasks === 0) {
                if (enableFloat) {
                  writePreamble(destination, request.resources, request.responseState, request.allPendingTasks === 0);
                }
                flushSegment(request, destination, completedRootSegment);
                request.completedRootSegment = null;
                writeCompletedRoot(destination, request.responseState);
              } else {
                return;
              }
            } else if (request.pendingRootTasks > 0) {
              return;
            }
            if (enableFloat) {
              writeHoistables(destination, request.resources, request.responseState);
            }
            var clientRenderedBoundaries = request.clientRenderedBoundaries;
            for (i = 0; i < clientRenderedBoundaries.length; i++) {
              var boundary = clientRenderedBoundaries[i];
              if (!flushClientRenderedBoundary(request, destination, boundary)) {
                request.destination = null;
                i++;
                clientRenderedBoundaries.splice(0, i);
                return;
              }
            }
            clientRenderedBoundaries.splice(0, i);
            var completedBoundaries = request.completedBoundaries;
            for (i = 0; i < completedBoundaries.length; i++) {
              var _boundary = completedBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary)) {
                request.destination = null;
                i++;
                completedBoundaries.splice(0, i);
                return;
              }
            }
            completedBoundaries.splice(0, i);
            completeWriting(destination);
            beginWriting(destination);
            var partialBoundaries = request.partialBoundaries;
            for (i = 0; i < partialBoundaries.length; i++) {
              var _boundary2 = partialBoundaries[i];
              if (!flushPartialBoundary(request, destination, _boundary2)) {
                request.destination = null;
                i++;
                partialBoundaries.splice(0, i);
                return;
              }
            }
            partialBoundaries.splice(0, i);
            var largeBoundaries = request.completedBoundaries;
            for (i = 0; i < largeBoundaries.length; i++) {
              var _boundary3 = largeBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary3)) {
                request.destination = null;
                i++;
                largeBoundaries.splice(0, i);
                return;
              }
            }
            largeBoundaries.splice(0, i);
          } finally {
            if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
              request.flushScheduled = false;
              {
                writePostamble(destination, request.responseState);
              }
              completeWriting(destination);
              flushBuffered(destination);
              {
                if (request.abortableTasks.size !== 0) {
                  error("There was still abortable task at the root when we closed. This is a bug in React.");
                }
              }
              close(destination);
            } else {
              completeWriting(destination);
              flushBuffered(destination);
            }
          }
        }
        function startWork(request) {
          request.flushScheduled = request.destination !== null;
          {
            scheduleWork(function() {
              return requestStorage.run(request, performWork, request);
            });
          }
        }
        function enqueueFlush(request) {
          if (request.flushScheduled === false && // If there are pinged tasks we are going to flush anyway after work completes
          request.pingedTasks.length === 0 && // If there is no destination there is nothing we can flush to. A flush will
          // happen when we start flowing again
          request.destination !== null) {
            var destination = request.destination;
            request.flushScheduled = true;
            scheduleWork(function() {
              return flushCompletedQueues(request, destination);
            });
          }
        }
        function startFlowing(request, destination) {
          if (request.status === CLOSING) {
            request.status = CLOSED;
            closeWithError(destination, request.fatalError);
            return;
          }
          if (request.status === CLOSED) {
            return;
          }
          if (request.destination !== null) {
            return;
          }
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          }
        }
        function abort(request, reason) {
          try {
            var abortableTasks = request.abortableTasks;
            if (abortableTasks.size > 0) {
              var error2 = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
              abortableTasks.forEach(function(task) {
                return abortTask(task, request, error2);
              });
              abortableTasks.clear();
            }
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error3) {
            logRecoverableError(request, error3);
            fatalError(request, error3);
          }
        }
        function flushResources(request) {
          enqueueFlush(request);
        }
        function getResources(request) {
          return request.resources;
        }
        function createDrainHandler(destination, request) {
          return function() {
            return startFlowing(request, destination);
          };
        }
        function createAbortHandler(request, reason) {
          return function() {
            return abort(request, new Error(reason));
          };
        }
        function createRequestImpl(children, options) {
          var resources = createResources();
          return createRequest(children, resources, createResponseState(resources, options ? options.identifierPrefix : void 0, options ? options.nonce : void 0, options ? options.bootstrapScriptContent : void 0, options ? options.bootstrapScripts : void 0, options ? options.bootstrapModules : void 0, options ? options.unstable_externalRuntimeSrc : void 0), createRootFormatContext(options ? options.namespaceURI : void 0), options ? options.progressiveChunkSize : void 0, options ? options.onError : void 0, options ? options.onAllReady : void 0, options ? options.onShellReady : void 0, options ? options.onShellError : void 0, void 0);
        }
        function renderToPipeableStream2(children, options) {
          var request = createRequestImpl(children, options);
          var hasStartedFlowing = false;
          startWork(request);
          return {
            pipe: function(destination) {
              if (hasStartedFlowing) {
                throw new Error("React currently only supports piping to one writable stream.");
              }
              hasStartedFlowing = true;
              startFlowing(request, destination);
              destination.on("drain", createDrainHandler(destination, request));
              destination.on("error", createAbortHandler(request, "The destination stream errored while writing data."));
              destination.on("close", createAbortHandler(request, "The destination stream closed early."));
              return destination;
            },
            abort: function(reason) {
              abort(request, reason);
            }
          };
        }
        exports.renderToPipeableStream = renderToPipeableStream2;
        exports.version = ReactVersion;
      })();
    }
  }
});

// node_modules/react-dom/server.node.js
var require_server_node = __commonJS({
  "node_modules/react-dom/server.node.js"(exports) {
    "use strict";
    var l;
    var s;
    if (process.env.NODE_ENV === "production") {
      l = require_react_dom_server_legacy_node_production_min();
      s = require_react_dom_server_node_production_min();
    } else {
      l = require_react_dom_server_legacy_node_development();
      s = require_react_dom_server_node_development();
    }
    exports.version = l.version;
    exports.renderToString = l.renderToString;
    exports.renderToStaticMarkup = l.renderToStaticMarkup;
    exports.renderToNodeStream = l.renderToNodeStream;
    exports.renderToStaticNodeStream = l.renderToStaticNodeStream;
    exports.renderToPipeableStream = s.renderToPipeableStream;
  }
});

// node_modules/react/cjs/react-jsx-runtime.production.min.js
var require_react_jsx_runtime_production_min = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.production.min.js"(exports) {
    "use strict";
    var f = require_react();
    var k = Symbol.for("react.element");
    var l = Symbol.for("react.fragment");
    var m = Object.prototype.hasOwnProperty;
    var n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;
    var p = { key: true, ref: true, __self: true, __source: true };
    function q(c, a, g) {
      var b, d = {}, e = null, h = null;
      void 0 !== g && (e = "" + g);
      void 0 !== a.key && (e = "" + a.key);
      void 0 !== a.ref && (h = a.ref);
      for (b in a)
        m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
      if (c && c.defaultProps)
        for (b in a = c.defaultProps, a)
          void 0 === d[b] && (d[b] = a[b]);
      return { $$typeof: k, type: c, key: e, ref: h, props: d, _owner: n.current };
    }
    exports.Fragment = l;
    exports.jsx = q;
    exports.jsxs = q;
  }
});

// node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var React = require_react();
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var enableScopeAPI = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_CLIENT_REFERENCE$1 = Symbol.for("react.client.reference");
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || type === REACT_CACHE_TYPE || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_CACHE_TYPE: {
              return "Cache";
            }
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
              case REACT_SERVER_CONTEXT_TYPE: {
                var context2 = type;
                return (context2.displayName || context2._globalName) + ".Provider";
              }
            }
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement$1(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement$1(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement$1(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement$1(null);
                }
              }
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        var didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function warnIfStringRefCannotBeAutoConverted(config, self) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function defineRefPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingRef = function() {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
        }
        function ReactElement(type, key, ref, self, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        }
        function jsxDEV(type, config, maybeKey, source, self) {
          {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            if (maybeKey !== void 0) {
              {
                checkKeyStringCoercion(maybeKey);
              }
              key = "" + maybeKey;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            if (hasValidRef(config)) {
              ref = config.ref;
              warnIfStringRefCannotBeAutoConverted(config, self);
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
            return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);
          }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function isValidElement(object) {
          {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
        }
        function getDeclarationErrorAddendum() {
          {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
        }
        function getSourceInfoErrorAddendum(source) {
          {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            setCurrentlyValidatingElement(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement(null);
          }
        }
        function validateChildKeys(node, parentType) {
          {
            if (typeof node !== "object" || !node) {
              return;
            }
            if (node.$$typeof === REACT_CLIENT_REFERENCE)
              ;
            else if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            if (type.$$typeof === REACT_CLIENT_REFERENCE) {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement(null);
            }
          }
        }
        var didWarnAboutKeySpread = {};
        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
          {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendum(source);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
            var element = jsxDEV(type, props, key, source, self);
            if (element == null) {
              return element;
            }
            if (validType) {
              var children = props.children;
              if (children !== void 0) {
                if (isStaticChildren) {
                  if (isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                      validateChildKeys(children[i], type);
                    }
                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  }
                } else {
                  validateChildKeys(children, type);
                }
              }
            }
            if (hasOwnProperty.call(props, "key")) {
              var componentName = getComponentNameFromType(type);
              var keys = Object.keys(props).filter(function(k) {
                return k !== "key";
              });
              var beforeExample = keys.length > 0 ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
              if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                var afterExample = keys.length > 0 ? "{" + keys.join(": ..., ") + ": ...}" : "{}";
                error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                didWarnAboutKeySpread[componentName + beforeExample] = true;
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
        }
        function jsxWithValidationStatic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, true);
          }
        }
        function jsxWithValidationDynamic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, false);
          }
        }
        var jsx4 = jsxWithValidationDynamic;
        var jsxs3 = jsxWithValidationStatic;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.jsx = jsx4;
        exports.jsxs = jsxs3;
      })();
    }
  }
});

// node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "node_modules/react/jsx-runtime.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_jsx_runtime_production_min();
    } else {
      module2.exports = require_react_jsx_runtime_development();
    }
  }
});

// src/server.jsx
var import_promises = require("fs/promises");
var import_server = __toESM(require_server_node());

// src/App.jsx
var import_react2 = __toESM(require_react());

// src/List.jsx
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var List = () => {
  const data = (0, import_react.use)(
    new Promise((resolve) => {
      setTimeout(() => {
        resolve([
          { name: "TypeScript", mark: "4.9" },
          { name: "JavaScript", mark: "4.8" },
          { name: "Go", mark: "4.7" }
        ]);
      }, 2e3);
    })
  );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ul", { children: data.map(({ name, mark }) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("li", { children: [
    name,
    " - ",
    mark
  ] }, name)) }) });
};
var List_default = List;

// src/App.jsx
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var App = () => {
  const [count, setCount] = (0, import_react2.useState)(0);
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("html", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("head", { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("title", { children: "Streaming API" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("body", { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { children: [
      "Count = ",
      count,
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("button", { onClick: () => setCount((prevCount) => prevCount + 1), children: "Click" }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_react2.Suspense, { fallback: "Loading...", children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(List_default, {}) })
    ] }) })
  ] });
};

// src/server.jsx
var import_http = __toESM(require("http"));
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
import_http.default.createServer(async (req, res) => {
  if (req.url === "/bundle.js") {
    const bundle = await (0, import_promises.readFile)("./dist/bundle.js");
    res.writeHead(200, {
      "Content-Type": "text/javascript"
    });
    res.end(bundle);
    return;
  }
  const stream = (0, import_server.renderToPipeableStream)(/* @__PURE__ */ (0, import_jsx_runtime3.jsx)(App, {}), {
    bootstrapScripts: ["bundle.js"],
    onShellReady: () => {
      stream.pipe(res);
    }
  });
}).listen(3e3);
/*! Bundled license information:

react/cjs/react.production.min.js:
  (**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.production.min.js:
  (**
   * @license React
   * scheduler.production.min.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.min.js:
  (**
   * @license React
   * react-dom.production.min.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react-dom/cjs/react-dom-server-legacy.node.production.min.js:
  (**
   * @license React
   * react-dom-server-legacy.node.production.min.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-server.node.production.min.js:
  (**
   * @license React
   * react-dom-server.node.production.min.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-server-legacy.node.development.js:
  (**
   * @license React
   * react-dom-server-legacy.node.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-server.node.development.js:
  (**
   * @license React
   * react-dom-server.node.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.production.min.js:
  (**
   * @license React
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
